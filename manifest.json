{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.0", "generated_at": "2023-08-08T14:54:37.105148Z", "invocation_id": "c945857c-ce25-47bd-9184-ee341a3f9b40", "env": {}, "project_name": "fhir_dbt_analytics", "project_id": "33dd42d0ea0b0349abff53ce4de01b8a", "user_id": "c6312da2-1b42-412e-b5d3-ca075c8c722f", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "servicerequest_reference_practitioner_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/servicerequest_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_practitioner_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_practitioner_unresolved"], "alias": "servicerequest_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "95e68114e8f3a7bed43c91426e94ea8f77ea1c6a33fb6cfa896b2dcc998be9f1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent practitioner", "short_description": "SerReq ref. Prac - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent practitioner", "short_description": "SerReq ref. Prac - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent practitioner", "short_description": "SerReq ref. Prac - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1691506478.215163, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`servicerequest_reference_practitioner_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that reference a non-existent practitioner\",\n      \"short_description\": \"SerReq ref. Prac - non-exist\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('requester', 'Practitioner') }} AS has_reference_value,\n      {{ reference_resolves('requester', 'Practitioner') }} AS reference_resolves\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Practitioner", "package": null, "version": null}, {"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_practitioner_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_medicationrequest_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_medicationrequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_medicationrequest_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_medicationrequest_unresolved"], "alias": "medicationrequest_reference_medicationrequest_unresolved", "checksum": {"name": "sha256", "checksum": "d91d09e7e2c3fed576794ec86a89d4e0f6bae74ee8c4dab85e821ae79d4d4d1a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent parent medication request", "short_description": "MedReq ref. MedReq - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent parent medication request", "short_description": "MedReq ref. MedReq - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent parent medication request", "short_description": "MedReq ref. MedReq - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506478.2854881, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_medicationrequest_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent parent medication request\",\n      \"short_description\": \"MedReq ref. MedReq - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": [\n          'requester.practitionerId', \n          'basedOn.medicationRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'MedicationRequest') }} AS has_reference_value,\n      {{ reference_resolves('basedOn', 'MedicationRequest') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_medicationrequest_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_medicationrequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.observation_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "observation_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/observation_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/observation_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.observation_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_patient_undefined"], "alias": "observation_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "ba05989679c6db0711b806783c5e9f23de210564ce690834df8da9eec1c5c791"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that do not have a patient reference recorded", "short_description": "Obs ref. Patient - unrecorded", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that do not have a patient reference recorded", "short_description": "Obs ref. Patient - unrecorded", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that do not have a patient reference recorded", "short_description": "Obs ref. Patient - unrecorded", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1691506478.294338, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`observation_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that do not have a patient reference recorded\",\n      \"short_description\": \"Obs ref. Patient - unrecorded\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "procedure_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/procedure_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_encounter_unresolved"], "alias": "procedure_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "7f3d104bca5bef13fc26d3af793b5c8c2d6c43406c51e26fcd331237fb7a2a43"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent encounter", "short_description": "LDA Proc ref. Enc - non-exist", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent encounter", "short_description": "LDA Proc ref. Enc - non-exist", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent encounter", "short_description": "LDA Proc ref. Enc - non-exist", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1691506478.302256, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`procedure_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that reference a non-existent encounter\",\n      \"short_description\": \"LDA Proc ref. Enc - non-exist\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "Procedure", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_encounter_undefined"], "alias": "medicationstatement_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "3bf3d3a022124036fb24f7e6933d375767bc166445c9ae32b53495ff8de7111b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that do not have an encounter reference recorded", "short_description": "MedStat ref. Enc - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that do not have an encounter reference recorded", "short_description": "MedStat ref. Enc - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that do not have an encounter reference recorded", "short_description": "MedStat ref. Enc - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1691506478.3094661, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that do not have an encounter reference recorded\",\n      \"short_description\": \"MedStat ref. Enc - unrecorded\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['context.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('context', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_patient_undefined"], "alias": "medicationstatement_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "a246d61162f2f931e5ba5320e679c5f7957ae43a49f2930266a535966bc995eb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that do not have a patient reference recorded", "short_description": "MedStat ref. Patient - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that do not have a patient reference recorded", "short_description": "MedStat ref. Patient - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that do not have a patient reference recorded", "short_description": "MedStat ref. Patient - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1691506478.3160698, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that do not have a patient reference recorded\",\n      \"short_description\": \"MedStat ref. Patient - unrecorded\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.encounter_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "encounter_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/encounter_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/encounter_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.encounter_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_reference_patient_undefined"], "alias": "encounter_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "7674c0bfc574f3a386bafe4dad42f8668ebe372214b2cb84625a565a32385398"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Encounter resources that do not have a patient reference recorded", "short_description": "Enc ref. Patient - unrecorded", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Encounter resources that do not have a patient reference recorded", "short_description": "Enc ref. Patient - unrecorded", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Encounter resources that do not have a patient reference recorded", "short_description": "Enc ref. Patient - unrecorded", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1691506478.322927, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`encounter_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Encounter resources that do not have a patient reference recorded\",\n      \"short_description\": \"Enc ref. Patient - unrecorded\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Encounter') }} AS E\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_encounter_unresolved"], "alias": "medicationrequest_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "5be12abf9e1d607b243b62b7bbb50b12ba735725f9f38a3bd48e9a719f3bea55"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent encounter", "short_description": "MedReq ref. Enc - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent encounter", "short_description": "MedReq ref. Enc - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent encounter", "short_description": "MedReq ref. Enc - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506478.329597, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent encounter\",\n      \"short_description\": \"MedReq ref. Enc - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.patient_unknown_gender": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "patient_unknown_gender", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/patient_unknown_gender.sql", "original_file_path": "models/metrics/data_quality/patient_unknown_gender.sql", "unique_id": "model.fhir_dbt_analytics.patient_unknown_gender", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_unknown_gender"], "alias": "patient_unknown_gender", "checksum": {"name": "sha256", "checksum": "b962cb7462306bda48da99cb0643c9b80fb68617a89a82b07d590556393d4b85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of patients that have unknown gender", "short_description": "Patients unknown gender", "primary_resource": "Patient", "primary_fields": ["gender"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of patients that have unknown gender", "short_description": "Patients unknown gender", "primary_resource": "Patient", "primary_fields": ["gender"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of patients that have unknown gender", "short_description": "Patients unknown gender", "primary_resource": "Patient", "primary_fields": ["gender"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}}, "created_at": 1691506478.3392901, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`patient_unknown_gender`", "raw_code": "{{ config(\n    meta = {\n      \"description\": \"Proportion of patients that have unknown gender\",\n      \"short_description\": \"Patients unknown gender\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['gender'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"The patient active status  (true | false)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST({{ get_column_or_default('active') }} AS STRING) AS active,\n      CASE WHEN LOWER(P.gender) = 'unknown' THEN 1 ELSE 0 END AS patient_gender_unknown\n    FROM {{ ref('Patient') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(patient_gender_unknown)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_unknown_gender.sql", "compiled": true, "compiled_code": "\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n), A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      CAST(active AS STRING) AS active,\n      CASE WHEN LOWER(P.gender) = 'unknown' THEN 1 ELSE 0 END AS patient_gender_unknown\n    FROM __dbt__cte__Patient AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_unknown_gender' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(active AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(patient_gender_unknown) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(IF((COUNT(id)) != 0, (SUM(patient_gender_unknown)) / (COUNT(id)), NULL) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.person_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "person_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/person_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/person_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.person_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "person_reference_patient_undefined"], "alias": "person_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "d7eb0f28a24e7259cccb78e8adce33e55301d2ca01a661ddf68a7fbfa2cb599d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Person resources that do not have at least one reference to a patient recorded", "short_description": "Person ref. Patient - unrecorded", "primary_resource": "Person", "primary_fields": ["link.target.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "dimension_a": "person_active", "dimension_a_description": "The person active status  (true | false)", "dimension_b": "person_gender", "dimension_b_description": "The gender of the person (male | female | other | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Person resources that do not have at least one reference to a patient recorded", "short_description": "Person ref. Patient - unrecorded", "primary_resource": "Person", "primary_fields": ["link.target.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "dimension_a": "person_active", "dimension_a_description": "The person active status  (true | false)", "dimension_b": "person_gender", "dimension_b_description": "The gender of the person (male | female | other | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Person resources that do not have at least one reference to a patient recorded", "short_description": "Person ref. Patient - unrecorded", "primary_resource": "Person", "primary_fields": ["link.target.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "dimension_a": "person_active", "dimension_a_description": "The person active status  (true | false)", "dimension_b": "person_gender", "dimension_b_description": "The gender of the person (male | female | other | unknown)"}}, "created_at": 1691506478.347084, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`person_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Person resources that do not have at least one reference to a patient recorded\",\n      \"short_description\": \"Person ref. Patient - unrecorded\",\n      \"primary_resource\": \"Person\",\n      \"primary_fields\": ['link.target.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"dimension_a\": \"person_active\",\n      \"dimension_a_description\": \"The person active status  (true | false)\",\n      \"dimension_b\": \"person_gender\",\n      \"dimension_b_description\": \"The gender of the person (male | female | other | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST({{ get_column_or_default('active') }} AS STRING) person_active,\n      CAST({{ get_column_or_default('gender') }} AS STRING) as person_gender,\n      ( SELECT SIGN(COUNT(*)) FROM {{ spark_parenthesis(unnest(\"link\", \"PL\")) }} WHERE PL.target.patientId IS NOT NULL ) AS has_patient_id\n    FROM {{ ref('Person') }}\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_patient_id)',\n    denominator = 'COUNT(DISTINCT id)'\n) }}", "language": "sql", "refs": [{"name": "Person", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/person_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Person as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'person_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Person", "sql": " __dbt__cte__Person as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.patient_dob_distribution": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "patient_dob_distribution", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/patient_dob_distribution.sql", "original_file_path": "models/metrics/data_quality/patient_dob_distribution.sql", "unique_id": "model.fhir_dbt_analytics.patient_dob_distribution", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_dob_distribution"], "alias": "patient_dob_distribution", "checksum": {"name": "sha256", "checksum": "d9982a9af78580d91555858d63b78aa1503e1a2bb461e5bc839b26f63347f8ce"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Patient birthdate distribution", "short_description": "Patient dob distribution", "primary_resource": "Patient", "primary_fields": ["birthdate"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "dimension_a": "decade", "dimension_a_description": "The patient's birth decade'"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Patient birthdate distribution", "short_description": "Patient dob distribution", "primary_resource": "Patient", "primary_fields": ["birthdate"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "dimension_a": "decade", "dimension_a_description": "The patient's birth decade'"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Patient birthdate distribution", "short_description": "Patient dob distribution", "primary_resource": "Patient", "primary_fields": ["birthdate"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "dimension_a": "decade", "dimension_a_description": "The patient's birth decade'"}}, "created_at": 1691506478.357017, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`patient_dob_distribution`", "raw_code": "{{ config(\n    meta = {\n      \"description\": \"Patient birthdate distribution\",\n      \"short_description\": \"Patient dob distribution\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['birthdate'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Data distribution\",\n      \"dimension_a\": \"decade\",\n      \"dimension_a_description\": \"The patient's birth decade'\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST(ROUND(SAFE_CAST(SUBSTR(P.birthdate,0,4) AS {{ type_long() }}),-1) AS STRING) AS decade,\n    FROM {{ ref('Patient') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_dob_distribution.sql", "compiled": true, "compiled_code": "\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_dob_distribution' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_practitioner_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_practitioner_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_practitioner_unresolved"], "alias": "medicationrequest_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "516f293e7ee6b27f31284cad8359d7c1e596afa4ec694f3a1ed9c38e7d937a71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent practitioner", "short_description": "MedReq ref. Prac - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent practitioner", "short_description": "MedReq ref. Prac - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent practitioner", "short_description": "MedReq ref. Prac - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506478.362894, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_practitioner_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent practitioner\",\n      \"short_description\": \"MedReq ref. Prac - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('requester', 'Practitioner') }} AS has_reference_value,\n      {{ reference_resolves('requester', 'Practitioner') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Practitioner", "package": null, "version": null}, {"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_practitioner_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.encounter_count_by_end_date": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "encounter_count_by_end_date", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/encounter_count_by_end_date.sql", "original_file_path": "models/metrics/data_quality/encounter_count_by_end_date.sql", "unique_id": "model.fhir_dbt_analytics.encounter_count_by_end_date", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_count_by_end_date"], "alias": "encounter_count_by_end_date", "checksum": {"name": "sha256", "checksum": "07b4747b61822fe664ffe17ee73101fd5943c4aa06cea5559a593d8ca157adc9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of encounters ending during each day", "short_description": "Discharged encounters", "primary_resource": "Encounter", "primary_fields": ["period.end"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "metric_date_field": "Encounter.period.end", "metric_date_description": "Encounter end date", "dimension_a": "latest_encounter_class", "dimension_a_description": "The latest class of the encounter", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of encounters ending during each day", "short_description": "Discharged encounters", "primary_resource": "Encounter", "primary_fields": ["period.end"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "metric_date_field": "Encounter.period.end", "metric_date_description": "Encounter end date", "dimension_a": "latest_encounter_class", "dimension_a_description": "The latest class of the encounter", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of encounters ending during each day", "short_description": "Discharged encounters", "primary_resource": "Encounter", "primary_fields": ["period.end"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "metric_date_field": "Encounter.period.end", "metric_date_description": "Encounter end date", "dimension_a": "latest_encounter_class", "dimension_a_description": "The latest class of the encounter", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}}, "created_at": 1691506478.371257, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`encounter_count_by_end_date`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of encounters ending during each day\",\n      \"short_description\": \"Discharged encounters\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['period.end'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Encounter daily\",\n      \"metric_date_field\": \"Encounter.period.end\",\n      \"metric_date_description\": \"Encounter end date\",\n      \"dimension_a\": \"latest_encounter_class\",\n      \"dimension_a_description\": \"The latest class of the encounter\",\n      \"dimension_b\": \"encounter_service_provider\",\n      \"dimension_b_description\": \"The organization responsible for providing the services for this encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions(exclude_col='metric_date') }}\n      {{ metric_date(['period.end']) }} AS metric_date,\n      {{ get_column_or_default('serviceProvider.organizationId', 'Encounter') }} AS encounter_service_provider,\n      CASE\n        WHEN UPPER(class.code) IN ('IMP', 'ACUTE', 'NONAC') THEN 'IMP/ACUTE/NONAC'\n        WHEN UPPER(class.code) IN ('IMPPS', 'IMPRE', 'OTHER') THEN 'IMPPS/IMPRE/OTHER'\n        ELSE class.code END AS latest_encounter_class\n    FROM {{ ref('Encounter') }}\n    WHERE\n      UPPER(class.code) IN ('IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER', 'IMPPS', 'IMPRE', 'OTHER')\n      AND status NOT IN ('cancelled', 'entered-in-error')\n      AND period.end IS NOT NULL\n      AND period.end <> ''\n{%- endset -%}\n\n{{- calculate_metric(metric_sql) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.metric_date", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_count_by_end_date.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_count_by_end_date' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_patients_with_servicerequest_daily": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_patients_with_servicerequest_daily", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_patients_with_servicerequest_daily.sql", "original_file_path": "models/metrics/data_quality/active_patients_with_servicerequest_daily.sql", "unique_id": "model.fhir_dbt_analytics.active_patients_with_servicerequest_daily", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_patients_with_servicerequest_daily"], "alias": "active_patients_with_servicerequest_daily", "checksum": {"name": "sha256", "checksum": "5b5e288da2ee55679fd529c2d024d46f57d4266229e33a5f38caf878e65731e6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of active patients with at least one service request that day", "short_description": "Patients with ServiceRequest", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId", "encounter.encounterId", "authoredOn"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of active patients with at least one service request that day", "short_description": "Patients with ServiceRequest", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId", "encounter.encounterId", "authoredOn"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of active patients with at least one service request that day", "short_description": "Patients with ServiceRequest", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId", "encounter.encounterId", "authoredOn"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}}, "created_at": 1691506478.387133, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_patients_with_servicerequest_daily`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of active patients with at least one service request that day\",\n      \"short_description\": \"Patients with ServiceRequest\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['subject.patientId', 'encounter.encounterId', 'authoredOn'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Active patients with resource\",\n      \"dimension_a\": \"encounter_class_group\",\n      \"dimension_a_description\": \"The latest class of the encounter grouped into ambulatory or non-ambulatory\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      ActiveEncounters.*,\n      S.subject.patientId AS servicerequest_patientid\n    FROM ({{ active_encounters() }}) AS ActiveEncounters\n    LEFT JOIN {{ ref('ServiceRequest') }} AS S\n      ON ActiveEncounters.id = S.encounter.encounterId\n      AND ActiveEncounters.metric_date = S.metric_date\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT servicerequest_patientid)',\n    denominator = 'COUNT(DISTINCT patientId)'\n) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_patients_with_servicerequest_daily.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_patients_with_servicerequest_daily' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "careteam_reference_practitioner_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/careteam_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_practitioner_undefined.sql", "unique_id": "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_practitioner_undefined"], "alias": "careteam_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "8b7a7b6899f3632626410d3bf92f44d627f257159cdc19da75f73e130158e875"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that do not have a practitioner reference recorded", "short_description": "CareTeam ref. Prac - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that do not have a practitioner reference recorded", "short_description": "CareTeam ref. Prac - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that do not have a practitioner reference recorded", "short_description": "CareTeam ref. Prac - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1691506478.403578, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`careteam_reference_practitioner_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"CareTeam ref. Prac - unrecorded\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['participant.member.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"C.participant\", \"CP\")) }}\n        WHERE CP.member.practitionerId IS NOT NULL\n        AND CP.member.practitionerId <> ''\n      ) AS has_reference_value\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "CareTeam", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_practitioner_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_medicationrequest_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_medicationrequest_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_medicationrequest_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_medicationrequest_undefined"], "alias": "medicationrequest_reference_medicationrequest_undefined", "checksum": {"name": "sha256", "checksum": "9a9648555587a5dad1c499335fe1f9d4ba419a60c06bcc2ecfa88f0409765a8d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have a parent medication request reference recorded", "short_description": "MedReq ref. MedReq - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have a parent medication request reference recorded", "short_description": "MedReq ref. MedReq - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have a parent medication request reference recorded", "short_description": "MedReq ref. MedReq - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "basedOn.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506478.410222, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_medicationrequest_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have a parent medication request reference recorded\",\n      \"short_description\": \"MedReq ref. MedReq - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": [\n          'requester.practitionerId', \n          'basedOn.medicationRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'MedicationRequest') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_medicationrequest_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_medicationrequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/composition_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.composition_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_encounter_unresolved"], "alias": "composition_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "b3fa98a3eae23e39f4f9c2c2464d5a39555344601e60dbfb6d28676e6c2420aa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that reference a non-existent encounter", "short_description": "Comp ref. Enc - non-exist", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Encounter"], "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that reference a non-existent encounter", "short_description": "Comp ref. Enc - non-exist", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Encounter"], "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that reference a non-existent encounter", "short_description": "Comp ref. Enc - non-exist", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Encounter"], "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506478.418016, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that reference a non-existent encounter\",\n      \"short_description\": \"Comp ref. Enc - non-exist\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"secondary_resources\": ['Encounter'],\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.patient_missing_dob": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "patient_missing_dob", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/patient_missing_dob.sql", "original_file_path": "models/metrics/data_quality/patient_missing_dob.sql", "unique_id": "model.fhir_dbt_analytics.patient_missing_dob", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_missing_dob"], "alias": "patient_missing_dob", "checksum": {"name": "sha256", "checksum": "b12f2639188c637a96b9c6895b3ebd716d0a467a8d8587b4502e515536e720be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of patients that have missing birthdate", "short_description": "Patients missing dob", "primary_resource": "Patient", "primary_fields": ["birthdate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of patients that have missing birthdate", "short_description": "Patients missing dob", "primary_resource": "Patient", "primary_fields": ["birthdate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of patients that have missing birthdate", "short_description": "Patients missing dob", "primary_resource": "Patient", "primary_fields": ["birthdate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}}, "created_at": 1691506478.426307, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`patient_missing_dob`", "raw_code": "{{ config(\n    meta = {\n      \"description\": \"Proportion of patients that have missing birthdate\",\n      \"short_description\": \"Patients missing dob\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['birthdate'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"The patient active status  (true | false)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST({{ get_column_or_default('active') }} AS STRING) AS active,\n      CASE WHEN P.birthdate IS NULL OR  P.birthdate = '' THEN 1 ELSE 0 END AS patient_missing_dob\n    FROM {{ ref('Patient') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(patient_missing_dob)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_missing_dob.sql", "compiled": true, "compiled_code": "\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_missing_dob' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_dosage_dose_rate": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_dosage_dose_rate", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_dosage_dose_rate.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_dosage_dose_rate.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_dosage_dose_rate", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_dosage_dose_rate"], "alias": "medicationadministration_dosage_dose_rate", "checksum": {"name": "sha256", "checksum": "45bcf874bbc00246b04bc02554bb68fc9dc6ae8ecb770c04851eae4469c85712"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication administrations with dosage dose or rate recorded", "short_description": "MedAdmin dose or rate recorded", "primary_resource": "MedicationAdministration", "primary_fields": ["dosage.dose", "dosage.rate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication administrations with dosage dose or rate recorded", "short_description": "MedAdmin dose or rate recorded", "primary_resource": "MedicationAdministration", "primary_fields": ["dosage.dose", "dosage.rate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication administrations with dosage dose or rate recorded", "short_description": "MedAdmin dose or rate recorded", "primary_resource": "MedicationAdministration", "primary_fields": ["dosage.dose", "dosage.rate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)"}}, "created_at": 1691506478.432352, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_dosage_dose_rate`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication administrations with dosage dose or rate recorded\",\n      \"short_description\": \"MedAdmin dose or rate recorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['dosage.dose', 'dosage.rate'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      M.id,\n       {{- metric_common_dimensions() }}\n      IF(dosage.dose IS NOT NULL OR dosage.rate IS NOT NULL, 1, 0) AS has_dosage_dose_rate\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_dose_rate)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_dosage_dose_rate.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_dosage_dose_rate' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_patient_undefined"], "alias": "medicationadministration_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "966ab862e0661136e84c1dfb415e304084e3eea9ba7503e701ce28cdfd1bcafa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that do not have a patient reference recorded", "short_description": "MedAdmin ref. Patient - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that do not have a patient reference recorded", "short_description": "MedAdmin ref. Patient - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that do not have a patient reference recorded", "short_description": "MedAdmin ref. Patient - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1691506478.438293, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that do not have a patient reference recorded\",\n      \"short_description\": \"MedAdmin ref. Patient - unrecorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationdispense_dosage_dose_rate": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationdispense_dosage_dose_rate", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationdispense_dosage_dose_rate.sql", "original_file_path": "models/metrics/data_quality/medicationdispense_dosage_dose_rate.sql", "unique_id": "model.fhir_dbt_analytics.medicationdispense_dosage_dose_rate", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationdispense_dosage_dose_rate"], "alias": "medicationdispense_dosage_dose_rate", "checksum": {"name": "sha256", "checksum": "a3df381eefa10afd651f381f9a2232ec6c9a6b314a7244de2dc3cc74f76e93bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication dispenses with dosage dose and rate recorded", "short_description": "MedDisp dose and rate recorded", "primary_resource": "MedicationDispense", "primary_fields": ["dosageInstruction.doseAndRate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationDispense.whenPrepared", "metric_date_description": "Date when the dispensed medication was packaged and reviewed"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication dispenses with dosage dose and rate recorded", "short_description": "MedDisp dose and rate recorded", "primary_resource": "MedicationDispense", "primary_fields": ["dosageInstruction.doseAndRate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationDispense.whenPrepared", "metric_date_description": "Date when the dispensed medication was packaged and reviewed"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication dispenses with dosage dose and rate recorded", "short_description": "MedDisp dose and rate recorded", "primary_resource": "MedicationDispense", "primary_fields": ["dosageInstruction.doseAndRate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationDispense.whenPrepared", "metric_date_description": "Date when the dispensed medication was packaged and reviewed"}}, "created_at": 1691506478.444772, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationdispense_dosage_dose_rate`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication dispenses with dosage dose and rate recorded\",\n      \"short_description\": \"MedDisp dose and rate recorded\",\n      \"primary_resource\": \"MedicationDispense\",\n      \"primary_fields\": ['dosageInstruction.doseAndRate'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"MedicationDispense.whenPrepared\",\n      \"metric_date_description\": \"Date when the dispensed medication was packaged and reviewed\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF({{ safe_offset(\"dosageInstruction\", 0) }}.doseAndRate IS NOT NULL, 1, 0) AS has_dosage_dose_rate\n    FROM {{ ref('MedicationDispense') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_dose_rate)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationDispense", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationdispense_dosage_dose_rate.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationDispense as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationdispense_dosage_dose_rate' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationDispense", "sql": " __dbt__cte__MedicationDispense as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_reference_medication_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_reference_medication_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_medication_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_medication_unresolved"], "alias": "medicationstatement_reference_medication_unresolved", "checksum": {"name": "sha256", "checksum": "5e6b9802091b55f7a9e3ce0ef426b6f2b9662e7d1c9a8d046ee0d85b91693739"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent medication", "short_description": "MedStat ref. Med - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent medication", "short_description": "MedStat ref. Med - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent medication", "short_description": "MedStat ref. Med - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1691506478.451185, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_reference_medication_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that reference a non-existent medication\",\n      \"short_description\": \"MedStat ref. Med - non-exist\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['medication.reference.medicationId'],\n      \"secondary_resources\": ['Medication'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value,\n      {{ reference_resolves('medication.reference', 'Medication') }} AS reference_resolves\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Medication", "package": null, "version": null}, {"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_medication_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_medication_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_with_type_text": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_with_type_text", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_with_type_text.sql", "original_file_path": "models/metrics/data_quality/composition_with_type_text.sql", "unique_id": "model.fhir_dbt_analytics.composition_with_type_text", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_with_type_text"], "alias": "composition_with_type_text", "checksum": {"name": "sha256", "checksum": "5d1a489caf19d354a0b40cc3b720251364c601f27741b0197e5f05d77d7cb089"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that contain a non-empty type.text", "short_description": "Comp with type.text", "primary_resource": "Composition", "primary_fields": ["type.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "date", "metric_date_description": "Composition date", "dimension_a": "composition_status", "dimension_a_description": "The composition status  (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that contain a non-empty type.text", "short_description": "Comp with type.text", "primary_resource": "Composition", "primary_fields": ["type.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "date", "metric_date_description": "Composition date", "dimension_a": "composition_status", "dimension_a_description": "The composition status  (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that contain a non-empty type.text", "short_description": "Comp with type.text", "primary_resource": "Composition", "primary_fields": ["type.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "date", "metric_date_description": "Composition date", "dimension_a": "composition_status", "dimension_a_description": "The composition status  (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506478.458233, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_with_type_text`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that contain a non-empty type.text\",\n      \"short_description\": \"Comp with type.text\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['type.text'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"date\",\n      \"metric_date_description\": \"Composition date\",\n      \"dimension_a\": \"composition_status\",\n      \"dimension_a_description\": \"The composition status  (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as composition_status,\n      {%- if column_exists('type.text') %}\n      type.text IS NOT NULL\n        AND type.text <> '' AS has_type_text\n      {%- else %}\n      FALSE AS has_type_text\n      {%- endif %},\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(CAST(has_type_text AS '~type_long()~'))',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_with_type_text.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_with_type_text' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "allergyintolerance_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/allergyintolerance_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_reference_patient_undefined"], "alias": "allergyintolerance_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "9eed3b983cc0b91641cc375b214c9b96a8d845dfd4407d94a46fb003d527c46a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of AllergyIntolerance resources that do not have a patient reference recorded", "short_description": "Allergy ref. Patient - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of AllergyIntolerance resources that do not have a patient reference recorded", "short_description": "Allergy ref. Patient - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of AllergyIntolerance resources that do not have a patient reference recorded", "short_description": "Allergy ref. Patient - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1691506478.465712, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`allergyintolerance_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of AllergyIntolerance resources that do not have a patient reference recorded\",\n      \"short_description\": \"Allergy ref. Patient - unrecorded\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['patient.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification') }} AS verification_status,\n      {{ has_reference_value('patient', 'Patient') }} AS has_reference_value\n    FROM {{ ref('AllergyIntolerance') }} AS A\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "AllergyIntolerance", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_practitioner_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_practitioner_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_practitioner_undefined"], "alias": "medicationrequest_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "6e9661c3386f45ce6740031e04210341429a368c95e0322bc58c35330dc9e5e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded", "short_description": "MedReq ref. Prac - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded", "short_description": "MedReq ref. Prac - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded", "short_description": "MedReq ref. Prac - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506478.473824, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_practitioner_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded\",\n      \"short_description\": \"MedReq ref. Prac - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('requester', 'Practitioner') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_practitioner_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_patient_unresolved"], "alias": "medicationstatement_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "19cf4709c9b59dd5da9992a4636a4b866d8779909b61565dd3f6da05a9ade975"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent patient", "short_description": "MedStat ref. Patient - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent patient", "short_description": "MedStat ref. Patient - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent patient", "short_description": "MedStat ref. Patient - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1691506478.4815848, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that reference a non-existent patient\",\n      \"short_description\": \"MedStat ref. Patient - non-exist\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.patient_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "patient_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/patient_count.sql", "original_file_path": "models/metrics/data_quality/patient_count.sql", "unique_id": "model.fhir_dbt_analytics.patient_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_count"], "alias": "patient_count", "checksum": {"name": "sha256", "checksum": "80245fdc6c60c04f52bc3e6e8c3b503ceb1110a387e822e3c092df3b8b33e699"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Patient resources", "short_description": "Patient resources", "primary_resource": "Patient", "primary_fields": ["id"], "secondary_resources": ["Encounter"], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of patient's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this patient's record is in active use", "dimension_b": "gender", "dimension_b_description": "The patient's gender (male, female, other, unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Patient resources", "short_description": "Patient resources", "primary_resource": "Patient", "primary_fields": ["id"], "secondary_resources": ["Encounter"], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of patient's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this patient's record is in active use", "dimension_b": "gender", "dimension_b_description": "The patient's gender (male, female, other, unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Patient resources", "short_description": "Patient resources", "primary_resource": "Patient", "primary_fields": ["id"], "secondary_resources": ["Encounter"], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of patient's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this patient's record is in active use", "dimension_b": "gender", "dimension_b_description": "The patient's gender (male, female, other, unknown)"}}, "created_at": 1691506478.48899, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`patient_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Patient resources\",\n      \"short_description\": \"Patient resources\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date of patient's earliest clinical encounter\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this patient's record is in active use\",\n      \"dimension_b\": \"gender\",\n      \"dimension_b_description\": \"The patient's gender (male, female, other, unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      P.id,\n      {{- metric_common_dimensions(table_alias='P', exclude_col='metric_date') }}\n      CAST({{ get_column_or_default('active') }} AS STRING) AS active,\n      gender,\n      MIN(E.metric_date) AS metric_date\n    FROM {{ ref('Patient') }} AS P\n    LEFT JOIN {{ ref('Encounter') }} AS E\n      ON P.id = E.subject.patientId\n      AND E.class.code NOT IN (\n        'OTHER',\n        'PRENC',\n        'LAB',\n        'UNKNOWN',\n        'HIST'\n      )\n    GROUP BY 1,2,3,4,5,6,7\n{%- endset -%}\n\n{{- calculate_metric(metric_sql) -}}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n),  __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_count.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_count.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_count"], "alias": "medicationadministration_count", "checksum": {"name": "sha256", "checksum": "f3fca7da5f0f656ce7f79bcd271d059cba230ed504889db1d487081d5661d2bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid MedicationAdministration resources", "short_description": "MedicationAdministration resources", "primary_resource": "MedicationAdministration", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationAdministration.effective.dateTime", "metric_date_description": "MedicationAdministration effective date", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid MedicationAdministration resources", "short_description": "MedicationAdministration resources", "primary_resource": "MedicationAdministration", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationAdministration.effective.dateTime", "metric_date_description": "MedicationAdministration effective date", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid MedicationAdministration resources", "short_description": "MedicationAdministration resources", "primary_resource": "MedicationAdministration", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationAdministration.effective.dateTime", "metric_date_description": "MedicationAdministration effective date", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1691506478.495483, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid MedicationAdministration resources\",\n      \"short_description\": \"MedicationAdministration resources\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"MedicationAdministration.effective.dateTime\",\n      \"metric_date_description\": \"MedicationAdministration effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('MedicationAdministration') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_reference_medicationrequest_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_reference_medicationrequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_medicationrequest_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_medicationrequest_unresolved"], "alias": "medicationadministration_reference_medicationrequest_unresolved", "checksum": {"name": "sha256", "checksum": "eb5b25b088884ade9902fb0444a0025795578d8df0cc92c55435d92be55f4882"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication request", "short_description": "MedAdmin ref. MedReq - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": ["MedicationRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication request", "short_description": "MedAdmin ref. MedReq - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": ["MedicationRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication request", "short_description": "MedAdmin ref. MedReq - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": ["MedicationRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1691506478.502254, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_reference_medicationrequest_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that reference a non-existent medication request\",\n      \"short_description\": \"MedAdmin ref. MedReq - non-exist\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": [\n          'context.encounterId', \n          'request.medicationRequestId'],\n      \"secondary_resources\": ['MedicationRequest'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('request', 'MedicationRequest') }} AS has_reference_value,\n      {{ reference_resolves('request', 'MedicationRequest') }} AS reference_resolves  \n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_medicationrequest_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_medicationrequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.practitioner_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "practitioner_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/practitioner_count.sql", "original_file_path": "models/metrics/data_quality/practitioner_count.sql", "unique_id": "model.fhir_dbt_analytics.practitioner_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "practitioner_count"], "alias": "practitioner_count", "checksum": {"name": "sha256", "checksum": "2fbb654d7522957415286a6071a436314245f7fae4d05c1df4f62b3e1e759cda"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Practitioner resources", "short_description": "Practitioner resources", "primary_resource": "Practitioner", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner's record is in active use"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Practitioner resources", "short_description": "Practitioner resources", "primary_resource": "Practitioner", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner's record is in active use"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Practitioner resources", "short_description": "Practitioner resources", "primary_resource": "Practitioner", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner's record is in active use"}}, "created_at": 1691506478.509653, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`practitioner_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Practitioner resources\",\n      \"short_description\": \"Practitioner resources\",\n      \"primary_resource\": \"Practitioner\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this practitioner's record is in active use\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST(active AS STRING) AS active\n    FROM {{ ref('Practitioner') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Practitioner", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/practitioner_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Practitioner as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'practitioner_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Practitioner", "sql": " __dbt__cte__Practitioner as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_with_attachment": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_with_attachment", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_with_attachment.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_with_attachment.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_with_attachment", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_with_attachment"], "alias": "diagnosticreport_with_attachment", "checksum": {"name": "sha256", "checksum": "e94c3bd47c5c46568ae81a35149837c40cd2fdf94902e8446aad2b2abd613f0c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that contain inlined attachment", "short_description": "DR with inlined attachment", "primary_resource": "DiagnosticReport", "primary_fields": ["presentedForm.data"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "issued", "metric_date_description": "DiagnosticReport issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that contain inlined attachment", "short_description": "DR with inlined attachment", "primary_resource": "DiagnosticReport", "primary_fields": ["presentedForm.data"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "issued", "metric_date_description": "DiagnosticReport issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that contain inlined attachment", "short_description": "DR with inlined attachment", "primary_resource": "DiagnosticReport", "primary_fields": ["presentedForm.data"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "issued", "metric_date_description": "DiagnosticReport issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506478.515373, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_with_attachment`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that contain inlined attachment\",\n      \"short_description\": \"DR with inlined attachment\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['presentedForm.data'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"issued\",\n      \"metric_date_description\": \"DiagnosticReport issued date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The report status  (preliminary | final | amended | entered-in-error +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as status,\n      COALESCE({{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }},\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct,',\n        index = get_source_specific_category_index()\n      ) }},\n       {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/v2-0074,',\n        index = get_source_specific_category_index()\n      ) }},\n       {{ code_from_codeableconcept(\n        'category',\n        'http://loinc.org,',\n        index = get_source_specific_category_index()\n      ) }}, 'Undefined')\n       AS category,\n      {{ safe_offset(\"presentedForm\", 0) }}.data IS NOT NULL AS has_inlined_attachment\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(CAST(has_inlined_attachment AS '~type_long()~'))',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_with_attachment.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_with_attachment' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_dosage_instruction": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_dosage_instruction", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_dosage_instruction.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_dosage_instruction.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_dosage_instruction", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_dosage_instruction"], "alias": "medicationrequest_dosage_instruction", "checksum": {"name": "sha256", "checksum": "ff2618ef1abc0bfc3e671f9f6ae5cac51d2989cc60154ee31184cc80775c0db6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication requests with dosage instruction text recorded", "short_description": "MedReq instruction recorded", "primary_resource": "MedicationRequest", "primary_fields": ["dosageInstruction.patientInstruction", "dosageInstruction.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication requests with dosage instruction text recorded", "short_description": "MedReq instruction recorded", "primary_resource": "MedicationRequest", "primary_fields": ["dosageInstruction.patientInstruction", "dosageInstruction.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication requests with dosage instruction text recorded", "short_description": "MedReq instruction recorded", "primary_resource": "MedicationRequest", "primary_fields": ["dosageInstruction.patientInstruction", "dosageInstruction.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date"}}, "created_at": 1691506478.5261838, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_dosage_instruction`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication requests with dosage instruction text recorded\",\n      \"short_description\": \"MedReq instruction recorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['dosageInstruction.patientInstruction', 'dosageInstruction.text'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF(\n        NULLIF({{ safe_offset(\"dosageInstruction\", 0) }}.patientInstruction, '') IS NOT NULL\n          OR NULLIF({{ safe_offset(\"dosageInstruction\", 0) }}.text, '') IS NOT NULL,\n        1,\n        0) AS has_dosage_text\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_text)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_dosage_instruction.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_dosage_instruction' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_patients_with_observation_daily": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_patients_with_observation_daily", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_patients_with_observation_daily.sql", "original_file_path": "models/metrics/data_quality/active_patients_with_observation_daily.sql", "unique_id": "model.fhir_dbt_analytics.active_patients_with_observation_daily", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_patients_with_observation_daily"], "alias": "active_patients_with_observation_daily", "checksum": {"name": "sha256", "checksum": "bd13c7af01e81ef81c1ad7f8e73e5caa085bd18a64b9cc2688141596eb156d91"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of active patients with at least one observation that day", "short_description": "Patients with Obs", "primary_resource": "Observation", "primary_fields": ["subject.patientId", "encounter.encounterId", "effective.dateTime"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of active patients with at least one observation that day", "short_description": "Patients with Obs", "primary_resource": "Observation", "primary_fields": ["subject.patientId", "encounter.encounterId", "effective.dateTime"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of active patients with at least one observation that day", "short_description": "Patients with Obs", "primary_resource": "Observation", "primary_fields": ["subject.patientId", "encounter.encounterId", "effective.dateTime"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}}, "created_at": 1691506478.5330582, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_patients_with_observation_daily`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of active patients with at least one observation that day\",\n      \"short_description\": \"Patients with Obs\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['subject.patientId', 'encounter.encounterId', 'effective.dateTime'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Active patients with resource\",\n      \"dimension_a\": \"encounter_class_group\",\n      \"dimension_a_description\": \"The latest class of the encounter grouped into ambulatory or non-ambulatory\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      ActiveEncounters.*,\n      O.subject.patientId AS observation_patientid\n    FROM ({{ active_encounters() }}) AS ActiveEncounters\n    LEFT JOIN {{ ref('Observation') }} AS O\n      ON ActiveEncounters.id = O.encounter.encounterId\n      AND ActiveEncounters.metric_date = O.metric_date\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT observation_patientid)',\n    denominator = 'COUNT(DISTINCT patientId)'\n) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_patients_with_observation_daily.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_patients_with_observation_daily' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_count.sql", "original_file_path": "models/metrics/data_quality/composition_count.sql", "unique_id": "model.fhir_dbt_analytics.composition_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_count"], "alias": "composition_count", "checksum": {"name": "sha256", "checksum": "b322026cc0e0cfc0ecd0048685f7b00ea4d99915db0018d90b7e9c4dd7cda13d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Composition resources", "short_description": "Composition resources", "primary_resource": "Composition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Composition resources", "short_description": "Composition resources", "primary_resource": "Composition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Composition resources", "short_description": "Composition resources", "primary_resource": "Composition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506478.5430532, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Composition resources\",\n      \"short_description\": \"Composition resources\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('Composition') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_medication_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_medication_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_medication_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_medication_unresolved"], "alias": "medicationrequest_reference_medication_unresolved", "checksum": {"name": "sha256", "checksum": "e39c4d64b9bac3f44455dcc3c0b650e5c611c0ff24e5b0cef8ba309f2e222f2f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent medication", "short_description": "MedReq ref. Med - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent medication", "short_description": "MedReq ref. Med - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent medication", "short_description": "MedReq ref. Med - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506478.5498, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_medication_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent medication\",\n      \"short_description\": \"MedReq ref. Med - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": [\n          'requester.practitionerId', \n          'medication.reference.medicationId'],\n      \"secondary_resources\": ['Medication'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value,\n      {{ reference_resolves('medication.reference', 'Medication') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Medication", "package": null, "version": null}, {"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_medication_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_medication_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_encounter_unresolved"], "alias": "medicationadministration_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "92653d42a41bf3d5842d5b4f89637250686f0399a36d9ac6e7b719842287a31c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent encounter", "short_description": "MedAdmin ref. Enc - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent encounter", "short_description": "MedAdmin ref. Enc - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent encounter", "short_description": "MedAdmin ref. Enc - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1691506478.559181, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that reference a non-existent encounter\",\n      \"short_description\": \"MedAdmin ref. Enc - non-exist\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['context.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('context', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('context', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_practitioner_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_practitioner_undefined.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_practitioner_undefined"], "alias": "diagnosticreport_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "e86cfb8b90c54274dc484e337eb221b49d87719bbe49aaf0f1a9a94f1a5791f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have a practitioner reference recorded", "short_description": "DiagRep ref. Prac - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have a practitioner reference recorded", "short_description": "DiagRep ref. Prac - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have a practitioner reference recorded", "short_description": "DiagRep ref. Prac - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506478.5664809, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_practitioner_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"DiagRep ref. Prac - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['performer.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('performer', 'Practitioner') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_practitioner_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "servicerequest_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/servicerequest_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_encounter_undefined"], "alias": "servicerequest_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "b7de93ec3d76b517ac3733fe8d31178ab5167b617ec004f8ce477478f881a802"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that do not have an encounter reference recorded", "short_description": "SerReq ref. Enc - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that do not have an encounter reference recorded", "short_description": "SerReq ref. Enc - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that do not have an encounter reference recorded", "short_description": "SerReq ref. Enc - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1691506478.575451, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`servicerequest_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that do not have an encounter reference recorded\",\n      \"short_description\": \"SerReq ref. Enc - unrecorded\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_reference_medication_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_reference_medication_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_medication_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_medication_undefined"], "alias": "medicationstatement_reference_medication_undefined", "checksum": {"name": "sha256", "checksum": "7e984f42e16a55ad6df871d07601bbd2ef2b38d38bea8566e328c126e01f11bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that do not have an medication reference recorded", "short_description": "MedStat ref. Med - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that do not have an medication reference recorded", "short_description": "MedStat ref. Med - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that do not have an medication reference recorded", "short_description": "MedStat ref. Med - unrecorded", "primary_resource": "MedicationStatement", "primary_fields": ["medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1691506478.583235, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_reference_medication_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that do not have an medication reference recorded\",\n      \"short_description\": \"MedStat ref. Med - unrecorded\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['medication.reference.medicationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_medication_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_medication_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_servicerequest_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_servicerequest_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_servicerequest_undefined.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_servicerequest_undefined"], "alias": "diagnosticreport_reference_servicerequest_undefined", "checksum": {"name": "sha256", "checksum": "17f94afdc62103087cb1da611c1e2cfa56384e4bf3431dd4d404a2180b268146"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have a service request reference recorded", "short_description": "DiagRep ref. SerReq - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have a service request reference recorded", "short_description": "DiagRep ref. SerReq - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have a service request reference recorded", "short_description": "DiagRep ref. SerReq - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506478.5901399, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_servicerequest_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have a service request reference recorded\",\n      \"short_description\": \"DiagRep ref. SerReq - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['basedOn.serviceRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_servicerequest_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_servicerequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.documentreference_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "documentreference_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/documentreference_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/documentreference_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.documentreference_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "documentreference_reference_patient_undefined"], "alias": "documentreference_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "ff52105dde8b7874f1df6328c1da2bcc2f965878c5a531172d341e76d1b9f4a2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DocumentReference resources that do not have a patient reference recorded", "short_description": "DocRef ref. Patient - unrecorded", "primary_resource": "DocumentReference", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DocumentReference resources that do not have a patient reference recorded", "short_description": "DocRef ref. Patient - unrecorded", "primary_resource": "DocumentReference", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DocumentReference resources that do not have a patient reference recorded", "short_description": "DocRef ref. Patient - unrecorded", "primary_resource": "DocumentReference", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}}, "created_at": 1691506478.59769, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`documentreference_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DocumentReference resources that do not have a patient reference recorded\",\n      \"short_description\": \"DocRef ref. Patient - unrecorded\",\n      \"primary_resource\": \"DocumentReference\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DocumentReference.date\",\n      \"metric_date_description\": \"Document reference date\",\n      \"dimension_a\": \"document_status\",\n      \"dimension_a_description\": \"The document reference status  (current | superseded | entered-in-error)\",\n      \"dimension_b\": \"format\",\n      \"dimension_b_description\": \"The format of the document referenced (scanned | NULL)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as document_status,\n      {%- if column_exists('content.format.code') %}\n      {{ safe_offset(\"content\", 0) }}.format.code AS format\n      {%- else %}\n      NULL AS format\n      {%- endif %},\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('DocumentReference') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DocumentReference", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/documentreference_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'documentreference_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.procedure_with_code_text": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "procedure_with_code_text", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/procedure_with_code_text.sql", "original_file_path": "models/metrics/data_quality/procedure_with_code_text.sql", "unique_id": "model.fhir_dbt_analytics.procedure_with_code_text", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_with_code_text"], "alias": "procedure_with_code_text", "checksum": {"name": "sha256", "checksum": "9ff42ab961f7149fb420926f9d324081df382dc095c7536e05d7a49dc1521c0f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Procedure resources that contain a non-empty code.text", "short_description": "Procedure with code.text", "primary_resource": "Procedure", "primary_fields": ["code.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(performed.period.start, performed.dateTime)", "metric_date_description": "Procedure performed datetime", "dimension_a": "status", "dimension_a_description": "The procedure status bound to http://hl7.org/fhir/event-status"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Procedure resources that contain a non-empty code.text", "short_description": "Procedure with code.text", "primary_resource": "Procedure", "primary_fields": ["code.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(performed.period.start, performed.dateTime)", "metric_date_description": "Procedure performed datetime", "dimension_a": "status", "dimension_a_description": "The procedure status bound to http://hl7.org/fhir/event-status"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Procedure resources that contain a non-empty code.text", "short_description": "Procedure with code.text", "primary_resource": "Procedure", "primary_fields": ["code.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(performed.period.start, performed.dateTime)", "metric_date_description": "Procedure performed datetime", "dimension_a": "status", "dimension_a_description": "The procedure status bound to http://hl7.org/fhir/event-status"}}, "created_at": 1691506478.6050198, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`procedure_with_code_text`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Procedure resources that contain a non-empty code.text\",\n      \"short_description\": \"Procedure with code.text\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['code.text'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"COALESCE(performed.period.start, performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed datetime\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The procedure status bound to http://hl7.org/fhir/event-status\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_value('P.code.text') }} AS has_code_text\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(CAST(has_code_text AS '~type_long()~'))',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Procedure", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_value", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_with_code_text.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_with_code_text' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "careteam_reference_practitioner_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/careteam_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_practitioner_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_practitioner_unresolved"], "alias": "careteam_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "d4768da281857156a7c0c8c181e72a91ece7be909a80c04ab72038b9fc8404e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that reference a non-existent practitioner", "short_description": "CareTeam ref. Prac - non-exist", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that reference a non-existent practitioner", "short_description": "CareTeam ref. Prac - non-exist", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that reference a non-existent practitioner", "short_description": "CareTeam ref. Prac - non-exist", "primary_resource": "CareTeam", "primary_fields": ["participant.member.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1691506478.6126988, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`careteam_reference_practitioner_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that reference a non-existent practitioner\",\n      \"short_description\": \"CareTeam ref. Prac - non-exist\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['participant.member.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"C.participant\", \"CP\")) }}\n        WHERE CP.member.practitionerId IS NOT NULL\n        AND CP.member.practitionerId <> ''\n      ) AS has_reference_value,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"C.participant\", \"CP\")) }}\n        JOIN {{ ref('Practitioner') }} AS P\n          ON CP.member.practitionerId = P.id\n      ) AS reference_resolves\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Practitioner", "package": null, "version": null}, {"name": "CareTeam", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_practitioner_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Practitioner as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\n),  __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Practitioner", "sql": " __dbt__cte__Practitioner as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\n)"}, {"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.location_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "location_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/location_count.sql", "original_file_path": "models/metrics/data_quality/location_count.sql", "unique_id": "model.fhir_dbt_analytics.location_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "location_count"], "alias": "location_count", "checksum": {"name": "sha256", "checksum": "12466c4e4263cca82c3c1716ab40d6187b704a88790bb3ad9d1a37c818666d05"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Location resources", "short_description": "Location resources", "primary_resource": "Location", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the location (active | suspended | inactive)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Location resources", "short_description": "Location resources", "primary_resource": "Location", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the location (active | suspended | inactive)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Location resources", "short_description": "Location resources", "primary_resource": "Location", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the location (active | suspended | inactive)"}}, "created_at": 1691506478.6200252, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`location_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Location resources\",\n      \"short_description\": \"Location resources\",\n      \"primary_resource\": \"Location\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the location (active | suspended | inactive)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status\n    FROM {{ ref('Location') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Location", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/location_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Location as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'location_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Location", "sql": " __dbt__cte__Location as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.condition_with_code_text": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "condition_with_code_text", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/condition_with_code_text.sql", "original_file_path": "models/metrics/data_quality/condition_with_code_text.sql", "unique_id": "model.fhir_dbt_analytics.condition_with_code_text", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_with_code_text"], "alias": "condition_with_code_text", "checksum": {"name": "sha256", "checksum": "2204db3b2479eceebf72e65dde69987a1cdc50f29fe10cd7620e14a7cbe43572"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Condition resources that contain a non-empty code.text", "short_description": "Condition with code.text", "primary_resource": "Condition", "primary_fields": ["code.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The condition status bound to http://terminology.hl7.org/CodeSystem/condition-clinical", "dimension_b": "verification_status", "dimension_b_description": "The condition verification status bound to http://terminology.hl7.org/CodeSystem/condition-ver-status"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Condition resources that contain a non-empty code.text", "short_description": "Condition with code.text", "primary_resource": "Condition", "primary_fields": ["code.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The condition status bound to http://terminology.hl7.org/CodeSystem/condition-clinical", "dimension_b": "verification_status", "dimension_b_description": "The condition verification status bound to http://terminology.hl7.org/CodeSystem/condition-ver-status"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Condition resources that contain a non-empty code.text", "short_description": "Condition with code.text", "primary_resource": "Condition", "primary_fields": ["code.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The condition status bound to http://terminology.hl7.org/CodeSystem/condition-clinical", "dimension_b": "verification_status", "dimension_b_description": "The condition verification status bound to http://terminology.hl7.org/CodeSystem/condition-ver-status"}}, "created_at": 1691506478.625994, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`condition_with_code_text`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Condition resources that contain a non-empty code.text\",\n      \"short_description\": \"Condition with code.text\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['code.text'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The condition status bound to http://terminology.hl7.org/CodeSystem/condition-clinical\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The condition verification status bound to http://terminology.hl7.org/CodeSystem/condition-ver-status\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ has_value('C.code.text') }} AS has_code_text\n    FROM {{ ref('Condition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(CAST(has_code_text AS '~type_long()~'))',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Condition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_value", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_with_code_text.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_with_code_text' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_practitioner_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_practitioner_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_practitioner_unresolved"], "alias": "diagnosticreport_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "908d50870da38b4587e8bc93e89987ab6654124796c2a84b12ea89bf2e91a5de"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent practitioner", "short_description": "DiagRep ref. Prac - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent practitioner", "short_description": "DiagRep ref. Prac - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent practitioner", "short_description": "DiagRep ref. Prac - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["performer.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506478.6340868, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_practitioner_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent practitioner\",\n      \"short_description\": \"DiagRep ref. Prac - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['performer.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('performer', 'Practitioner') }} AS has_reference_value,\n      {{ reference_resolves('performer', 'Practitioner') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Practitioner", "package": null, "version": null}, {"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_practitioner_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "careteam_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/careteam_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_encounter_unresolved"], "alias": "careteam_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "4df8ad3b454261ec1aa44f6bd809dd68abbc47de913cb22208567c6636122fc7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that reference a non-existent encounter", "short_description": "CareTeam ref. Enc - non-exist", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that reference a non-existent encounter", "short_description": "CareTeam ref. Enc - non-exist", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that reference a non-existent encounter", "short_description": "CareTeam ref. Enc - non-exist", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1691506478.642334, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`careteam_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that reference a non-existent encounter\",\n      \"short_description\": \"CareTeam ref. Enc - non-exist\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      C.id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "CareTeam", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_encounter_undefined"], "alias": "diagnosticreport_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "c319fc8d9c80e7d1f9613aa6ea702e8d99f8caf2f919287bf8c1338fdf4e4485"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have an encounter reference recorded", "short_description": "DiagRep ref. Enc - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have an encounter reference recorded", "short_description": "DiagRep ref. Enc - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have an encounter reference recorded", "short_description": "DiagRep ref. Enc - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506478.650912, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have an encounter reference recorded\",\n      \"short_description\": \"DiagRep ref. Enc - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/composition_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.composition_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_encounter_undefined"], "alias": "composition_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "b7af3b6d07cf5911e560f9564f572344ed31751c89d29f59317763ccbf0097bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that do not have an encounter reference recorded", "short_description": "Comp ref. Enc - unrecorded", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that do not have an encounter reference recorded", "short_description": "Comp ref. Enc - unrecorded", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that do not have an encounter reference recorded", "short_description": "Comp ref. Enc - unrecorded", "primary_resource": "Composition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506478.658565, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that do not have an encounter reference recorded\",\n      \"short_description\": \"Comp ref. Enc - unrecorded\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.procedure_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "procedure_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/procedure_count.sql", "original_file_path": "models/metrics/data_quality/procedure_count.sql", "unique_id": "model.fhir_dbt_analytics.procedure_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_count"], "alias": "procedure_count", "checksum": {"name": "sha256", "checksum": "085221ff4ca70f83d06b8cedfc65d3f2a7ea8939ae527e642b2ca1eafb153a4b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Procedure resources", "short_description": "Procedure resources", "primary_resource": "Procedure", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Procedure resources", "short_description": "Procedure resources", "primary_resource": "Procedure", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Procedure resources", "short_description": "Procedure resources", "primary_resource": "Procedure", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1691506478.6654232, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`procedure_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Procedure resources\",\n      \"short_description\": \"Procedure resources\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('Procedure') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Procedure", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.careteam_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "careteam_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/careteam_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.careteam_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_patient_unresolved"], "alias": "careteam_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "db4e68852cfe320d493405f0fc3862e2e38f7729924b2fa38e84cccb2fe7f911"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that reference a non-existent patient", "short_description": "CareTeam ref. Patient - non-exist", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that reference a non-existent patient", "short_description": "CareTeam ref. Patient - non-exist", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that reference a non-existent patient", "short_description": "CareTeam ref. Patient - non-exist", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1691506478.671263, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`careteam_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that reference a non-existent patient\",\n      \"short_description\": \"CareTeam ref. Patient - non-exist\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "CareTeam", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_patients_with_medicationrequest_daily": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_patients_with_medicationrequest_daily", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_patients_with_medicationrequest_daily.sql", "original_file_path": "models/metrics/data_quality/active_patients_with_medicationrequest_daily.sql", "unique_id": "model.fhir_dbt_analytics.active_patients_with_medicationrequest_daily", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_patients_with_medicationrequest_daily"], "alias": "active_patients_with_medicationrequest_daily", "checksum": {"name": "sha256", "checksum": "7768d1fc23af28b72adadcef61168c67bf3d0f6ffc2c4a08978fd0fdd69de650"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of active patients with at least one medication request that day", "short_description": "Patients with MedicationRequest", "primary_resource": "MedicationRequest", "primary_fields": ["subject.patientId", "encounter.encounterId", "authoredOn"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of active patients with at least one medication request that day", "short_description": "Patients with MedicationRequest", "primary_resource": "MedicationRequest", "primary_fields": ["subject.patientId", "encounter.encounterId", "authoredOn"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of active patients with at least one medication request that day", "short_description": "Patients with MedicationRequest", "primary_resource": "MedicationRequest", "primary_fields": ["subject.patientId", "encounter.encounterId", "authoredOn"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}}, "created_at": 1691506478.6785212, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_patients_with_medicationrequest_daily`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of active patients with at least one medication request that day\",\n      \"short_description\": \"Patients with MedicationRequest\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['subject.patientId', 'encounter.encounterId', 'authoredOn'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Active patients with resource\",\n      \"dimension_a\": \"encounter_class_group\",\n      \"dimension_a_description\": \"The latest class of the encounter grouped into ambulatory or non-ambulatory\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      ActiveEncounters.*,\n      M.subject.patientId AS medicationrequest_patientid\n    FROM ({{ active_encounters() }}) AS ActiveEncounters\n    LEFT JOIN {{ ref('MedicationRequest') }} AS M\n      ON ActiveEncounters.id = M.encounter.encounterId\n      AND ActiveEncounters.metric_date = M.metric_date\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT medicationrequest_patientid)',\n    denominator = 'COUNT(DISTINCT patientId)'\n) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_patients_with_medicationrequest_daily.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_patients_with_medicationrequest_daily' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.documentreference_reference_practitioner_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "documentreference_reference_practitioner_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/documentreference_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/documentreference_reference_practitioner_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.documentreference_reference_practitioner_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "documentreference_reference_practitioner_unresolved"], "alias": "documentreference_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "5d43dc176cc2b7ff31f01e54e332ac9d0265a274e44c94eadb393789bdced8fd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DocumentReference resources that reference a non-existent practitioner", "short_description": "DocRef ref. Prac - non-exist", "primary_resource": "DocumentReference", "primary_fields": ["author.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DocumentReference resources that reference a non-existent practitioner", "short_description": "DocRef ref. Prac - non-exist", "primary_resource": "DocumentReference", "primary_fields": ["author.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DocumentReference resources that reference a non-existent practitioner", "short_description": "DocRef ref. Prac - non-exist", "primary_resource": "DocumentReference", "primary_fields": ["author.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}}, "created_at": 1691506478.687781, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`documentreference_reference_practitioner_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DocumentReference resources that reference a non-existent practitioner\",\n      \"short_description\": \"DocRef ref. Prac - non-exist\",\n      \"primary_resource\": \"DocumentReference\",\n      \"primary_fields\": ['author.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DocumentReference.date\",\n      \"metric_date_description\": \"Document reference date\",\n      \"dimension_a\": \"document_status\",\n      \"dimension_a_description\": \"The document reference status  (current | superseded | entered-in-error)\",\n      \"dimension_b\": \"format\",\n      \"dimension_b_description\": \"The format of the document referenced (scanned | NULL)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as document_status,\n      {%- if column_exists('content.format.code') %}\n      {{ safe_offset(\"content\", 0) }}.format.code AS format\n      {%- else %}\n      NULL AS format\n      {%- endif %},\n      {{ has_reference_value('author', 'Practitioner') }} AS has_reference_value,\n      {{ reference_resolves('author', 'Practitioner') }} AS reference_resolves\n    FROM {{ ref('DocumentReference') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Practitioner", "package": null, "version": null}, {"name": "DocumentReference", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/documentreference_reference_practitioner_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'documentreference_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_patients_with_allergyintolerance": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_patients_with_allergyintolerance", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_patients_with_allergyintolerance.sql", "original_file_path": "models/metrics/data_quality/active_patients_with_allergyintolerance.sql", "unique_id": "model.fhir_dbt_analytics.active_patients_with_allergyintolerance", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_patients_with_allergyintolerance"], "alias": "active_patients_with_allergyintolerance", "checksum": {"name": "sha256", "checksum": "2ec95ea1381d690e48b1bbd5db5a6d1759826e8a2b9c045cfdd8844c6f476778"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of active patients with at least one allergy or intolerance recorded at any time", "short_description": "Patients with AllergyIntol", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of active patients with at least one allergy or intolerance recorded at any time", "short_description": "Patients with AllergyIntol", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of active patients with at least one allergy or intolerance recorded at any time", "short_description": "Patients with AllergyIntol", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}}, "created_at": 1691506478.6959722, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_patients_with_allergyintolerance`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of active patients with at least one allergy or intolerance recorded at any time\",\n      \"short_description\": \"Patients with AllergyIntol\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['patient.patientId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Active patients with resource\",\n      \"dimension_a\": \"encounter_class_group\",\n      \"dimension_a_description\": \"The latest class of the encounter grouped into ambulatory or non-ambulatory\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      ActiveEncounters.*,\n      AI.patient.patientId AS allergyintolerance_patientid\n    FROM ({{ active_encounters() }}) AS ActiveEncounters\n    LEFT JOIN {{ ref('AllergyIntolerance') }} AS AI\n      ON ActiveEncounters.patientId = AI.patient.patientId\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT allergyintolerance_patientid)',\n    denominator = 'COUNT(DISTINCT patientId)'\n) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "AllergyIntolerance", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_patients_with_allergyintolerance.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_patients_with_allergyintolerance' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_reference_binary_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_reference_binary_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_reference_binary_unresolved.sql", "original_file_path": "models/metrics/data_quality/composition_reference_binary_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.composition_reference_binary_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_binary_unresolved"], "alias": "composition_reference_binary_unresolved", "checksum": {"name": "sha256", "checksum": "3e747c6c9f1907010ad59bd679bd1e1c50f376a62d114c72e1ac014ce91c3ae2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that reference a non-existent binary resource", "short_description": "Comp ref. Binary - non-exist", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": ["Binary"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that reference a non-existent binary resource", "short_description": "Comp ref. Binary - non-exist", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": ["Binary"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that reference a non-existent binary resource", "short_description": "Comp ref. Binary - non-exist", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": ["Binary"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506478.703713, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_reference_binary_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that reference a non-existent binary resource\",\n      \"short_description\": \"Comp ref. Binary - non-exist\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['section.entry.binaryId'],\n      \"secondary_resources\": ['Binary'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest_multiple([\n          array_config(\"C.section\", \"CS\"),\n          array_config(\"CS.entry\", \"CSE\")])) }}\n        WHERE CSE.binaryid IS NOT NULL\n        AND CSE.binaryid <> ''\n      ) AS has_reference_value,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest_multiple([\n          array_config(\"C.section\", \"CS\"),\n          array_config(\"CS.entry\", \"CSE\")])) }}\n        JOIN {{ ref('Binary') }} AS B\n          ON CSE.binaryid = B.id\n      ) AS reference_resolves\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Binary", "package": null, "version": null}, {"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.array_config", "macro.fhir_dbt_analytics.unnest_multiple", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_binary_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Binary as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\n),  __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_binary_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Binary", "sql": " __dbt__cte__Binary as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\n)"}, {"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.encounter_reference_location_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "encounter_reference_location_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/encounter_reference_location_unresolved.sql", "original_file_path": "models/metrics/data_quality/encounter_reference_location_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.encounter_reference_location_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_reference_location_unresolved"], "alias": "encounter_reference_location_unresolved", "checksum": {"name": "sha256", "checksum": "54e63bfd0bd2230492996ffc4b95f4326067f5fac6f27c0e177366daf0779165"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Encounter resources that reference a non-existent location", "short_description": "Enc ref. Loc - non-exist", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Location"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Encounter resources that reference a non-existent location", "short_description": "Enc ref. Loc - non-exist", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Location"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Encounter resources that reference a non-existent location", "short_description": "Enc ref. Loc - non-exist", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "calculation": "PROPORTION", "category": "Referential integrity", "secondary_resources": ["Location"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1691506478.711949, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`encounter_reference_location_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Encounter resources that reference a non-existent location\",\n      \"short_description\": \"Enc ref. Loc - non-exist\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['location.location.locationId'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"secondary_resources\": ['Location'],\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"E.location\", \"EL\")) }}\n        WHERE EL.location.locationId IS NOT NULL\n        AND EL.location.locationId <> ''\n      ) AS has_reference_location,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"E.location\", \"EL\")) }}\n        JOIN {{ ref('Location') }} AS L\n          ON EL.location.locationId = L.id\n      ) AS reference_location_resolved\n    FROM {{ ref('Encounter') }} AS E\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_location - reference_location_resolved)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Location", "package": null, "version": null}, {"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_reference_location_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Location as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`\n),  __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_reference_location_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Location", "sql": " __dbt__cte__Location as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`\n)"}, {"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/composition_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.composition_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_patient_unresolved"], "alias": "composition_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "88f27aaccabab48322539f0d180fade7913cdf4a746476e7e3f3257e97f0227e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that reference a non-existent patient", "short_description": "Comp ref. Patient - non-exist", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that reference a non-existent patient", "short_description": "Comp ref. Patient - non-exist", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that reference a non-existent patient", "short_description": "Comp ref. Patient - non-exist", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506478.719095, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that reference a non-existent patient\",\n      \"short_description\": \"Comp ref. Patient - non-exist\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.procedure_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "procedure_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/procedure_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.procedure_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_patient_undefined"], "alias": "procedure_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "7f8327f897f53ad4d7962e14797ed188c9c858983881f34e9b0a4e35fbe35b8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that do not have a patient reference recorded", "short_description": "LDA Proc ref. Patient - unrecorded", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that do not have a patient reference recorded", "short_description": "LDA Proc ref. Patient - unrecorded", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that do not have a patient reference recorded", "short_description": "LDA Proc ref. Patient - unrecorded", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1691506478.7271218, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`procedure_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that do not have a patient reference recorded\",\n      \"short_description\": \"LDA Proc ref. Patient - unrecorded\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Procedure", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "servicerequest_reference_servicerequest_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/servicerequest_reference_servicerequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_servicerequest_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_servicerequest_unresolved"], "alias": "servicerequest_reference_servicerequest_unresolved", "checksum": {"name": "sha256", "checksum": "c32ea27ce413995eec47fcc5f9b1ac4564fb11de06c2d9a610b2b5d0da5a4fb2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent service request", "short_description": "SerReq ref. SerReq - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent service request", "short_description": "SerReq ref. SerReq - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent service request", "short_description": "SerReq ref. SerReq - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1691506478.73399, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`servicerequest_reference_servicerequest_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that reference a non-existent service request\",\n      \"short_description\": \"SerReq ref. SerReq - non-exist\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value,\n      {{ reference_resolves('basedOn', 'ServiceRequest') }} AS reference_resolves\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "ServiceRequest", "package": null, "version": null}, {"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_servicerequest_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_servicerequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "allergyintolerance_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/allergyintolerance_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_reference_encounter_unresolved"], "alias": "allergyintolerance_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "3dc23ceebde471e09d8881294ff38a4ee795a9bbef97fbc6c5165ae3b87167bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent encounter", "short_description": "Allergy ref. Enc - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent encounter", "short_description": "Allergy ref. Enc - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent encounter", "short_description": "Allergy ref. Enc - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1691506478.742147, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`allergyintolerance_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of AllergyIntolerance resources that reference a non-existent encounter\",\n      \"short_description\": \"Allergy ref. Enc - non-exist\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' ) }} AS verification_status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('AllergyIntolerance') }} AS A\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "AllergyIntolerance", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.patient_inactive": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "patient_inactive", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/patient_inactive.sql", "original_file_path": "models/metrics/data_quality/patient_inactive.sql", "unique_id": "model.fhir_dbt_analytics.patient_inactive", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_inactive"], "alias": "patient_inactive", "checksum": {"name": "sha256", "checksum": "2e5810142653172871620c247879f3782d5e0f1fe28c64a58ed549979354705a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of patients that are inactive", "short_description": "Inactive patients", "primary_resource": "Patient", "primary_fields": ["active"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data distribution"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of patients that are inactive", "short_description": "Inactive patients", "primary_resource": "Patient", "primary_fields": ["active"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data distribution"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of patients that are inactive", "short_description": "Inactive patients", "primary_resource": "Patient", "primary_fields": ["active"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data distribution"}}, "created_at": 1691506478.7509592, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`patient_inactive`", "raw_code": "{{ config(\n    meta = {\n      \"description\": \"Proportion of patients that are inactive\",\n      \"short_description\": \"Inactive patients\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['active'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data distribution\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CASE WHEN P.active = False THEN 1 ELSE 0 END AS patient_inactive\n    FROM {{ ref('Patient') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(patient_inactive)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_inactive.sql", "compiled": true, "compiled_code": "\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n), A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      CASE WHEN P.active = False THEN 1 ELSE 0 END AS patient_inactive\n    FROM __dbt__cte__Patient AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_inactive' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(patient_inactive) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(IF((COUNT(id)) != 0, (SUM(patient_inactive)) / (COUNT(id)), NULL) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_patients_with_diagnosticreport_daily": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_patients_with_diagnosticreport_daily", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_patients_with_diagnosticreport_daily.sql", "original_file_path": "models/metrics/data_quality/active_patients_with_diagnosticreport_daily.sql", "unique_id": "model.fhir_dbt_analytics.active_patients_with_diagnosticreport_daily", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_patients_with_diagnosticreport_daily"], "alias": "active_patients_with_diagnosticreport_daily", "checksum": {"name": "sha256", "checksum": "4e9153a302b52a918c3e8930fdbd73b8f174b72692384d04819d8a359f466b11"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of active patients with at least one diagnostic report that day", "short_description": "Patients with DiagnosticReport", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId", "encounter.encounterId", "issued"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of active patients with at least one diagnostic report that day", "short_description": "Patients with DiagnosticReport", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId", "encounter.encounterId", "issued"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of active patients with at least one diagnostic report that day", "short_description": "Patients with DiagnosticReport", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId", "encounter.encounterId", "issued"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}}, "created_at": 1691506478.756695, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_patients_with_diagnosticreport_daily`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of active patients with at least one diagnostic report that day\",\n      \"short_description\": \"Patients with DiagnosticReport\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['subject.patientId', 'encounter.encounterId', 'issued'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Active patients with resource\",\n      \"dimension_a\": \"encounter_class_group\",\n      \"dimension_a_description\": \"The latest class of the encounter grouped into ambulatory or non-ambulatory\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      ActiveEncounters.*,\n      D.subject.patientId AS diagnosticreport_patientid\n    FROM ({{ active_encounters() }}) AS ActiveEncounters\n    LEFT JOIN {{ ref('DiagnosticReport') }} AS D\n      ON ActiveEncounters.id = D.encounter.encounterId\n      AND ActiveEncounters.metric_date = D.metric_date\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT diagnosticreport_patientid)',\n    denominator = 'COUNT(DISTINCT patientId)'\n) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_patients_with_diagnosticreport_daily.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_patients_with_diagnosticreport_daily' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_dosage_instruction": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_dosage_instruction", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_dosage_instruction.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_dosage_instruction.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_dosage_instruction", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_dosage_instruction"], "alias": "medicationadministration_dosage_instruction", "checksum": {"name": "sha256", "checksum": "c16dab8cd96e24fa7587575bc469d1354e15f5e76678c2a2a2343692cd948a41"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication administrations with dosage instruction text recorded", "short_description": "MedAdmin instruction recorded", "primary_resource": "MedicationAdministration", "primary_fields": ["dosage.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication administrations with dosage instruction text recorded", "short_description": "MedAdmin instruction recorded", "primary_resource": "MedicationAdministration", "primary_fields": ["dosage.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication administrations with dosage instruction text recorded", "short_description": "MedAdmin instruction recorded", "primary_resource": "MedicationAdministration", "primary_fields": ["dosage.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)"}}, "created_at": 1691506478.765706, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_dosage_instruction`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication administrations with dosage instruction text recorded\",\n      \"short_description\": \"MedAdmin instruction recorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['dosage.text'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF(dosage.text IS NOT NULL AND dosage.text <> '', 1, 0) AS has_dosage_text\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_text)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_dosage_instruction.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_dosage_instruction' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.organization_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "organization_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/organization_count.sql", "original_file_path": "models/metrics/data_quality/organization_count.sql", "unique_id": "model.fhir_dbt_analytics.organization_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "organization_count"], "alias": "organization_count", "checksum": {"name": "sha256", "checksum": "bdcf85da0488443e9604aaf04cd1c4464dae7f922befb1450ebfd3585b00446c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Organization resources", "short_description": "Organization resources", "primary_resource": "Organization", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this organization is active"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Organization resources", "short_description": "Organization resources", "primary_resource": "Organization", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this organization is active"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Organization resources", "short_description": "Organization resources", "primary_resource": "Organization", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this organization is active"}}, "created_at": 1691506478.771646, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`organization_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Organization resources\",\n      \"short_description\": \"Organization resources\",\n      \"primary_resource\": \"Organization\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this organization is active\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST(active AS STRING) AS active\n    FROM {{ ref('Organization') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Organization", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Organization", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/organization_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Organization as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Organization_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Organization_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'organization_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Organization", "sql": " __dbt__cte__Organization as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Organization_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Organization_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_encounters_daily": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_encounters_daily", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_encounters_daily.sql", "original_file_path": "models/metrics/data_quality/active_encounters_daily.sql", "unique_id": "model.fhir_dbt_analytics.active_encounters_daily", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_encounters_daily"], "alias": "active_encounters_daily", "checksum": {"name": "sha256", "checksum": "8717ed365304a8b07ff3ca9f9dda7902287464485575d65115df3c510ac6f2de"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of inpatient encounters that are active at any time during each day", "short_description": "Active encounters", "primary_resource": "Encounter", "primary_fields": ["period.start", "period.end"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "dimension_a": "encounter_class", "dimension_a_description": "The latest class of the encounter", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of inpatient encounters that are active at any time during each day", "short_description": "Active encounters", "primary_resource": "Encounter", "primary_fields": ["period.start", "period.end"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "dimension_a": "encounter_class", "dimension_a_description": "The latest class of the encounter", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of inpatient encounters that are active at any time during each day", "short_description": "Active encounters", "primary_resource": "Encounter", "primary_fields": ["period.start", "period.end"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "dimension_a": "encounter_class", "dimension_a_description": "The latest class of the encounter", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}}, "created_at": 1691506478.777409, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_encounters_daily`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of inpatient encounters that are active at any time during each day\",\n      \"short_description\": \"Active encounters\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['period.start', 'period.end'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Encounter daily\",\n      \"dimension_a\": \"encounter_class\",\n      \"dimension_a_description\": \"The latest class of the encounter\",\n      \"dimension_b\": \"encounter_service_provider\",\n      \"dimension_b_description\": \"The organization responsible for providing the services for this encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    {{ active_encounters() }}\n{%- endset -%}\n\n{{- calculate_metric(metric_sql) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_encounters_daily.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_encounters_daily' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.patient_missing_encounter": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "patient_missing_encounter", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/patient_missing_encounter.sql", "original_file_path": "models/metrics/data_quality/patient_missing_encounter.sql", "unique_id": "model.fhir_dbt_analytics.patient_missing_encounter", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_missing_encounter"], "alias": "patient_missing_encounter", "checksum": {"name": "sha256", "checksum": "b140f5f605917cad9a4df8bcbcc9f5e7c7739759997ce077599f1be4f5a67b36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of patients that do not have an encounter", "short_description": "Patients missing encounters", "primary_resource": "Patient", "primary_fields": ["active"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of patients that do not have an encounter", "short_description": "Patients missing encounters", "primary_resource": "Patient", "primary_fields": ["active"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of patients that do not have an encounter", "short_description": "Patients missing encounters", "primary_resource": "Patient", "primary_fields": ["active"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}}, "created_at": 1691506478.7854102, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`patient_missing_encounter`", "raw_code": "{{ config(\n    meta = {\n      \"description\": \"Proportion of patients that do not have an encounter\",\n      \"short_description\": \"Patients missing encounters\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['active'],\n      \"secondary_resources\": [\"Encounter\"],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"The patient active status  (true | false)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      P.id,\n      {{- metric_common_dimensions(table_alias='P', exclude_col='metric_date') }}\n      CAST(NULL AS DATE) AS metric_date,\n      CAST( {{ get_column_or_default('P.active') }} AS STRING) AS active,\n      SIGN(SUM(CASE WHEN E.id IS NULL THEN 0 ELSE 1 END)) AS patient_missing_encounter\n    FROM {{ ref('Patient') }} AS P\n    LEFT JOIN {{ ref('Encounter') }} AS E\n      ON E.subject.patientid=P.id\n      AND UPPER(E.status) NOT IN ('ENTERED-IN-ERROR')\n      AND UPPER(class.code) IN ('IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER', 'IMPPS', 'IMPRE','AMB')\n      GROUP BY 1, 2, 3, 4, 5, 6, 7\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(patient_missing_encounter)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_missing_encounter.sql", "compiled": true, "compiled_code": "\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n),  __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_missing_encounter' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_with_binary_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_with_binary_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_with_binary_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_with_binary_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_with_binary_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_with_binary_unresolved"], "alias": "diagnosticreport_with_binary_unresolved", "checksum": {"name": "sha256", "checksum": "1f1511e3fbff75cdfb204dd9a3012608e02d13c034b55e0fcd76a439199e29a5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that contain a binary reference that resolves", "short_description": "DR with binary content", "primary_resource": "DiagnosticReport", "primary_fields": ["presentedForm.url"], "secondary_resources": ["Binary"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "issued", "metric_date_description": "DiagnosticReport issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that contain a binary reference that resolves", "short_description": "DR with binary content", "primary_resource": "DiagnosticReport", "primary_fields": ["presentedForm.url"], "secondary_resources": ["Binary"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "issued", "metric_date_description": "DiagnosticReport issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that contain a binary reference that resolves", "short_description": "DR with binary content", "primary_resource": "DiagnosticReport", "primary_fields": ["presentedForm.url"], "secondary_resources": ["Binary"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "issued", "metric_date_description": "DiagnosticReport issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506478.7917922, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_with_binary_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that contain a binary reference that resolves\",\n      \"short_description\": \"DR with binary content\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['presentedForm.url'],\n      \"secondary_resources\": ['Binary'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"issued\",\n      \"metric_date_description\": \"DiagnosticReport issued date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The report status  (preliminary | final | amended | entered-in-error +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as status,\n      COALESCE({{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }},\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct,',\n        index = get_source_specific_category_index()\n      ) }},\n       {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/v2-0074,',\n        index = get_source_specific_category_index()\n      ) }},\n       {{ code_from_codeableconcept(\n        'category',\n        'http://loinc.org,',\n        index = get_source_specific_category_index()\n      ) }}, 'Undefined')\n       AS category,\n      {%- if column_exists('presentedForm.url') %}\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ ref('Binary') }} AS B\n        WHERE\n          SPLIT(D.{{ safe_offset(\"presentedForm\", 0) }}.url,'/Binary/')[SAFE_OFFSET(1)] = B.id\n      ) AS reference_binary_resolved\n      {%- else %}\n      0 AS reference_binary_resolved\n      {%- endif %},\n\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(id) - SUM(reference_binary_resolved)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Binary", "package": null, "version": null}, {"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_with_binary_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_with_binary_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.procedure_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "procedure_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/procedure_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.procedure_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_patient_unresolved"], "alias": "procedure_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "903c9b8af2dbc526026925bde4d74e3f42ced3fc3a91a7ac7777c5cf5459adf5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent patient", "short_description": "LDA Proc ref. Patient - non-exist", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent patient", "short_description": "LDA Proc ref. Patient - non-exist", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent patient", "short_description": "LDA Proc ref. Patient - non-exist", "primary_resource": "Procedure", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1691506478.803974, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`procedure_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that reference a non-existent patient\",\n      \"short_description\": \"LDA Proc ref. Patient - non-exist\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "Procedure", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.resource_hour_distribution": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "resource_hour_distribution", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/resource_hour_distribution.sql", "original_file_path": "models/metrics/data_quality/resource_hour_distribution.sql", "unique_id": "model.fhir_dbt_analytics.resource_hour_distribution", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "resource_hour_distribution"], "alias": "resource_hour_distribution", "checksum": {"name": "sha256", "checksum": "29be000653e6838db5038703ca9c044a7d24b9880bf3e5f8df804b2560ff8a4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Distribution of resource counts by time of day", "short_description": "Resource hour distribution", "primary_resource": "Encounter", "primary_fields": ["period.start"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "dimension_a": "hour_of_day", "dimension_a_description": "The hour of the day of the clinical timestamp of a resource", "dimension_b": "resource", "dimension_b_description": "The relevant resource used to extract the timestamp"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Distribution of resource counts by time of day", "short_description": "Resource hour distribution", "primary_resource": "Encounter", "primary_fields": ["period.start"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "dimension_a": "hour_of_day", "dimension_a_description": "The hour of the day of the clinical timestamp of a resource", "dimension_b": "resource", "dimension_b_description": "The relevant resource used to extract the timestamp"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Distribution of resource counts by time of day", "short_description": "Resource hour distribution", "primary_resource": "Encounter", "primary_fields": ["period.start"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "dimension_a": "hour_of_day", "dimension_a_description": "The hour of the day of the clinical timestamp of a resource", "dimension_b": "resource", "dimension_b_description": "The relevant resource used to extract the timestamp"}}, "created_at": 1691506478.811438, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`resource_hour_distribution`", "raw_code": "{{ config(\n      meta = {\n        \"description\": \"Distribution of resource counts by time of day\",\n        \"short_description\": \"Resource hour distribution\",\n        \"primary_resource\": \"Encounter\",\n        \"primary_fields\": ['period.start'],\n        \"secondary_resources\": [],\n        \"calculation\": \"COUNT\",\n        \"category\": \"Data distribution\",\n        \"dimension_a\": \"hour_of_day\",\n        \"dimension_a_description\": \"The hour of the day of the clinical timestamp of a resource\",\n        \"dimension_b\": \"resource\",\n        \"dimension_b_description\": \"The relevant resource used to extract the timestamp\",\n      }\n ) -}}\n{%- set metric_sql -%}\n\n    WITH combined_resources AS (\n      SELECT\n        {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'Encounter' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('Encounter')}} AS E\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'AllergyIntolerance' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('AllergyIntolerance')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'Composition' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('Composition')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'Condition' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('Condition')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'DiagnosticReport' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('DiagnosticReport')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'DocumentReference' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('DocumentReference')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'MedicationRequest' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('MedicationRequest')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'MedicationAdministration' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('MedicationAdministration')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'MedicationStatement' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('MedicationStatement')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'Observation' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('Observation')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'Procedure' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('Procedure')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n      UNION ALL\n      SELECT\n      {{-metric_common_dimensions(exclude_col = 'metric_date')}}\n        'ServiceRequest' AS resource,\n        EXTRACT(HOUR FROM metric_hour) AS hour_of_day,\n        COUNT(*) AS resource_count\n      FROM {{ref('ServiceRequest')}}\n      GROUP BY 1, 2, 3, 4, 5, 6\n)\nSELECT\n  *,\n  CAST(NULL AS DATE) AS metric_date\n  FROM combined_resources\n{%- endset -%}\n{{ calculate_metric(\n    metric_sql,\n    measure= 'SUM(resource_count)'\n)\n}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "AllergyIntolerance", "package": null, "version": null}, {"name": "Composition", "package": null, "version": null}, {"name": "Condition", "package": null, "version": null}, {"name": "DiagnosticReport", "package": null, "version": null}, {"name": "DocumentReference", "package": null, "version": null}, {"name": "MedicationRequest", "package": null, "version": null}, {"name": "MedicationAdministration", "package": null, "version": null}, {"name": "MedicationStatement", "package": null, "version": null}, {"name": "Observation", "package": null, "version": null}, {"name": "Procedure", "package": null, "version": null}, {"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/resource_hour_distribution.sql", "compiled": true, "compiled_code": "\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n),  __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n),  __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n),  __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n),  __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n),  __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n),  __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n),  __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n),  __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n),  __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n),  __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'resource_hour_distribution' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n)"}, {"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}, {"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n)"}, {"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}, {"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}, {"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}, {"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n)"}, {"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.encounter_reference_location_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "encounter_reference_location_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/encounter_reference_location_undefined.sql", "original_file_path": "models/metrics/data_quality/encounter_reference_location_undefined.sql", "unique_id": "model.fhir_dbt_analytics.encounter_reference_location_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_reference_location_undefined"], "alias": "encounter_reference_location_undefined", "checksum": {"name": "sha256", "checksum": "e8f6caca1a1d502e14405e32b480c4ade72683cd7ed6f91ef0a7d2ae1621d9ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Encounter resources that do not have a location reference recorded", "short_description": "Enc ref. Loc - unrecorded", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Encounter resources that do not have a location reference recorded", "short_description": "Enc ref. Loc - unrecorded", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Encounter resources that do not have a location reference recorded", "short_description": "Enc ref. Loc - unrecorded", "primary_resource": "Encounter", "primary_fields": ["location.location.locationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1691506478.8210418, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`encounter_reference_location_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Encounter resources that do not have a location reference recorded\",\n      \"short_description\": \"Enc ref. Loc - unrecorded\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['location.location.locationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"E.location\", \"EL\")) }}\n        WHERE EL.location.locationId IS NOT NULL\n        AND EL.location.locationId <> ''\n      ) AS has_reference_location\n    FROM {{ ref('Encounter') }} AS E\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_location)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_reference_location_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_reference_location_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.encounter_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "encounter_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/encounter_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/encounter_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.encounter_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_reference_patient_unresolved"], "alias": "encounter_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "432e0df69fa2dbd43025cb73a58d10d241ecb271755c48a399daf0931f2ca362"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Encounter resources that reference a non-existent patient", "short_description": "Enc ref. Patient - non-exist", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Encounter resources that reference a non-existent patient", "short_description": "Enc ref. Patient - non-exist", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Encounter resources that reference a non-existent patient", "short_description": "Enc ref. Patient - non-exist", "primary_resource": "Encounter", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1691506478.827664, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`encounter_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Encounter resources that reference a non-existent patient\",\n      \"short_description\": \"Enc ref. Patient - non-exist\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Encounter') }} AS E\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_with_section_text_div": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_with_section_text_div", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_with_section_text_div.sql", "original_file_path": "models/metrics/data_quality/composition_with_section_text_div.sql", "unique_id": "model.fhir_dbt_analytics.composition_with_section_text_div", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_with_section_text_div"], "alias": "composition_with_section_text_div", "checksum": {"name": "sha256", "checksum": "9fc179cd1c30e4e1488761139eb384a568ba95175f38d14d4215a5405ab50a96"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that contain a non-empty section[].text.div", "short_description": "Comp with section div", "primary_resource": "Composition", "primary_fields": ["section.text.div"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "date", "metric_date_description": "Composition date", "dimension_a": "composition_status", "dimension_a_description": "The composition status  (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that contain a non-empty section[].text.div", "short_description": "Comp with section div", "primary_resource": "Composition", "primary_fields": ["section.text.div"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "date", "metric_date_description": "Composition date", "dimension_a": "composition_status", "dimension_a_description": "The composition status  (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that contain a non-empty section[].text.div", "short_description": "Comp with section div", "primary_resource": "Composition", "primary_fields": ["section.text.div"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "date", "metric_date_description": "Composition date", "dimension_a": "composition_status", "dimension_a_description": "The composition status  (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506478.835139, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_with_section_text_div`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that contain a non-empty section[].text.div\",\n      \"short_description\": \"Comp with section div\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['section.text.div'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"date\",\n      \"metric_date_description\": \"Composition date\",\n      \"dimension_a\": \"composition_status\",\n      \"dimension_a_description\": \"The composition status  (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as composition_status,\n      {%- if column_exists('section.text.div') %}\n      {{ safe_offset(\"section\", 0) }}.text.div IS NOT NULL\n        AND {{ safe_offset(\"section\", 0) }}.text.div <> '' AS has_section_text_div\n      {%- else %}\n      FALSE AS has_section_text_div\n      {%- endif %},\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(CAST(has_section_text_div AS '~type_long()~'))',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_with_section_text_div.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_with_section_text_div' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.binary_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "binary_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/binary_count.sql", "original_file_path": "models/metrics/data_quality/binary_count.sql", "unique_id": "model.fhir_dbt_analytics.binary_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "binary_count"], "alias": "binary_count", "checksum": {"name": "sha256", "checksum": "f4ec3592730b96fbc073e57b2c92eff83d00f0625c19f99a76f0e8edeb7c0827"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Binary resources", "short_description": "Binary resources", "primary_resource": "Binary", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Binary resources", "short_description": "Binary resources", "primary_resource": "Binary", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Binary resources", "short_description": "Binary resources", "primary_resource": "Binary", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506478.843132, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`binary_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Binary resources\",\n      \"short_description\": \"Binary resources\",\n      \"primary_resource\": \"Binary\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      B.id,\n      {{- metric_common_dimensions(table_alias='B', exclude_col='metric_date') }}\n      C.metric_date,\n      {{ get_column_or_default('status', 'Composition', table_alias='C') }} AS status\n    FROM {{ ref('Binary') }} AS B\n    LEFT JOIN {{ ref('Composition') }} AS C\n    {%- if column_exists('section.entry.binaryId', 'Composition') %}\n      ON B.id = (SELECT binaryId FROM UNNEST((SELECT entry FROM UNNEST(section))))\n    {%- else %}\n      ON FALSE\n    {%- endif -%}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Binary", "package": null, "version": null}, {"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/binary_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Binary as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\n),  __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'binary_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Binary", "sql": " __dbt__cte__Binary as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\n)"}, {"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_performer_specialty": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_performer_specialty", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_performer_specialty.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_performer_specialty.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_performer_specialty", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_performer_specialty"], "alias": "diagnosticreport_performer_specialty", "checksum": {"name": "sha256", "checksum": "0394baebb15f9b4e71e8c11e068c415e6e22c596c05ac6c9be7a54def711bede"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["spark_todo"], "meta": {"description": "Proportion of diagnostic reports referencing a practioner role with specialty recorded", "short_description": "DiagRep prac. specialty recorded", "primary_resource": "DiagnosticReport", "primary_fields": ["performer"], "secondary_resources": ["Practitioner", "PractitionerRole"], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "category", "dimension_a_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["spark_todo"], "description": "", "columns": {}, "meta": {"description": "Proportion of diagnostic reports referencing a practioner role with specialty recorded", "short_description": "DiagRep prac. specialty recorded", "primary_resource": "DiagnosticReport", "primary_fields": ["performer"], "secondary_resources": ["Practitioner", "PractitionerRole"], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "category", "dimension_a_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["spark_todo"], "meta": {"description": "Proportion of diagnostic reports referencing a practioner role with specialty recorded", "short_description": "DiagRep prac. specialty recorded", "primary_resource": "DiagnosticReport", "primary_fields": ["performer"], "secondary_resources": ["Practitioner", "PractitionerRole"], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "category", "dimension_a_description": "The service category of the diagnostic report"}}, "created_at": 1691506478.849885, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_performer_specialty`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    tags = [\"spark_todo\"],\n    meta = {\n      \"description\": \"Proportion of diagnostic reports referencing a practioner role with specialty recorded\",\n      \"short_description\": \"DiagRep prac. specialty recorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['performer'],\n      \"secondary_resources\": ['Practitioner', 'PractitionerRole'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"category\",\n      \"dimension_a_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n\n  SELECT\n    D.id,\n    {{- metric_common_dimensions(\"D\") }}\n    {{ code_from_codeableconcept(\n      'category',\n      'https://g.co/fhir/harmonized/diagnostic_report/category',\n      index = get_source_specific_category_index()\n    ) }} AS category,\n    (\n      SELECT SIGN(COUNT(*))\n      FROM UNNEST(PR.specialty) AS s\n      WHERE s.coding IS NOT NULL\n        OR (s.text IS NOT NULL AND s.text <> '')\n    ) AS has_specialty\n  FROM {{ ref('DiagnosticReport') }} AS D\n  LEFT JOIN UNNEST(D.performer) AS Dp\n  LEFT JOIN {{ ref('Practitioner') }} AS P\n    ON Dp.practitionerId = P.id\n  LEFT JOIN {{ ref('PractitionerRole') }} PR\n    ON P.id = PR.practitioner.practitionerid\n\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT IF(has_specialty = 1, id, NULL))',\n    denominator = 'COUNT(DISTINCT id)'\n) -}}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "Practitioner", "package": null, "version": null}, {"name": "PractitionerRole", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_performer_specialty.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n),  __dbt__cte__Practitioner as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\n),  __dbt__cte__PractitionerRole as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_performer_specialty' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}, {"id": "model.fhir_dbt_analytics.Practitioner", "sql": " __dbt__cte__Practitioner as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\n)"}, {"id": "model.fhir_dbt_analytics.PractitionerRole", "sql": " __dbt__cte__PractitionerRole as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.documentreference_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "documentreference_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/documentreference_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/documentreference_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.documentreference_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "documentreference_reference_patient_unresolved"], "alias": "documentreference_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "a22d3cf94041ba3e25618e758a13d5da288d3a0c8be6358bfd5499164eb7433c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DocumentReference resources that reference a non-existent patient", "short_description": "DocRef ref. Patient - non-exist", "primary_resource": "DocumentReference", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DocumentReference resources that reference a non-existent patient", "short_description": "DocRef ref. Patient - non-exist", "primary_resource": "DocumentReference", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DocumentReference resources that reference a non-existent patient", "short_description": "DocRef ref. Patient - non-exist", "primary_resource": "DocumentReference", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}}, "created_at": 1691506478.8576021, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`documentreference_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DocumentReference resources that reference a non-existent patient\",\n      \"short_description\": \"DocRef ref. Patient - non-exist\",\n      \"primary_resource\": \"DocumentReference\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DocumentReference.date\",\n      \"metric_date_description\": \"Document reference date\",\n      \"dimension_a\": \"document_status\",\n      \"dimension_a_description\": \"The document reference status  (current | superseded | entered-in-error)\",\n      \"dimension_b\": \"format\",\n      \"dimension_b_description\": \"The format of the document referenced (scanned | NULL)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as document_status,\n      {%- if column_exists('content.format.code') %}\n      {{ safe_offset(\"content\", 0) }}.format.code AS format\n      {%- else %}\n      NULL AS format\n      {%- endif %},\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('DocumentReference') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "DocumentReference", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/documentreference_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'documentreference_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_encounter_undefined"], "alias": "medicationrequest_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "d873b8968547ba0c84590c6a38a4d4c4d72006de0df5c4ff374ae60bcf301bfc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have an encounter reference recorded", "short_description": "MedReq ref. Enc - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have an encounter reference recorded", "short_description": "MedReq ref. Enc - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have an encounter reference recorded", "short_description": "MedReq ref. Enc - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506478.865341, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have an encounter reference recorded\",\n      \"short_description\": \"MedReq ref. Enc - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medication_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medication_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medication_count.sql", "original_file_path": "models/metrics/data_quality/medication_count.sql", "unique_id": "model.fhir_dbt_analytics.medication_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medication_count"], "alias": "medication_count", "checksum": {"name": "sha256", "checksum": "8ca4c63192b94f0be44a6692dad80629c69718322fb97b13ba3b6dfc70a2c943"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Medication resources", "short_description": "Medication resources", "primary_resource": "Medication", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the medication (active | inactive | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Medication resources", "short_description": "Medication resources", "primary_resource": "Medication", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the medication (active | inactive | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Medication resources", "short_description": "Medication resources", "primary_resource": "Medication", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "status", "dimension_a_description": "The status of the medication (active | inactive | entered-in-error)"}}, "created_at": 1691506478.873491, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medication_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Medication resources\",\n      \"short_description\": \"Medication resources\",\n      \"primary_resource\": \"Medication\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication (active | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status\n    FROM {{ ref('Medication') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Medication", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medication_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Medication as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Medication_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Medication_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medication_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Medication", "sql": " __dbt__cte__Medication as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Medication_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Medication_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_encounters_midnight_census": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_encounters_midnight_census", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_encounters_midnight_census.sql", "original_file_path": "models/metrics/data_quality/active_encounters_midnight_census.sql", "unique_id": "model.fhir_dbt_analytics.active_encounters_midnight_census", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_encounters_midnight_census"], "alias": "active_encounters_midnight_census", "checksum": {"name": "sha256", "checksum": "436e26eaa02fa05b8de7c9910d56d0dd7c4d7bc44dcb41ce5191a99a7e0ad1c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["spark_todo"], "meta": {"description": "Count of patients that have an active inpatient encounter at midnight each day", "short_description": "Census", "primary_resource": "Encounter", "primary_fields": ["classHistory.period.start", "classHistory.period.end"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "dimension_a": "episode_class", "dimension_a_description": "The class of the encounter episode", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["spark_todo"], "description": "", "columns": {}, "meta": {"description": "Count of patients that have an active inpatient encounter at midnight each day", "short_description": "Census", "primary_resource": "Encounter", "primary_fields": ["classHistory.period.start", "classHistory.period.end"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "dimension_a": "episode_class", "dimension_a_description": "The class of the encounter episode", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["spark_todo"], "meta": {"description": "Count of patients that have an active inpatient encounter at midnight each day", "short_description": "Census", "primary_resource": "Encounter", "primary_fields": ["classHistory.period.start", "classHistory.period.end"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "dimension_a": "episode_class", "dimension_a_description": "The class of the encounter episode", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}}, "created_at": 1691506478.880542, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_encounters_midnight_census`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    tags = [\"spark_todo\"],\n    meta = {\n      \"description\": \"Count of patients that have an active inpatient encounter at midnight each day\",\n      \"short_description\": \"Census\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['classHistory.period.start', 'classHistory.period.end'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Encounter daily\",\n      \"dimension_a\": \"episode_class\",\n      \"dimension_a_description\": \"The class of the encounter episode\",\n      \"dimension_b\": \"encounter_service_provider\",\n      \"dimension_b_description\": \"The organization responsible for providing the services for this encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    WITH\n      Episode AS (\n        SELECT\n          E.id,\n          {{- metric_common_dimensions(exclude_col='metric_date')|indent(8) }}\n          {{ metric_date(['C.period.start', 'E.period.start']) }} AS period_start,\n          {{ metric_date(['C.period.end', 'E.period.end']) }} AS period_end,\n          E.status AS encounter_status,\n          CASE\n            WHEN UPPER(COALESCE(C.class.code, E.class.code)) IN ('IMP', 'ACUTE', 'NONAC') THEN 'IMP/ACUTE/NONAC'\n            ELSE COALESCE(C.class.code, E.class.code)\n            END AS episode_class,\n          {{ get_column_or_default('serviceProvider.organizationId', 'Encounter') }} AS encounter_service_provider\n        FROM {{ ref('Encounter') }} AS E\n        LEFT JOIN UNNEST(E.classHistory) AS C\n        WHERE\n          UPPER(COALESCE(C.class.code, E.class.code)) IN ('IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER')\n          AND E.status IN ('in-progress', 'finished')\n      ),\n      DS AS (\n        {{ date_spine()}}\n      )\n\n    SELECT\n      Episode.id,\n      {{- metric_common_dimensions(exclude_col='metric_date')|indent }}\n      DS.date_day AS metric_date,\n      Episode.episode_class,\n      Episode.encounter_service_provider,\n    FROM Episode JOIN DS\n      ON Episode.period_start < DS.date_day\n      AND {{ cap_encounter_end_date(encounter_class='episode_class')|indent }} >= DS.date_day\n{%- endset -%}\n\n{{- calculate_metric(metric_sql) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.metric_date", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.date_spine", "macro.fhir_dbt_analytics.cap_encounter_end_date", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_encounters_midnight_census.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_encounters_midnight_census' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "allergyintolerance_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/allergyintolerance_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_reference_encounter_undefined"], "alias": "allergyintolerance_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "42bdc253e2fb44dd9aeb530f106d16651da02b3b2d5c8009da57da36bd14b7ee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of AllergyIntolerance resources that do not have an encounter reference recorded", "short_description": "Allergy ref. Enc - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of AllergyIntolerance resources that do not have an encounter reference recorded", "short_description": "Allergy ref. Enc - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of AllergyIntolerance resources that do not have an encounter reference recorded", "short_description": "Allergy ref. Enc - unrecorded", "primary_resource": "AllergyIntolerance", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1691506478.8901892, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`allergyintolerance_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of AllergyIntolerance resources that do not have an encounter reference recorded\",\n      \"short_description\": \"Allergy ref. Enc - unrecorded\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' ) }} AS verification_status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('AllergyIntolerance') }} AS A\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "AllergyIntolerance", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_with_code_text": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_with_code_text", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_with_code_text.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_with_code_text.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_with_code_text", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_with_code_text"], "alias": "diagnosticreport_with_code_text", "checksum": {"name": "sha256", "checksum": "5da4e54249b3831ca5a108036a8ab732ef9741829b3d70d9158ab104023a1fd7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that contain a non-empty code.text", "short_description": "DR with code.text", "primary_resource": "DiagnosticReport", "primary_fields": ["code.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "issued", "metric_date_description": "Diagnostic Report issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that contain a non-empty code.text", "short_description": "DR with code.text", "primary_resource": "DiagnosticReport", "primary_fields": ["code.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "issued", "metric_date_description": "Diagnostic Report issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that contain a non-empty code.text", "short_description": "DR with code.text", "primary_resource": "DiagnosticReport", "primary_fields": ["code.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "issued", "metric_date_description": "Diagnostic Report issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506478.899072, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_with_code_text`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that contain a non-empty code.text\",\n      \"short_description\": \"DR with code.text\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['code.text'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"issued\",\n      \"metric_date_description\": \"Diagnostic Report issued date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The report status  (preliminary | final | amended | entered-in-error +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as status,\n      COALESCE({{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }},\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct,',\n        index = get_source_specific_category_index()\n      ) }},\n       {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/v2-0074,',\n        index = get_source_specific_category_index()\n      ) }},\n       {{ code_from_codeableconcept(\n        'category',\n        'http://loinc.org,',\n        index = get_source_specific_category_index()\n      ) }}, 'Undefined')\n       AS category,\n      {{ has_value('code.text') }} AS has_code_text\n    FROM {{ ref('DiagnosticReport') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(CAST(has_code_text AS '~type_long()~'))',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_value", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_with_code_text.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_with_code_text' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_dosage_dose_rate": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_dosage_dose_rate", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_dosage_dose_rate.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_dosage_dose_rate.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_dosage_dose_rate", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_dosage_dose_rate"], "alias": "medicationrequest_dosage_dose_rate", "checksum": {"name": "sha256", "checksum": "444a449d96535a087b617b255313806ed5b751e632cfc39ec5d4ea2db2ddad6c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication requests with dosage dose and rate recorded", "short_description": "MedReq dose and rate recorded", "primary_resource": "MedicationRequest", "primary_fields": ["dosageInstruction.doseAndRate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication requests with dosage dose and rate recorded", "short_description": "MedReq dose and rate recorded", "primary_resource": "MedicationRequest", "primary_fields": ["dosageInstruction.doseAndRate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication requests with dosage dose and rate recorded", "short_description": "MedReq dose and rate recorded", "primary_resource": "MedicationRequest", "primary_fields": ["dosageInstruction.doseAndRate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date"}}, "created_at": 1691506478.9101598, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_dosage_dose_rate`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication requests with dosage dose and rate recorded\",\n      \"short_description\": \"MedReq dose and rate recorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['dosageInstruction.doseAndRate'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF({{ safe_offset(\"dosageInstruction\", 0) }}.doseAndRate IS NOT NULL, 1, 0) AS has_dosage_dose_rate\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_dose_rate)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_dosage_dose_rate.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_dosage_dose_rate' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_servicerequest_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_servicerequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_servicerequest_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_servicerequest_unresolved"], "alias": "diagnosticreport_reference_servicerequest_unresolved", "checksum": {"name": "sha256", "checksum": "2d7920e848c0cf130c19a73ef9a43045f6cd6fcf03ed8782f0c53dd64d3e8b0d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent service request", "short_description": "DiagRep ref. SerReq - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent service request", "short_description": "DiagRep ref. SerReq - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent service request", "short_description": "DiagRep ref. SerReq - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506478.9178581, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_servicerequest_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent service request\",\n      \"short_description\": \"DiagRep ref. SerReq - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['basedOn.serviceRequestId'],\n      \"secondary_resources\": ['ServiceRequest'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value,\n      {{ reference_resolves('basedOn', 'ServiceRequest') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "ServiceRequest", "package": null, "version": null}, {"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_servicerequest_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_servicerequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.careteam_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "careteam_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/careteam_count.sql", "original_file_path": "models/metrics/data_quality/careteam_count.sql", "unique_id": "model.fhir_dbt_analytics.careteam_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_count"], "alias": "careteam_count", "checksum": {"name": "sha256", "checksum": "99b6e06baecd834f0da51b8c9804089b05baa7fb4c1356fdb9471c5999fd1d1e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid CareTeam resources", "short_description": "CareTeam resources", "primary_resource": "CareTeam", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid CareTeam resources", "short_description": "CareTeam resources", "primary_resource": "CareTeam", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid CareTeam resources", "short_description": "CareTeam resources", "primary_resource": "CareTeam", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1691506478.926122, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`careteam_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid CareTeam resources\",\n      \"short_description\": \"CareTeam resources\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status\n    FROM {{ ref('CareTeam') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "CareTeam", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.patient_testpatient": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "patient_testpatient", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/patient_testpatient.sql", "original_file_path": "models/metrics/data_quality/patient_testpatient.sql", "unique_id": "model.fhir_dbt_analytics.patient_testpatient", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_testpatient"], "alias": "patient_testpatient", "checksum": {"name": "sha256", "checksum": "33269da051f0efa9d48e67a4061503702fd50b5e3304f33850433c259c42c058"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of patients that are flagged as test patients", "short_description": "Test patients", "primary_resource": "Patient", "primary_fields": ["meta.security.system", "meta.security.code"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of patients that are flagged as test patients", "short_description": "Test patients", "primary_resource": "Patient", "primary_fields": ["meta.security.system", "meta.security.code"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of patients that are flagged as test patients", "short_description": "Test patients", "primary_resource": "Patient", "primary_fields": ["meta.security.system", "meta.security.code"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness"}}, "created_at": 1691506478.9323552, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`patient_testpatient`", "raw_code": "{{ config(\n    meta = {\n      \"description\": \"Proportion of patients that are flagged as test patients\",\n      \"short_description\": \"Test patients\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['meta.security.system','meta.security.code'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      (\n        SELECT SIGN(COUNT(*)) FROM {{ spark_parenthesis(unnest('P.meta.security', 's')) }}\n        WHERE s.system = 'http://terminology.hl7.org/CodeSystem/v3-ActReason'\n          AND s.code = 'HTEST'\n      )\n      AS test_patient\n    FROM {{ ref('Patient') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(test_patient)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_testpatient.sql", "compiled": true, "compiled_code": "\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n), A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      (\n        SELECT SIGN(COUNT(*)) FROM UNNEST(P.meta.security) s\n        WHERE s.system = 'http://terminology.hl7.org/CodeSystem/v3-ActReason'\n          AND s.code = 'HTEST'\n      )\n      AS test_patient\n    FROM __dbt__cte__Patient AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_testpatient' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(test_patient) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(IF((COUNT(id)) != 0, (SUM(test_patient)) / (COUNT(id)), NULL) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.patient_name_missing": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "patient_name_missing", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/patient_name_missing.sql", "original_file_path": "models/metrics/data_quality/patient_name_missing.sql", "unique_id": "model.fhir_dbt_analytics.patient_name_missing", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_name_missing"], "alias": "patient_name_missing", "checksum": {"name": "sha256", "checksum": "a8b3bc63d00ff7febef566bbaa40995d22fb4f545c0ed0e36407814ff19a051d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of patients without structured name", "short_description": "Patients missing struct name", "primary_resource": "Patient", "primary_fields": ["name.family", "name.given"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "Whether this patient record is in active use"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of patients without structured name", "short_description": "Patients missing struct name", "primary_resource": "Patient", "primary_fields": ["name.family", "name.given"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "Whether this patient record is in active use"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of patients without structured name", "short_description": "Patients missing struct name", "primary_resource": "Patient", "primary_fields": ["name.family", "name.given"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "Whether this patient record is in active use"}}, "created_at": 1691506478.9388769, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`patient_name_missing`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of patients without structured name\",\n      \"short_description\": \"Patients missing struct name\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['name.family', 'name.given'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this patient record is in active use\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST({{ get_column_or_default('active') }} AS STRING) AS active,\n      CASE WHEN P.name IS NULL OR ARRAY_LENGTH(P.name) = 0 OR {{ safe_offset(\"P.name\", 0) }}.family IS NULL OR {{ safe_offset(\"P.name\", 0) }}.family = '' OR {{ safe_offset(\"P.name\", 0) }}.given IS NULL OR ARRAY_LENGTH({{ safe_offset(\"P.name\", 0) }}.given) = 0 OR {{ safe_offset(\"P.name\", 0) }}{{ safe_offset(\".given\", 0) }} = '' THEN 1 ELSE 0 END AS patient_structured_name_missing\n\n    FROM {{ ref('Patient') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(patient_structured_name_missing)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_name_missing.sql", "compiled": true, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n), A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      CAST(active AS STRING) AS active,\n      CASE WHEN P.name IS NULL OR ARRAY_LENGTH(P.name) = 0 OR P.name[SAFE_OFFSET(0)].family IS NULL OR P.name[SAFE_OFFSET(0)].family = '' OR P.name[SAFE_OFFSET(0)].given IS NULL OR ARRAY_LENGTH(P.name[SAFE_OFFSET(0)].given) = 0 OR P.name[SAFE_OFFSET(0)].given[SAFE_OFFSET(0)] = '' THEN 1 ELSE 0 END AS patient_structured_name_missing\n\n    FROM __dbt__cte__Patient AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_name_missing' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(active AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(patient_structured_name_missing) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(IF((COUNT(id)) != 0, (SUM(patient_structured_name_missing)) / (COUNT(id)), NULL) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.person_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "person_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/person_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/person_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.person_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "person_reference_patient_unresolved"], "alias": "person_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "e025f1b8613d021d2d99a6deba154d4ef0c4b4417a34b56fd8b71d3bf9aec392"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Person resources that do not contain at least one reference to an existing patient", "short_description": "Person ref. Patient - non-exist", "primary_resource": "Person", "primary_fields": ["link.target.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "dimension_a": "person_active", "dimension_a_description": "The person active status  (true | false)", "dimension_b": "person_gender", "dimension_b_description": "The gender of the person (male | female | other | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Person resources that do not contain at least one reference to an existing patient", "short_description": "Person ref. Patient - non-exist", "primary_resource": "Person", "primary_fields": ["link.target.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "dimension_a": "person_active", "dimension_a_description": "The person active status  (true | false)", "dimension_b": "person_gender", "dimension_b_description": "The gender of the person (male | female | other | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Person resources that do not contain at least one reference to an existing patient", "short_description": "Person ref. Patient - non-exist", "primary_resource": "Person", "primary_fields": ["link.target.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "dimension_a": "person_active", "dimension_a_description": "The person active status  (true | false)", "dimension_b": "person_gender", "dimension_b_description": "The gender of the person (male | female | other | unknown)"}}, "created_at": 1691506478.9464629, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`person_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Person resources that do not contain at least one reference to an existing patient\",\n      \"short_description\": \"Person ref. Patient - non-exist\",\n      \"primary_resource\": \"Person\",\n      \"primary_fields\": ['link.target.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"dimension_a\": \"person_active\",\n      \"dimension_a_description\": \"The person active status  (true | false)\",\n      \"dimension_b\": \"person_gender\",\n      \"dimension_b_description\": \"The gender of the person (male | female | other | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST({{ get_column_or_default('active') }} AS STRING) person_active,\n      CAST({{ get_column_or_default('gender') }} AS STRING) as person_gender,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"P.link\", \"PL\")) }}\n        JOIN {{ ref('Patient') }} AS Pat\n          ON PL.target.patientId = Pat.id\n      ) AS reference_patient_resolved\n    FROM {{ ref('Person') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - reference_patient_resolved)',\n    denominator = 'COUNT(DISTINCT id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "Person", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/person_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n),  __dbt__cte__Person as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'person_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}, {"id": "model.fhir_dbt_analytics.Person", "sql": " __dbt__cte__Person as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_patients_with_medicationstatement": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_patients_with_medicationstatement", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_patients_with_medicationstatement.sql", "original_file_path": "models/metrics/data_quality/active_patients_with_medicationstatement.sql", "unique_id": "model.fhir_dbt_analytics.active_patients_with_medicationstatement", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_patients_with_medicationstatement"], "alias": "active_patients_with_medicationstatement", "checksum": {"name": "sha256", "checksum": "44fb866b800650019a8809bb5f713f99749be04fcb0b0152e4af2f9205bd1ec1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of active patients with at least one medication statement recorded at any time", "short_description": "Patients with MedStatement", "primary_resource": "MedicationStatement", "primary_fields": ["subject.patientId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of active patients with at least one medication statement recorded at any time", "short_description": "Patients with MedStatement", "primary_resource": "MedicationStatement", "primary_fields": ["subject.patientId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of active patients with at least one medication statement recorded at any time", "short_description": "Patients with MedStatement", "primary_resource": "MedicationStatement", "primary_fields": ["subject.patientId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}}, "created_at": 1691506478.9536269, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_patients_with_medicationstatement`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of active patients with at least one medication statement recorded at any time\",\n      \"short_description\": \"Patients with MedStatement\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Active patients with resource\",\n      \"dimension_a\": \"encounter_class_group\",\n      \"dimension_a_description\": \"The latest class of the encounter grouped into ambulatory or non-ambulatory\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      ActiveEncounters.*,\n      M.subject.patientId AS medicationstatement_patientid\n    FROM ({{ active_encounters() }}) AS ActiveEncounters\n    LEFT JOIN {{ ref('MedicationStatement') }} AS M\n      ON ActiveEncounters.patientId = M.subject.patientId\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT medicationstatement_patientid)',\n    denominator = 'COUNT(DISTINCT patientId)'\n) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_patients_with_medicationstatement.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_patients_with_medicationstatement' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.questionnaire_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "questionnaire_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/questionnaire_count.sql", "original_file_path": "models/metrics/data_quality/questionnaire_count.sql", "unique_id": "model.fhir_dbt_analytics.questionnaire_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "questionnaire_count"], "alias": "questionnaire_count", "checksum": {"name": "sha256", "checksum": "67bfd9eed1d68245d2262f7aee63353c0ef01837348a73ce5709e52f57ae3de0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Questionnaire resources", "short_description": "Questionnaire resources", "primary_resource": "Questionnaire", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Questionnaire.date", "metric_date_description": "Questionnaire date", "dimension_a": "questionnaire_group.title", "dimension_a_description": "The title of the questionnaire (The Basics | Lifestyle +)", "dimension_b": "status", "dimension_b_description": "The status of the questionnaire (published | +)", "dimension_c": "version", "dimension_c_description": "The version of the questionnaire ( V2022.11.17 | v2020.09.25 +)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Questionnaire resources", "short_description": "Questionnaire resources", "primary_resource": "Questionnaire", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Questionnaire.date", "metric_date_description": "Questionnaire date", "dimension_a": "questionnaire_group.title", "dimension_a_description": "The title of the questionnaire (The Basics | Lifestyle +)", "dimension_b": "status", "dimension_b_description": "The status of the questionnaire (published | +)", "dimension_c": "version", "dimension_c_description": "The version of the questionnaire ( V2022.11.17 | v2020.09.25 +)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Questionnaire resources", "short_description": "Questionnaire resources", "primary_resource": "Questionnaire", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Questionnaire.date", "metric_date_description": "Questionnaire date", "dimension_a": "questionnaire_group.title", "dimension_a_description": "The title of the questionnaire (The Basics | Lifestyle +)", "dimension_b": "status", "dimension_b_description": "The status of the questionnaire (published | +)", "dimension_c": "version", "dimension_c_description": "The version of the questionnaire ( V2022.11.17 | v2020.09.25 +)"}}, "created_at": 1691506478.9628868, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`questionnaire_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Questionnaire resources\",\n      \"short_description\": \"Questionnaire resources\",\n      \"primary_resource\": \"Questionnaire\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Questionnaire.date\",\n      \"metric_date_description\": \"Questionnaire date\",\n      \"dimension_a\": \"questionnaire_group.title\",\n      \"dimension_a_description\": \"The title of the questionnaire (The Basics | Lifestyle +)\",\n      \"dimension_b\": \"status\",\n      \"dimension_b_description\": \"The status of the questionnaire (published | +)\",\n      \"dimension_c\": \"version\",\n      \"dimension_c_description\": \"The version of the questionnaire ( V2022.11.17 | v2020.09.25 +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      `group` AS questionnaire_group,\n      status,\n      version\n    FROM {{ ref('Questionnaire') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Questionnaire", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Questionnaire", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/questionnaire_count.sql", "compiled": true, "compiled_code": "\n\n\nWITH\n   __dbt__cte__Questionnaire as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`\n), A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      `group` AS questionnaire_group,\n      status,\n      version\n    FROM __dbt__cte__Questionnaire\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'questionnaire_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(questionnaire_group.title AS STRING) AS dimension_a,\n  CAST(status AS STRING) AS dimension_b,\n  CAST(version AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Questionnaire", "sql": " __dbt__cte__Questionnaire as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "allergyintolerance_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/allergyintolerance_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_reference_patient_unresolved"], "alias": "allergyintolerance_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "b5b47002d358ee0e6ae4d1faaba25bd4cf71c7be89e16cf9877f50bfebc62e32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent patient", "short_description": "Allergy ref. Patient - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent patient", "short_description": "Allergy ref. Patient - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of AllergyIntolerance resources that reference a non-existent patient", "short_description": "Allergy ref. Patient - non-exist", "primary_resource": "AllergyIntolerance", "primary_fields": ["patient.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1691506478.96904, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`allergyintolerance_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of AllergyIntolerance resources that reference a non-existent patient\",\n      \"short_description\": \"Allergy ref. Patient - non-exist\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['patient.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification') }} AS verification_status,\n      {{ has_reference_value('patient', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('patient', 'Patient') }} AS reference_resolves\n    FROM {{ ref('AllergyIntolerance') }} AS A\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "AllergyIntolerance", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_encounter_undefined"], "alias": "medicationadministration_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "63cb586e3d333f0622eaa53a8b355f57483dd95b966926c57a4cac59c7078b8b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that do not have an encounter reference recorded", "short_description": "MedAdmin ref. Enc - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that do not have an encounter reference recorded", "short_description": "MedAdmin ref. Enc - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that do not have an encounter reference recorded", "short_description": "MedAdmin ref. Enc - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1691506478.977783, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that do not have an encounter reference recorded\",\n      \"short_description\": \"MedAdmin ref. Enc - unrecorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['context.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('context', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.observation_quantity_unit": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "observation_quantity_unit", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/observation_quantity_unit.sql", "original_file_path": "models/metrics/data_quality/observation_quantity_unit.sql", "unique_id": "model.fhir_dbt_analytics.observation_quantity_unit", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_quantity_unit"], "alias": "observation_quantity_unit", "checksum": {"name": "sha256", "checksum": "b0e4996c50fc662cbe30ef402cd8850bddd918ea93ba1b2d4abf874e9382eb1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of observations with a value that have a unit recorded", "short_description": "Obs value unit recorded", "primary_resource": "Observation", "primary_fields": ["value.quantity.unit"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of observations with a value that have a unit recorded", "short_description": "Obs value unit recorded", "primary_resource": "Observation", "primary_fields": ["value.quantity.unit"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of observations with a value that have a unit recorded", "short_description": "Obs value unit recorded", "primary_resource": "Observation", "primary_fields": ["value.quantity.unit"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date"}}, "created_at": 1691506478.984267, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`observation_quantity_unit`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of observations with a value that have a unit recorded\",\n      \"short_description\": \"Obs value unit recorded\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['value.quantity.unit'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      O.id,\n      IF(O.value.quantity.unit IS NOT NULL AND O.value.quantity.unit <> '', 1, 0) AS has_value_quantity_unit\n    FROM {{ ref('Observation') }} AS O\n    WHERE O.value.quantity.value IS NOT NULL\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_value_quantity_unit)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_quantity_unit.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_quantity_unit' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.practitionerrole_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "practitionerrole_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/practitionerrole_count.sql", "original_file_path": "models/metrics/data_quality/practitionerrole_count.sql", "unique_id": "model.fhir_dbt_analytics.practitionerrole_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "practitionerrole_count"], "alias": "practitionerrole_count", "checksum": {"name": "sha256", "checksum": "c534a5fabdd1e25fa6588971c4c98cf1a6a48ede5ce3144635c1fb657f7c838d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid PractitionerRole resources", "short_description": "PractitionerRole resources", "primary_resource": "PractitionerRole", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner role record is in active use"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid PractitionerRole resources", "short_description": "PractitionerRole resources", "primary_resource": "PractitionerRole", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner role record is in active use"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid PractitionerRole resources", "short_description": "PractitionerRole resources", "primary_resource": "PractitionerRole", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "dimension_a": "active", "dimension_a_description": "Whether this practitioner role record is in active use"}}, "created_at": 1691506478.99017, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`practitionerrole_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid PractitionerRole resources\",\n      \"short_description\": \"PractitionerRole resources\",\n      \"primary_resource\": \"PractitionerRole\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this practitioner role record is in active use\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST(active AS STRING) AS active\n    FROM {{ ref('PractitionerRole') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "PractitionerRole", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/practitionerrole_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__PractitionerRole as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'practitionerrole_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.PractitionerRole", "sql": " __dbt__cte__PractitionerRole as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_reference_encounter_unresolved"], "alias": "medicationstatement_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "ff33d3a6a486dc058a9c9f488d0b554690a2dd72962ffb7f053ffbe40af90db9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent encounter", "short_description": "MedStat ref. Enc - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent encounter", "short_description": "MedStat ref. Enc - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationStatement resources that reference a non-existent encounter", "short_description": "MedStat ref. Enc - non-exist", "primary_resource": "MedicationStatement", "primary_fields": ["context.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1691506478.9970748, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationStatement resources that reference a non-existent encounter\",\n      \"short_description\": \"MedStat ref. Enc - non-exist\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['context.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('context', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('context', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.documentreference_distribution_type": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "documentreference_distribution_type", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/documentreference_distribution_type.sql", "original_file_path": "models/metrics/data_quality/documentreference_distribution_type.sql", "unique_id": "model.fhir_dbt_analytics.documentreference_distribution_type", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "documentreference_distribution_type"], "alias": "documentreference_distribution_type", "checksum": {"name": "sha256", "checksum": "7b86052a3d4f668bc9c1a2d439b57f47dcd689af0bc7d2ccc24ce36b31413a7e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Distribution of values for DocumentReference type", "short_description": "DocRef Type Dist", "primary_resource": "DocumentReference", "primary_fields": ["type.coding.system", "type.coding.code"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)", "dimension_c": "type", "dimension_c_description": "The kind of document (LOINC)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Distribution of values for DocumentReference type", "short_description": "DocRef Type Dist", "primary_resource": "DocumentReference", "primary_fields": ["type.coding.system", "type.coding.code"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)", "dimension_c": "type", "dimension_c_description": "The kind of document (LOINC)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Distribution of values for DocumentReference type", "short_description": "DocRef Type Dist", "primary_resource": "DocumentReference", "primary_fields": ["type.coding.system", "type.coding.code"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)", "dimension_c": "type", "dimension_c_description": "The kind of document (LOINC)"}}, "created_at": 1691506479.004148, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`documentreference_distribution_type`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Distribution of values for DocumentReference type\",\n      \"short_description\": \"DocRef Type Dist\",\n      \"primary_resource\": \"DocumentReference\",\n      \"primary_fields\": ['type.coding.system', 'type.coding.code'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Data distribution\",\n      \"metric_date_field\": \"DocumentReference.date\",\n      \"metric_date_description\": \"Document reference date\",\n      \"dimension_a\": \"document_status\",\n      \"dimension_a_description\": \"The document reference status  (current | superseded | entered-in-error)\",\n      \"dimension_b\": \"format\",\n      \"dimension_b_description\": \"The format of the document referenced (scanned | NULL)\",\n      \"dimension_c\": \"type\",\n      \"dimension_c_description\": \"The kind of document (LOINC)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as document_status,\n      {%- if column_exists('content.format.code') %}\n      {{ safe_offset(\"content\", 0) }}.format.code AS format\n      {%- else %}\n      NULL AS format\n      {%- endif %},\n      {{ code_from_codeableconcept(\n        'type',\n        'http://loinc.org'\n      ) }} AS type\n    FROM {{ ref('DocumentReference') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DocumentReference", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/documentreference_distribution_type.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'documentreference_distribution_type' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_binary_mimetype": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_binary_mimetype", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_binary_mimetype.sql", "original_file_path": "models/metrics/data_quality/composition_binary_mimetype.sql", "unique_id": "model.fhir_dbt_analytics.composition_binary_mimetype", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_binary_mimetype"], "alias": "composition_binary_mimetype", "checksum": {"name": "sha256", "checksum": "4661bebe6ab1e1f7cad1734046d471b7cb7f060ee95e0a24806ec8bc92999316"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of Composition by Binary MIME Type", "short_description": "Composition Binary MIME Type", "primary_resource": "Composition", "primary_fields": ["Composition.section.entry"], "secondary_resources": ["Binary"], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "Composition.date", "metric_date_description": "Composition date", "dimension_a": "composition_status", "dimension_a_description": "The composition status  (preliminary | final | amended | entered-in-error)", "dimension_b": "mime_type", "dimension_b_description": "The media type of the document ({MIME types} | NULL)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of Composition by Binary MIME Type", "short_description": "Composition Binary MIME Type", "primary_resource": "Composition", "primary_fields": ["Composition.section.entry"], "secondary_resources": ["Binary"], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "Composition.date", "metric_date_description": "Composition date", "dimension_a": "composition_status", "dimension_a_description": "The composition status  (preliminary | final | amended | entered-in-error)", "dimension_b": "mime_type", "dimension_b_description": "The media type of the document ({MIME types} | NULL)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of Composition by Binary MIME Type", "short_description": "Composition Binary MIME Type", "primary_resource": "Composition", "primary_fields": ["Composition.section.entry"], "secondary_resources": ["Binary"], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "Composition.date", "metric_date_description": "Composition date", "dimension_a": "composition_status", "dimension_a_description": "The composition status  (preliminary | final | amended | entered-in-error)", "dimension_b": "mime_type", "dimension_b_description": "The media type of the document ({MIME types} | NULL)"}}, "created_at": 1691506479.011626, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_binary_mimetype`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of Composition by Binary MIME Type\",\n      \"short_description\": \"Composition Binary MIME Type\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['Composition.section.entry'],\n      \"secondary_resources\": ['Binary'],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Data distribution\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition date\",\n      \"dimension_a\": \"composition_status\",\n      \"dimension_a_description\": \"The composition status  (preliminary | final | amended | entered-in-error)\",\n      \"dimension_b\": \"mime_type\",\n      \"dimension_b_description\": \"The media type of the document ({MIME types} | NULL)\",\n    }\n) -}}\n\n\n{%- set metric_sql -%}\n    SELECT\n      C.id,\n      {{- metric_common_dimensions(table_alias='C') }}\n      status as composition_status,\n      B.contentType AS mime_type\n    FROM {{ ref('Composition') }} AS C\n    LEFT JOIN UNNEST(C.section) AS CS\n    LEFT JOIN {{ ref('Binary') }} AS B\n      ON B.id = CS.entry[SAFE_OFFSET(0)].binaryId\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql\n) }}", "language": "sql", "refs": [{"name": "Composition", "package": null, "version": null}, {"name": "Binary", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_binary_mimetype.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n),  __dbt__cte__Binary as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_binary_mimetype' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}, {"id": "model.fhir_dbt_analytics.Binary", "sql": " __dbt__cte__Binary as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "servicerequest_reference_practitioner_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/servicerequest_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_practitioner_undefined.sql", "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_practitioner_undefined"], "alias": "servicerequest_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "3ac8bf9998ed0e115a40da8f140076796d8fcbb87109fda8d0c303df424f8dcc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that do not have a practitioner reference recorded", "short_description": "SerReq ref. Prac - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that do not have a practitioner reference recorded", "short_description": "SerReq ref. Prac - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that do not have a practitioner reference recorded", "short_description": "SerReq ref. Prac - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1691506479.018167, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`servicerequest_reference_practitioner_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"SerReq ref. Prac - unrecorded\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('requester', 'Practitioner') }} AS has_reference_value\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_practitioner_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "servicerequest_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/servicerequest_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_encounter_unresolved"], "alias": "servicerequest_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "2c546111430ea89a230bce3e10bce07070cf7ab26ee765674d3a506786208d1d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent encounter", "short_description": "SerReq ref. Enc - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent encounter", "short_description": "SerReq ref. Enc - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent encounter", "short_description": "SerReq ref. Enc - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1691506479.0257878, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`servicerequest_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that reference a non-existent encounter\",\n      \"short_description\": \"SerReq ref. Enc - non-exist\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.careteam_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "careteam_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/careteam_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.careteam_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_patient_undefined"], "alias": "careteam_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "0c4f246ccce94795be03b7c1af1f1869c25c49cf30879b16a20f01e283a890aa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that do not have a patient reference recorded", "short_description": "CareTeam ref. Patient - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that do not have a patient reference recorded", "short_description": "CareTeam ref. Patient - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that do not have a patient reference recorded", "short_description": "CareTeam ref. Patient - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1691506479.035309, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`careteam_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that do not have a patient reference recorded\",\n      \"short_description\": \"CareTeam ref. Patient - unrecorded\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "CareTeam", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.careteam_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "careteam_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/careteam_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/careteam_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.careteam_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "careteam_reference_encounter_undefined"], "alias": "careteam_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "ab0df0feeb60dcc59c07f5a8825eab5e87881e3ebae3657b7dfd3f30a5a8f37a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of CareTeam resources that do not have an encounter reference recorded", "short_description": "CareTeam ref. Enc - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of CareTeam resources that do not have an encounter reference recorded", "short_description": "CareTeam ref. Enc - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of CareTeam resources that do not have an encounter reference recorded", "short_description": "CareTeam ref. Enc - unrecorded", "primary_resource": "CareTeam", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "CareTeam.period.start", "metric_date_description": "Start of time period covered by care team", "dimension_a": "status", "dimension_a_description": "The status of the care team (proposed | active | suspended | inactive | entered-in-error)"}}, "created_at": 1691506479.042048, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`careteam_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of CareTeam resources that do not have an encounter reference recorded\",\n      \"short_description\": \"CareTeam ref. Enc - unrecorded\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"CareTeam.period.start\",\n      \"metric_date_description\": \"Start of time period covered by care team\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ get_column_or_default('status') }} AS status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('CareTeam') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "CareTeam", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/careteam_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'careteam_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.observation_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "observation_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/observation_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/observation_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.observation_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_encounter_unresolved"], "alias": "observation_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "abf0f1edc5c71e510985c4faa90e69de579bc27acf4aed558555bda20ea26d1b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that reference a non-existent encounter", "short_description": "Obs ref. Enc - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that reference a non-existent encounter", "short_description": "Obs ref. Enc - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that reference a non-existent encounter", "short_description": "Obs ref. Enc - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1691506479.048756, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`observation_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that reference a non-existent encounter\",\n      \"short_description\": \"Obs ref. Enc - non-exist\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_reference_binary_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_reference_binary_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_reference_binary_undefined.sql", "original_file_path": "models/metrics/data_quality/composition_reference_binary_undefined.sql", "unique_id": "model.fhir_dbt_analytics.composition_reference_binary_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_binary_undefined"], "alias": "composition_reference_binary_undefined", "checksum": {"name": "sha256", "checksum": "16f6cd7109a967035f06e780aa73ae24cd87bb2fea2433ca0bdfd3db4ee42ad8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that do not have a binary reference recorded", "short_description": "Comp ref. Binary - unrecorded", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that do not have a binary reference recorded", "short_description": "Comp ref. Binary - unrecorded", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that do not have a binary reference recorded", "short_description": "Comp ref. Binary - unrecorded", "primary_resource": "Composition", "primary_fields": ["section.entry.binaryId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506479.0560699, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_reference_binary_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that do not have a binary reference recorded\",\n      \"short_description\": \"Comp ref. Binary - unrecorded\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['section.entry.binaryId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest_multiple([\n          array_config(\"C.section\", \"CS\"),\n          array_config(\"CS.entry\", \"CSE\")])) }}\n        WHERE CSE.binaryid IS NOT NULL\n        AND CSE.binaryid <> ''\n      ) AS has_reference_value\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.array_config", "macro.fhir_dbt_analytics.unnest_multiple", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_binary_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_binary_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.condition_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "condition_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/condition_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/condition_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.condition_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_reference_encounter_unresolved"], "alias": "condition_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "04d986818d0d1d62dde93ed04345b3498f9141b6dd03aab24601afb2c5fcb094"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Condition resources that reference a non-existent encounter", "short_description": "Cond ref. Enc - non-exist", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Condition resources that reference a non-existent encounter", "short_description": "Cond ref. Enc - non-exist", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Condition resources that reference a non-existent encounter", "short_description": "Cond ref. Enc - non-exist", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1691506479.062907, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`condition_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Condition resources that reference a non-existent encounter\",\n      \"short_description\": \"Cond ref. Enc - non-exist\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('Condition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "Condition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_count.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_count.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_count"], "alias": "diagnosticreport_count", "checksum": {"name": "sha256", "checksum": "8b9c26b3be9517caf772b1a7e7e5fa88f91576789cafd9e55129bdaa7c277a7f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid DiagnosticReport resources", "short_description": "DiagnosticReport resources", "primary_resource": "DiagnosticReport", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid DiagnosticReport resources", "short_description": "DiagnosticReport resources", "primary_resource": "DiagnosticReport", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid DiagnosticReport resources", "short_description": "DiagnosticReport resources", "primary_resource": "DiagnosticReport", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506479.109998, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid DiagnosticReport resources\",\n      \"short_description\": \"DiagnosticReport resources\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      id,\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category\n    FROM {{ ref('DiagnosticReport') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "observation_reference_servicerequest_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/observation_reference_servicerequest_undefined.sql", "original_file_path": "models/metrics/data_quality/observation_reference_servicerequest_undefined.sql", "unique_id": "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_servicerequest_undefined"], "alias": "observation_reference_servicerequest_undefined", "checksum": {"name": "sha256", "checksum": "a5da05cc7845bdbf076f2d82950cd296e25afdc0e3f74ea483bf804b434ce732"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that do not have a service request reference recorded", "short_description": "Obs ref. SerReq - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that do not have a service request reference recorded", "short_description": "Obs ref. SerReq - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that do not have a service request reference recorded", "short_description": "Obs ref. SerReq - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1691506479.116992, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`observation_reference_servicerequest_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that do not have a service request reference recorded\",\n      \"short_description\": \"Obs ref. SerReq - unrecorded\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": [\n          'encounter.encounterId', \n          'basedOn.serviceRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_servicerequest_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_servicerequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_patients_with_medicationadministration_daily": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_patients_with_medicationadministration_daily", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_patients_with_medicationadministration_daily.sql", "original_file_path": "models/metrics/data_quality/active_patients_with_medicationadministration_daily.sql", "unique_id": "model.fhir_dbt_analytics.active_patients_with_medicationadministration_daily", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_patients_with_medicationadministration_daily"], "alias": "active_patients_with_medicationadministration_daily", "checksum": {"name": "sha256", "checksum": "8d31a85f4da50f21cb24be881de627f434f7835e1dc357df1702bcd89726f7cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of active patients with at least one medication administration that day", "short_description": "Patients with MedAdmin", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId", "context.encounterId", "effective.period.start"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of active patients with at least one medication administration that day", "short_description": "Patients with MedAdmin", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId", "context.encounterId", "effective.period.start"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of active patients with at least one medication administration that day", "short_description": "Patients with MedAdmin", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId", "context.encounterId", "effective.period.start"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}}, "created_at": 1691506479.1234949, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_patients_with_medicationadministration_daily`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of active patients with at least one medication administration that day\",\n      \"short_description\": \"Patients with MedAdmin\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['subject.patientId', 'context.encounterId', 'effective.period.start'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Active patients with resource\",\n      \"dimension_a\": \"encounter_class_group\",\n      \"dimension_a_description\": \"The latest class of the encounter grouped into ambulatory or non-ambulatory\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      ActiveEncounters.*,\n      M.subject.patientId AS medicationddministration_patientid\n    FROM ({{ active_encounters() }}) AS ActiveEncounters\n    LEFT JOIN {{ ref('MedicationAdministration') }} AS M\n      ON ActiveEncounters.id = M.context.encounterId\n      AND ActiveEncounters.metric_date = M.metric_date\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT medicationddministration_patientid)',\n    denominator = 'COUNT(DISTINCT patientId)'\n) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_patients_with_medicationadministration_daily.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_patients_with_medicationadministration_daily' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_reference_practitioner_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/composition_reference_practitioner_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_practitioner_unresolved"], "alias": "composition_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "a872316c2e404bf5518259e9593e33906c00e8a10fa04c92c537bf83c93a3f58"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that reference a non-existent practitioner", "short_description": "Comp ref. Prac - non-exist", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that reference a non-existent practitioner", "short_description": "Comp ref. Prac - non-exist", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that reference a non-existent practitioner", "short_description": "Comp ref. Prac - non-exist", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506479.131595, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_reference_practitioner_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that reference a non-existent practitioner\",\n      \"short_description\": \"Comp ref. Prac - non-exist\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['author.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('author', 'Practitioner') }} AS has_reference_value,\n      {{ reference_resolves('author', 'Practitioner') }} AS reference_resolves\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Practitioner", "package": null, "version": null}, {"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_practitioner_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_patient_unresolved"], "alias": "medicationadministration_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "90768611e39e2287f65f5904119c479eb3a1eef0af447913a95619af9f3979bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent patient", "short_description": "MedAdmin ref. Patient - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent patient", "short_description": "MedAdmin ref. Patient - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent patient", "short_description": "MedAdmin ref. Patient - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1691506479.139777, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that reference a non-existent patient\",\n      \"short_description\": \"MedAdmin ref. Patient - non-exist\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_observation_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_observation_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_observation_undefined.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_observation_undefined"], "alias": "diagnosticreport_reference_observation_undefined", "checksum": {"name": "sha256", "checksum": "f0e92bb71b47122ef6db499f0e9fc8e90e38cff0714694f084470cdc69b6c72f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have an observation reference recorded", "short_description": "DiagRep ref. Obs - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have an observation reference recorded", "short_description": "DiagRep ref. Obs - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have an observation reference recorded", "short_description": "DiagRep ref. Obs - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506479.146832, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_observation_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have an observation reference recorded\",\n      \"short_description\": \"DiagRep ref. Obs - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['result.observationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('result', 'Observation') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_observation_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_observation_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "procedure_reference_practitioner_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/procedure_reference_practitioner_unresolved.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_practitioner_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_practitioner_unresolved"], "alias": "procedure_reference_practitioner_unresolved", "checksum": {"name": "sha256", "checksum": "61bb8f9caabf6c0a7c7ed002adb5f9f16e9b337b44d0695f5bd19317ad6e7dbe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent practitioner", "short_description": "LDA Proc ref. Prac - non-exist", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent practitioner", "short_description": "LDA Proc ref. Prac - non-exist", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that reference a non-existent practitioner", "short_description": "LDA Proc ref. Prac - non-exist", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": ["Practitioner"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1691506479.1547132, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`procedure_reference_practitioner_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that reference a non-existent practitioner\",\n      \"short_description\": \"LDA Proc ref. Prac - non-exist\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['performer.actor.practitionerId'],\n      \"secondary_resources\": ['Practitioner'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"P.performer\", \"PP\")) }}\n        WHERE PP.actor.practitionerId IS NOT NULL\n        AND PP.actor.practitionerId <> ''\n      ) AS has_reference_practitioner,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"P.performer\", \"PP\")) }}\n        JOIN {{ ref('Practitioner') }} AS P\n          ON PP.actor.practitionerId = P.id\n      ) AS reference_practitioner_resolved\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_practitioner - reference_practitioner_resolved)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Practitioner", "package": null, "version": null}, {"name": "Procedure", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_practitioner_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Practitioner as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\n),  __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_practitioner_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Practitioner", "sql": " __dbt__cte__Practitioner as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\n)"}, {"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.questionnaireresponse_linkid_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "questionnaireresponse_linkid_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/questionnaireresponse_linkid_unresolved.sql", "original_file_path": "models/metrics/data_quality/questionnaireresponse_linkid_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.questionnaireresponse_linkid_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "questionnaireresponse_linkid_unresolved"], "alias": "questionnaireresponse_linkid_unresolved", "checksum": {"name": "sha256", "checksum": "2c546111430ea89a230bce3e10bce07070cf7ab26ee765674d3a506786208d1d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent encounter", "short_description": "SerReq ref. Enc - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent encounter", "short_description": "SerReq ref. Enc - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent encounter", "short_description": "SerReq ref. Enc - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1691506479.162356, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`questionnaireresponse_linkid_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that reference a non-existent encounter\",\n      \"short_description\": \"SerReq ref. Enc - non-exist\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/questionnaireresponse_linkid_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'questionnaireresponse_linkid_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_encounter_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_encounter_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_encounter_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_encounter_unresolved"], "alias": "diagnosticreport_reference_encounter_unresolved", "checksum": {"name": "sha256", "checksum": "3cd41a395c9bce6dad57961ee3437edb592177257bff99a69da932234a75343e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent encounter", "short_description": "DiagRep ref. Enc - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent encounter", "short_description": "DiagRep ref. Enc - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent encounter", "short_description": "DiagRep ref. Enc - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["encounter.encounterId"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506479.171956, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_encounter_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent encounter\",\n      \"short_description\": \"DiagRep ref. Enc - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value,\n      {{ reference_resolves('encounter', 'Encounter') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_encounter_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_encounter_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.servicerequest_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "servicerequest_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/servicerequest_count.sql", "original_file_path": "models/metrics/data_quality/servicerequest_count.sql", "unique_id": "model.fhir_dbt_analytics.servicerequest_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_count"], "alias": "servicerequest_count", "checksum": {"name": "sha256", "checksum": "abd2c2fe1a081c7294467e16ba4785fdb7acbf975c7110d26cb5dcf6bd036537"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid ServiceRequest resources", "short_description": "ServiceRequest resources", "primary_resource": "ServiceRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid ServiceRequest resources", "short_description": "ServiceRequest resources", "primary_resource": "ServiceRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid ServiceRequest resources", "short_description": "ServiceRequest resources", "primary_resource": "ServiceRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the service request"}}, "created_at": 1691506479.182176, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`servicerequest_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid ServiceRequest resources\",\n      \"short_description\": \"ServiceRequest resources\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"intent\",\n      \"dimension_b_description\": \"The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept('category', 'http://snomed.info/sct', index = 0, return_field='display') }} AS category\n    FROM {{ ref('ServiceRequest') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/composition_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.composition_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_patient_undefined"], "alias": "composition_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "2883697f4b42c75d4a615a37b2b39b943ada92708784210fb214c757c7eedb7d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that do not have a patient reference recorded", "short_description": "Comp ref. Patient - unrecorded", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that do not have a patient reference recorded", "short_description": "Comp ref. Patient - unrecorded", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that do not have a patient reference recorded", "short_description": "Comp ref. Patient - unrecorded", "primary_resource": "Composition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506479.1900969, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that do not have a patient reference recorded\",\n      \"short_description\": \"Comp ref. Patient - unrecorded\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_dosage_route": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_dosage_route", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_dosage_route.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_dosage_route.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_dosage_route", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_dosage_route"], "alias": "medicationadministration_dosage_route", "checksum": {"name": "sha256", "checksum": "fd5df0c6868b6cfaffb59e0ac8a8cccbe475eb75e3da2502a9e47134a5f953c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication administrations with dosage route recorded", "short_description": "MedAdmin route recorded", "primary_resource": "MedicationAdministration", "primary_fields": ["dosage.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication administrations with dosage route recorded", "short_description": "MedAdmin route recorded", "primary_resource": "MedicationAdministration", "primary_fields": ["dosage.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication administrations with dosage route recorded", "short_description": "MedAdmin route recorded", "primary_resource": "MedicationAdministration", "primary_fields": ["dosage.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)"}}, "created_at": 1691506479.197237, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_dosage_route`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication administrations with dosage route recorded\",\n      \"short_description\": \"MedAdmin route recorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": ['dosage.route'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF(dosage.route IS NOT NULL, 1, 0) AS has_dosage_route\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_route)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_dosage_route.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_dosage_route' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.documentreference_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "documentreference_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/documentreference_count.sql", "original_file_path": "models/metrics/data_quality/documentreference_count.sql", "unique_id": "model.fhir_dbt_analytics.documentreference_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "documentreference_count"], "alias": "documentreference_count", "checksum": {"name": "sha256", "checksum": "72bf56df37cd10f157ff827a53d5d21de20aa9ab0a62f8c00cd13d9e66e07ce8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid DocumentReference resources", "short_description": "DocumentReference resources", "primary_resource": "DocumentReference", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid DocumentReference resources", "short_description": "DocumentReference resources", "primary_resource": "DocumentReference", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid DocumentReference resources", "short_description": "DocumentReference resources", "primary_resource": "DocumentReference", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}}, "created_at": 1691506479.203359, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`documentreference_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid DocumentReference resources\",\n      \"short_description\": \"DocumentReference resources\",\n      \"primary_resource\": \"DocumentReference\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"DocumentReference.date\",\n      \"metric_date_description\": \"Document reference date\",\n      \"dimension_a\": \"document_status\",\n      \"dimension_a_description\": \"The document reference status  (current | superseded | entered-in-error)\",\n      \"dimension_b\": \"format\",\n      \"dimension_b_description\": \"The format of the document referenced (scanned | NULL)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as document_status,\n      {%- if column_exists('content.format.code') %}\n      {{ safe_offset(\"content\", 0) }}.format.code AS format\n      {%- else %}\n      NULL AS format\n      {%- endif %}\n    FROM {{ ref('DocumentReference') }} AS DR\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "DocumentReference", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/documentreference_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'documentreference_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_dosage_route": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_dosage_route", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_dosage_route.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_dosage_route.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_dosage_route", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_dosage_route"], "alias": "medicationstatement_dosage_route", "checksum": {"name": "sha256", "checksum": "ba7754abe8c04404902845f3597b9d7b1948009a630d25ed815bf83da7d3b52d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication statements with dosage route recorded", "short_description": "MedState route recorded", "primary_resource": "MedicationStatement", "primary_fields": ["dosageInstruction.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication statements with dosage route recorded", "short_description": "MedState route recorded", "primary_resource": "MedicationStatement", "primary_fields": ["dosageInstruction.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication statements with dosage route recorded", "short_description": "MedState route recorded", "primary_resource": "MedicationStatement", "primary_fields": ["dosageInstruction.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date"}}, "created_at": 1691506479.210088, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_dosage_route`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication statements with dosage route recorded\",\n      \"short_description\": \"MedState route recorded\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['dosageInstruction.route'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF({{ safe_offset(\"dosage\", 0) }}.route IS NOT NULL, 1, 0) AS has_dosage_route\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_route)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_dosage_route.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_dosage_route' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_reference_medication_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_reference_medication_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_medication_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_medication_unresolved"], "alias": "medicationadministration_reference_medication_unresolved", "checksum": {"name": "sha256", "checksum": "a78e87254112dd82e8a09ea5f3bd42f17f2c206ffcf5e970c33ce40a99877012"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication", "short_description": "MedAdmin ref. Med - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication", "short_description": "MedAdmin ref. Med - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that reference a non-existent medication", "short_description": "MedAdmin ref. Med - non-exist", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": ["Medication"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1691506479.217577, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_reference_medication_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that reference a non-existent medication\",\n      \"short_description\": \"MedAdmin ref. Med - non-exist\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": [\n          'context.encounterId', \n          'medication.reference.medicationId'],\n      \"secondary_resources\": ['Medication'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value,\n      {{ reference_resolves('medication.reference', 'Medication') }} AS reference_resolves\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Medication", "package": null, "version": null}, {"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_medication_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_medication_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.composition_reference_practitioner_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "composition_reference_practitioner_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/composition_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/composition_reference_practitioner_undefined.sql", "unique_id": "model.fhir_dbt_analytics.composition_reference_practitioner_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "composition_reference_practitioner_undefined"], "alias": "composition_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "02e45a27a00111cc6a207795c3577d298d9822950525deba680819feb8f154a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Composition resources that do not have a practitioner reference recorded", "short_description": "Comp ref. Prac - unrecorded", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Composition resources that do not have a practitioner reference recorded", "short_description": "Comp ref. Prac - unrecorded", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Composition resources that do not have a practitioner reference recorded", "short_description": "Comp ref. Prac - unrecorded", "primary_resource": "Composition", "primary_fields": ["author.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Composition.date", "metric_date_description": "Composition latest edit date", "dimension_a": "status", "dimension_a_description": "The status of the composition (preliminary | final | amended | entered-in-error)"}}, "created_at": 1691506479.224745, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`composition_reference_practitioner_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Composition resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"Comp ref. Prac - unrecorded\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['author.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Composition.date\",\n      \"metric_date_description\": \"Composition latest edit date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the composition (preliminary | final | amended | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('author', 'Practitioner') }} AS has_reference_value\n    FROM {{ ref('Composition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/composition_reference_practitioner_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'composition_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_dosage_dose_rate": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_dosage_dose_rate", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_dosage_dose_rate.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_dosage_dose_rate.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_dosage_dose_rate", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_dosage_dose_rate"], "alias": "medicationstatement_dosage_dose_rate", "checksum": {"name": "sha256", "checksum": "78edf844db7decf210ddd6874dfe98ff6418a3395839de07e842f774b1f1e891"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication statements with dosage dose and rate recorded", "short_description": "MedState dose and rate recorded", "primary_resource": "MedicationStatement", "primary_fields": ["dosageInstruction.doseAndRate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication statements with dosage dose and rate recorded", "short_description": "MedState dose and rate recorded", "primary_resource": "MedicationStatement", "primary_fields": ["dosageInstruction.doseAndRate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication statements with dosage dose and rate recorded", "short_description": "MedState dose and rate recorded", "primary_resource": "MedicationStatement", "primary_fields": ["dosageInstruction.doseAndRate"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date"}}, "created_at": 1691506479.231307, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_dosage_dose_rate`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication statements with dosage dose and rate recorded\",\n      \"short_description\": \"MedState dose and rate recorded\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['dosageInstruction.doseAndRate'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF({{ safe_offset(\"dosage\", 0) }}.doseAndRate IS NOT NULL, 1, 0) AS has_dosage_dose_rate\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_dose_rate)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_dosage_dose_rate.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_dosage_dose_rate' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_patient_undefined"], "alias": "diagnosticreport_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "a896f24e5d735cbb17dc92e8ebc4b72fda6fa59f109624e4a738465dde514da3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that do not have a patient reference recorded", "short_description": "DiagRep ref. Patient - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that do not have a patient reference recorded", "short_description": "DiagRep ref. Patient - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that do not have a patient reference recorded", "short_description": "DiagRep ref. Patient - unrecorded", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506479.238114, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that do not have a patient reference recorded\",\n      \"short_description\": \"DiagRep ref. Patient - unrecorded\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('DiagnosticReport') }} AS DiagnosticReport\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_patient_undefined"], "alias": "medicationrequest_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "f4c42a11294b43d26ae4ac330d91bbef08b435474874ca27850e4aec395bdde0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have a patient reference recorded", "short_description": "MedReq ref. Patient - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have a patient reference recorded", "short_description": "MedReq ref. Patient - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have a patient reference recorded", "short_description": "MedReq ref. Patient - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506479.246283, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have a patient reference recorded\",\n      \"short_description\": \"MedReq ref. Patient - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_observation_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_observation_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_observation_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_observation_unresolved"], "alias": "diagnosticreport_reference_observation_unresolved", "checksum": {"name": "sha256", "checksum": "30b82427419a171f11bfcab4cd0fdaae49adcd5f86f3ccd67a14d15d9198690b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent observation", "short_description": "DiagRep ref. Obs - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": ["Observation"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent observation", "short_description": "DiagRep ref. Obs - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": ["Observation"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent observation", "short_description": "DiagRep ref. Obs - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["result.observationId"], "secondary_resources": ["Observation"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506479.257041, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_observation_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent observation\",\n      \"short_description\": \"DiagRep ref. Obs - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['result.observationId'],\n      \"secondary_resources\": ['Observation'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('result', 'Observation') }} AS has_reference_value,\n      {{ reference_resolves('result', 'Observation') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Observation", "package": null, "version": null}, {"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_observation_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_observation_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_dosage_route": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_dosage_route", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_dosage_route.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_dosage_route.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_dosage_route", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_dosage_route"], "alias": "medicationrequest_dosage_route", "checksum": {"name": "sha256", "checksum": "326ca6c0e25fb7ea139a1d0200e081ea2fb0f9a6b91b279fe162761ecfc6430b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication requests with dosage route recorded", "short_description": "MedReq route recorded", "primary_resource": "MedicationRequest", "primary_fields": ["dosageInstruction.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication requests with dosage route recorded", "short_description": "MedReq route recorded", "primary_resource": "MedicationRequest", "primary_fields": ["dosageInstruction.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication requests with dosage route recorded", "short_description": "MedReq route recorded", "primary_resource": "MedicationRequest", "primary_fields": ["dosageInstruction.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date"}}, "created_at": 1691506479.265957, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_dosage_route`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication requests with dosage route recorded\",\n      \"short_description\": \"MedReq route recorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['dosageInstruction.route'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF({{ safe_offset(\"dosageInstruction\", 0) }}.route IS NOT NULL, 1, 0) AS has_dosage_route\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_route)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_dosage_route.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_dosage_route' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationdispense_dosage_route": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationdispense_dosage_route", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationdispense_dosage_route.sql", "original_file_path": "models/metrics/data_quality/medicationdispense_dosage_route.sql", "unique_id": "model.fhir_dbt_analytics.medicationdispense_dosage_route", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationdispense_dosage_route"], "alias": "medicationdispense_dosage_route", "checksum": {"name": "sha256", "checksum": "8ed217d3223f377a80c21823496ab7c2d019c95a0fc7cc36ca72ee0fb0653aec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication dispenses with dosage route recorded", "short_description": "MedDisp route recorded", "primary_resource": "MedicationDispense", "primary_fields": ["dosageInstruction.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationDispense.whenPrepared", "metric_date_description": "Date when the dispensed medication was packaged and reviewed"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication dispenses with dosage route recorded", "short_description": "MedDisp route recorded", "primary_resource": "MedicationDispense", "primary_fields": ["dosageInstruction.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationDispense.whenPrepared", "metric_date_description": "Date when the dispensed medication was packaged and reviewed"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication dispenses with dosage route recorded", "short_description": "MedDisp route recorded", "primary_resource": "MedicationDispense", "primary_fields": ["dosageInstruction.route"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationDispense.whenPrepared", "metric_date_description": "Date when the dispensed medication was packaged and reviewed"}}, "created_at": 1691506479.2724118, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationdispense_dosage_route`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication dispenses with dosage route recorded\",\n      \"short_description\": \"MedDisp route recorded\",\n      \"primary_resource\": \"MedicationDispense\",\n      \"primary_fields\": ['dosageInstruction.route'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"MedicationDispense.whenPrepared\",\n      \"metric_date_description\": \"Date when the dispensed medication was packaged and reviewed\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF({{ safe_offset(\"dosageInstruction\", 0) }}.route IS NOT NULL, 1, 0) AS has_dosage_route\n    FROM {{ ref('MedicationDispense') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_route)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationDispense", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationdispense_dosage_route.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationDispense as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationdispense_dosage_route' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationDispense", "sql": " __dbt__cte__MedicationDispense as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "observation_reference_servicerequest_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/observation_reference_servicerequest_unresolved.sql", "original_file_path": "models/metrics/data_quality/observation_reference_servicerequest_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_servicerequest_unresolved"], "alias": "observation_reference_servicerequest_unresolved", "checksum": {"name": "sha256", "checksum": "4b77a620b34544399f3caf9076a0470de09a38ed367d50fc8ac9f454a164323b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that reference a non-existent service request", "short_description": "Obs ref. SerReq - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that reference a non-existent service request", "short_description": "Obs ref. SerReq - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that reference a non-existent service request", "short_description": "Obs ref. SerReq - non-exist", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId", "basedOn.serviceRequestId"], "secondary_resources": ["ServiceRequest"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1691506479.2791228, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`observation_reference_servicerequest_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that reference a non-existent service request\",\n      \"short_description\": \"Obs ref. SerReq - non-exist\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": [\n          'encounter.encounterId', \n          'basedOn.serviceRequestId'],\n      \"secondary_resources\": ['ServiceRequest'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value,\n      {{ reference_resolves('basedOn', 'ServiceRequest') }} AS reference_resolves\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "ServiceRequest", "package": null, "version": null}, {"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_servicerequest_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_servicerequest_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_with_conclusion": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_with_conclusion", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_with_conclusion.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_with_conclusion.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_with_conclusion", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_with_conclusion"], "alias": "diagnosticreport_with_conclusion", "checksum": {"name": "sha256", "checksum": "23b19a5e5c195a81b84c2ecfb98a56ef04f0890ac263e5a2f2cff652f285f3f0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that contain a non-empty conclusion", "short_description": "DR with conclusion", "primary_resource": "DiagnosticReport", "primary_fields": ["conclusion"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "issued", "metric_date_description": "DiagnosticReport issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that contain a non-empty conclusion", "short_description": "DR with conclusion", "primary_resource": "DiagnosticReport", "primary_fields": ["conclusion"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "issued", "metric_date_description": "DiagnosticReport issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that contain a non-empty conclusion", "short_description": "DR with conclusion", "primary_resource": "DiagnosticReport", "primary_fields": ["conclusion"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "issued", "metric_date_description": "DiagnosticReport issued date", "dimension_a": "status", "dimension_a_description": "The report status  (preliminary | final | amended | entered-in-error +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506479.286282, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_with_conclusion`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that contain a non-empty conclusion\",\n      \"short_description\": \"DR with conclusion\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['conclusion'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"issued\",\n      \"metric_date_description\": \"DiagnosticReport issued date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The report status  (preliminary | final | amended | entered-in-error +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as status,\n      COALESCE({{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }},\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct,',\n        index = get_source_specific_category_index()\n      ) }},\n       {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/v2-0074,',\n        index = get_source_specific_category_index()\n      ) }},\n       {{ code_from_codeableconcept(\n        'category',\n        'http://loinc.org,',\n        index = get_source_specific_category_index()\n      ) }}, 'Undefined')\n       AS category,\n      {{ has_value('conclusion') }} AS has_conclusion\n    FROM {{ ref('DiagnosticReport') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(CAST(has_conclusion AS '~type_long()~'))',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_value", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_with_conclusion.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_with_conclusion' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_dosage_instruction": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_dosage_instruction", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_dosage_instruction.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_dosage_instruction.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_dosage_instruction", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_dosage_instruction"], "alias": "medicationstatement_dosage_instruction", "checksum": {"name": "sha256", "checksum": "b5e441fb2573067b09a1266e16eeba8de30bbc94430f43a11f8bbb4bcc4e0fe3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication statements with dosage instruction text recorded", "short_description": "MedState instruction recorded", "primary_resource": "MedicationStatement", "primary_fields": ["dosageInstruction.patientInstruction", "dosageInstruction.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication statements with dosage instruction text recorded", "short_description": "MedState instruction recorded", "primary_resource": "MedicationStatement", "primary_fields": ["dosageInstruction.patientInstruction", "dosageInstruction.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication statements with dosage instruction text recorded", "short_description": "MedState instruction recorded", "primary_resource": "MedicationStatement", "primary_fields": ["dosageInstruction.patientInstruction", "dosageInstruction.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date"}}, "created_at": 1691506479.298094, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_dosage_instruction`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication statements with dosage instruction text recorded\",\n      \"short_description\": \"MedState instruction recorded\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['dosageInstruction.patientInstruction', 'dosageInstruction.text'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF(\n        NULLIF({{ safe_offset(\"dosage\", 0) }}.patientInstruction, '') IS NOT NULL\n          OR NULLIF({{ safe_offset(\"dosage\", 0) }}.text, '') IS NOT NULL,\n        1,\n        0) AS has_dosage_text\n    FROM {{ ref('MedicationStatement') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_text)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_dosage_instruction.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_dosage_instruction' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.procedure_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "procedure_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/procedure_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.procedure_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_encounter_undefined"], "alias": "procedure_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "e441d08f61e07f6bdf126e934d393c2adaaf39de246128c1ef0d9a9a0b864cda"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that do not have an encounter reference recorded", "short_description": "LDA Proc ref. Enc - unrecorded", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that do not have an encounter reference recorded", "short_description": "LDA Proc ref. Enc - unrecorded", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that do not have an encounter reference recorded", "short_description": "LDA Proc ref. Enc - unrecorded", "primary_resource": "Procedure", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1691506479.3046882, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`procedure_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that do not have an encounter reference recorded\",\n      \"short_description\": \"LDA Proc ref. Enc - unrecorded\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Procedure", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.condition_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "condition_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/condition_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/condition_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.condition_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_reference_encounter_undefined"], "alias": "condition_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "a7deee8a14332e59e8abf5c5055fd9b62a2e25a9c07b297ccc81028ecebfc450"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Condition resources that do not have an encounter reference recorded", "short_description": "Cond ref. Enc - unrecorded", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Condition resources that do not have an encounter reference recorded", "short_description": "Cond ref. Enc - unrecorded", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Condition resources that do not have an encounter reference recorded", "short_description": "Cond ref. Enc - unrecorded", "primary_resource": "Condition", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1691506479.311539, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`condition_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Condition resources that do not have an encounter reference recorded\",\n      \"short_description\": \"Cond ref. Enc - unrecorded\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('Condition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Condition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.observation_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "observation_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/observation_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/observation_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.observation_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_patient_unresolved"], "alias": "observation_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "78097cc7106b06862a9a9b4319d06c82cdb1bfd4ec6e78a6834459d76c0b62b8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that reference a non-existent patient", "short_description": "Obs ref. Patient - non-exist", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that reference a non-existent patient", "short_description": "Obs ref. Patient - non-exist", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that reference a non-existent patient", "short_description": "Obs ref. Patient - non-exist", "primary_resource": "Observation", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1691506479.3202791, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`observation_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that reference a non-existent patient\",\n      \"short_description\": \"Obs ref. Patient - non-exist\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.observation_reference_encounter_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "observation_reference_encounter_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/observation_reference_encounter_undefined.sql", "original_file_path": "models/metrics/data_quality/observation_reference_encounter_undefined.sql", "unique_id": "model.fhir_dbt_analytics.observation_reference_encounter_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_reference_encounter_undefined"], "alias": "observation_reference_encounter_undefined", "checksum": {"name": "sha256", "checksum": "1842349248100c70b1d4a4528bb31bc0947619039f30b3b0f18f8c3a67603b9f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Observation resources that do not have an encounter reference recorded", "short_description": "Obs ref. Enc - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Observation resources that do not have an encounter reference recorded", "short_description": "Obs ref. Enc - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Observation resources that do not have an encounter reference recorded", "short_description": "Obs ref. Enc - unrecorded", "primary_resource": "Observation", "primary_fields": ["encounter.encounterId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1691506479.327708, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`observation_reference_encounter_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Observation resources that do not have an encounter reference recorded\",\n      \"short_description\": \"Obs ref. Enc - unrecorded\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['encounter.encounterId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('encounter', 'Encounter') }} AS has_reference_value\n    FROM {{ ref('Observation') }} AS O\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_reference_encounter_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_reference_encounter_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_patients_with_careteam_daily": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_patients_with_careteam_daily", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_patients_with_careteam_daily.sql", "original_file_path": "models/metrics/data_quality/active_patients_with_careteam_daily.sql", "unique_id": "model.fhir_dbt_analytics.active_patients_with_careteam_daily", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_patients_with_careteam_daily"], "alias": "active_patients_with_careteam_daily", "checksum": {"name": "sha256", "checksum": "fabfdab4b432108eec7d594c88c18a96b181b044a1d2eaf825f3ec4c126d2138"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of active patients with at least one assigned care team that day", "short_description": "Patients with CareTeam", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId", "encounter.encounterId", "period.start", "period.end"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of active patients with at least one assigned care team that day", "short_description": "Patients with CareTeam", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId", "encounter.encounterId", "period.start", "period.end"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of active patients with at least one assigned care team that day", "short_description": "Patients with CareTeam", "primary_resource": "CareTeam", "primary_fields": ["subject.patientId", "encounter.encounterId", "period.start", "period.end"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}}, "created_at": 1691506479.335161, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_patients_with_careteam_daily`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of active patients with at least one assigned care team that day\",\n      \"short_description\": \"Patients with CareTeam\",\n      \"primary_resource\": \"CareTeam\",\n      \"primary_fields\": ['subject.patientId', 'encounter.encounterId', 'period.start', 'period.end'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Active patients with resource\",\n      \"dimension_a\": \"encounter_class_group\",\n      \"dimension_a_description\": \"The latest class of the encounter grouped into ambulatory or non-ambulatory\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      ActiveEncounters.*,\n      C.subject.patientId AS careteam_patientid\n    FROM ({{ active_encounters() }}) AS ActiveEncounters\n    LEFT JOIN {{ ref('CareTeam') }} AS C\n      ON ActiveEncounters.id = C.encounter.encounterId\n      AND ActiveEncounters.metric_date >= {{ metric_date(['C.period.start']) }}\n      AND (\n        ActiveEncounters.metric_date <= {{ metric_date(['C.period.end']) }}\n        OR C.period.end IS NULL\n        OR C.period.end = ''\n      )\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT careteam_patientid)',\n    denominator = 'COUNT(DISTINCT patientId)'\n) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "CareTeam", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.metric_date", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_patients_with_careteam_daily.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_patients_with_careteam_daily' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.CareTeam", "sql": " __dbt__cte__CareTeam as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationstatement_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationstatement_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationstatement_count.sql", "original_file_path": "models/metrics/data_quality/medicationstatement_count.sql", "unique_id": "model.fhir_dbt_analytics.medicationstatement_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationstatement_count"], "alias": "medicationstatement_count", "checksum": {"name": "sha256", "checksum": "e83a0edd7a40a29b51a1a7ba5bd4b8235b2c5de6ec78bdd8cca57ffe93ef0ad4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid MedicationStatement resources", "short_description": "MedicationStatement resources", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid MedicationStatement resources", "short_description": "MedicationStatement resources", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid MedicationStatement resources", "short_description": "MedicationStatement resources", "primary_resource": "MedicationStatement", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationStatement.dateAsserted", "metric_date_description": "Medication statement asserted date", "dimension_a": "status", "dimension_a_description": "The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)"}}, "created_at": 1691506479.344959, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationstatement_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid MedicationStatement resources\",\n      \"short_description\": \"MedicationStatement resources\",\n      \"primary_resource\": \"MedicationStatement\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"MedicationStatement.dateAsserted\",\n      \"metric_date_description\": \"Medication statement asserted date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('MedicationStatement') }} M\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "MedicationStatement", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationstatement_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationstatement_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationStatement", "sql": " __dbt__cte__MedicationStatement as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "servicerequest_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/servicerequest_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_patient_unresolved"], "alias": "servicerequest_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "549be2887f5ba1686b19562bbfabcb2fab108b96cb8b6c5c1dd65eb8c1007c8a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent patient", "short_description": "SerReq ref. Patient - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent patient", "short_description": "SerReq ref. Patient - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that reference a non-existent patient", "short_description": "SerReq ref. Patient - non-exist", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1691506479.3508952, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`servicerequest_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that reference a non-existent patient\",\n      \"short_description\": \"SerReq ref. Patient - non-exist\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "procedure_reference_practitioner_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/procedure_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/procedure_reference_practitioner_undefined.sql", "unique_id": "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "procedure_reference_practitioner_undefined"], "alias": "procedure_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "a14fc10d55ccaedc981ede932a869ca264522252333995d950764f1a9cb096e5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of LDA Procedure resources that do not have a practitioner reference recorded", "short_description": "LDA Proc ref. Prac - unrecorded", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of LDA Procedure resources that do not have a practitioner reference recorded", "short_description": "LDA Proc ref. Prac - unrecorded", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of LDA Procedure resources that do not have a practitioner reference recorded", "short_description": "LDA Proc ref. Prac - unrecorded", "primary_resource": "Procedure", "primary_fields": ["performer.actor.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)", "metric_date_description": "Procedure performed period start date (if absent, procedure performed date)", "dimension_a": "status", "dimension_a_description": "The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)"}}, "created_at": 1691506479.3594298, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`procedure_reference_practitioner_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of LDA Procedure resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"LDA Proc ref. Prac - unrecorded\",\n      \"primary_resource\": \"Procedure\",\n      \"primary_fields\": ['performer.actor.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\",\n      \"metric_date_description\": \"Procedure performed period start date (if absent, procedure performed date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(unnest(\"P.performer\", \"PP\")) }}\n        WHERE PP.actor.practitionerId IS NOT NULL\n        AND PP.actor.practitionerId <> ''\n      ) AS has_reference_practitioner\n    FROM {{ ref('Procedure') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_practitioner)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Procedure", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/procedure_reference_practitioner_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'procedure_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Procedure", "sql": " __dbt__cte__Procedure as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_reference_medication_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_reference_medication_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_medication_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_medication_undefined"], "alias": "medicationadministration_reference_medication_undefined", "checksum": {"name": "sha256", "checksum": "f2104fed007cb38947c9fc0e15d17956305afa0b97f503c0588a424b6ec8110e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication reference recorded", "short_description": "MedAdmin ref. Med - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication reference recorded", "short_description": "MedAdmin ref. Med - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication reference recorded", "short_description": "MedAdmin ref. Med - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1691506479.365964, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_reference_medication_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that do not have an medication reference recorded\",\n      \"short_description\": \"MedAdmin ref. Med - unrecorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": [\n          'context.encounterId', \n          'medication.reference.medicationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_medication_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_medication_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.documentreference_mimetype": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "documentreference_mimetype", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/documentreference_mimetype.sql", "original_file_path": "models/metrics/data_quality/documentreference_mimetype.sql", "unique_id": "model.fhir_dbt_analytics.documentreference_mimetype", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "documentreference_mimetype"], "alias": "documentreference_mimetype", "checksum": {"name": "sha256", "checksum": "f4ea40066face3a28d5c27a1142098802f3598eda31f8fa9907ddfdb376d0422"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of DocumentReference by MIME Type", "short_description": "DocRef MIME Type", "primary_resource": "DocumentReference", "primary_fields": ["content"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "mime_type", "dimension_b_description": "The media type of the binary (text/html | plain/text | application/rtf)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of DocumentReference by MIME Type", "short_description": "DocRef MIME Type", "primary_resource": "DocumentReference", "primary_fields": ["content"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "mime_type", "dimension_b_description": "The media type of the binary (text/html | plain/text | application/rtf)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of DocumentReference by MIME Type", "short_description": "DocRef MIME Type", "primary_resource": "DocumentReference", "primary_fields": ["content"], "secondary_resources": [], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "mime_type", "dimension_b_description": "The media type of the binary (text/html | plain/text | application/rtf)"}}, "created_at": 1691506479.37368, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`documentreference_mimetype`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of DocumentReference by MIME Type\",\n      \"short_description\": \"DocRef MIME Type\",\n      \"primary_resource\": \"DocumentReference\",\n      \"primary_fields\": ['content'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Data distribution\",\n      \"metric_date_field\": \"DocumentReference.date\",\n      \"metric_date_description\": \"Document reference date\",\n      \"dimension_a\": \"document_status\",\n      \"dimension_a_description\": \"The document reference status  (current | superseded | entered-in-error)\",\n      \"dimension_b\": \"mime_type\",\n      \"dimension_b_description\": \"The media type of the binary (text/html | plain/text | application/rtf)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      D.id,\n      {{- metric_common_dimensions() }}\n      status as document_status,\n      {%- if column_exists('content.attachment.contentType') %}\n      {{ safe_offset(\"content\", 0) }}.attachment.contentType AS mime_type\n      {%- else %}\n      NULL AS mime_type\n      {%- endif %}\n    FROM {{ ref('DocumentReference') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql\n) }}", "language": "sql", "refs": [{"name": "DocumentReference", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/documentreference_mimetype.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'documentreference_mimetype' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_patient_unresolved"], "alias": "medicationrequest_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "34f0cf89594ecb12ec580da45063f40fb7dbc626cade04f2a87362c338d8a6e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent patient", "short_description": "MedReq ref. Patient - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent patient", "short_description": "MedReq ref. Patient - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that reference a non-existent patient", "short_description": "MedReq ref. Patient - non-exist", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506479.3803031, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that reference a non-existent patient\",\n      \"short_description\": \"MedReq ref. Patient - non-exist\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.person_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "person_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/person_count.sql", "original_file_path": "models/metrics/data_quality/person_count.sql", "unique_id": "model.fhir_dbt_analytics.person_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "person_count"], "alias": "person_count", "checksum": {"name": "sha256", "checksum": "370a39202eac76234d45ae6551648174ad525180d9eecfa749ad8dc5b0d374e1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Person resources", "short_description": "Person resources", "primary_resource": "Person", "primary_fields": ["id"], "calculation": "COUNT", "category": "Resource count", "secondary_resources": ["Encounter"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of person's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this person's record is in active use"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Person resources", "short_description": "Person resources", "primary_resource": "Person", "primary_fields": ["id"], "calculation": "COUNT", "category": "Resource count", "secondary_resources": ["Encounter"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of person's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this person's record is in active use"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Person resources", "short_description": "Person resources", "primary_resource": "Person", "primary_fields": ["id"], "calculation": "COUNT", "category": "Resource count", "secondary_resources": ["Encounter"], "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date of person's earliest clinical encounter", "dimension_a": "active", "dimension_a_description": "Whether this person's record is in active use"}}, "created_at": 1691506479.3885791, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`person_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Person resources\",\n      \"short_description\": \"Person resources\",\n      \"primary_resource\": \"Person\",\n      \"primary_fields\": ['id'],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"secondary_resources\": ['Encounter'],\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date of person's earliest clinical encounter\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"Whether this person's record is in active use\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions(exclude_col='metric_date') }}\n      CAST({{ get_column_or_default('active') }} AS STRING) AS active,\n      MIN(\n        (\n          SELECT MIN(metric_date)\n          FROM {{ ref('Encounter') }} AS E\n          WHERE l.target.patientid = E.subject.patientId\n          AND E.class.code NOT IN (\n            'OTHER',\n            'PRENC',\n            'LAB',\n            'UNKNOWN',\n            'HIST'\n          )\n        )\n      ) AS metric_date\n    FROM {{ ref('Person') }} AS P,\n    UNNEST(P.link) AS l\n    GROUP BY 1, 2, 3, 4, 5, 6\n{%- endset -%} \n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "Person", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/person_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__Person as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'person_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.Person", "sql": " __dbt__cte__Person as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.condition_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "condition_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/condition_count.sql", "original_file_path": "models/metrics/data_quality/condition_count.sql", "unique_id": "model.fhir_dbt_analytics.condition_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_count"], "alias": "condition_count", "checksum": {"name": "sha256", "checksum": "e192e2331155acf5d383e0ba8e57df9708ef15643a589925120754b8ec38d96b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Condition resources", "short_description": "Condition resources", "primary_resource": "Condition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Condition resources", "short_description": "Condition resources", "primary_resource": "Condition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Condition resources", "short_description": "Condition resources", "primary_resource": "Condition", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1691506479.395328, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`condition_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Condition resources\",\n      \"short_description\": \"Condition resources\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category\n    FROM {{ ref('Condition') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Condition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationdispense_dosage_instruction": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationdispense_dosage_instruction", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationdispense_dosage_instruction.sql", "original_file_path": "models/metrics/data_quality/medicationdispense_dosage_instruction.sql", "unique_id": "model.fhir_dbt_analytics.medicationdispense_dosage_instruction", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationdispense_dosage_instruction"], "alias": "medicationdispense_dosage_instruction", "checksum": {"name": "sha256", "checksum": "0ad335eb7305516622dcc448ee50724da26960ad566d56a82f4da3369a4b1256"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of medication dispenses with dosage instruction text recorded", "short_description": "MedDisp instruction recorded", "primary_resource": "MedicationDispense", "primary_fields": ["dosageInstruction.patientInstruction", "dosageInstruction.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationDispense.whenPrepared", "metric_date_description": "Date when the dispensed medication was packaged and reviewed"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of medication dispenses with dosage instruction text recorded", "short_description": "MedDisp instruction recorded", "primary_resource": "MedicationDispense", "primary_fields": ["dosageInstruction.patientInstruction", "dosageInstruction.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationDispense.whenPrepared", "metric_date_description": "Date when the dispensed medication was packaged and reviewed"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of medication dispenses with dosage instruction text recorded", "short_description": "MedDisp instruction recorded", "primary_resource": "MedicationDispense", "primary_fields": ["dosageInstruction.patientInstruction", "dosageInstruction.text"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "MedicationDispense.whenPrepared", "metric_date_description": "Date when the dispensed medication was packaged and reviewed"}}, "created_at": 1691506479.403477, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationdispense_dosage_instruction`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of medication dispenses with dosage instruction text recorded\",\n      \"short_description\": \"MedDisp instruction recorded\",\n      \"primary_resource\": \"MedicationDispense\",\n      \"primary_fields\": ['dosageInstruction.patientInstruction', 'dosageInstruction.text'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"MedicationDispense.whenPrepared\",\n      \"metric_date_description\": \"Date when the dispensed medication was packaged and reviewed\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      {{- metric_common_dimensions() }}\n      M.id,\n      IF(\n        NULLIF({{ safe_offset(\"dosageInstruction\", 0) }}.patientInstruction, '') IS NOT NULL\n          OR NULLIF({{ safe_offset(\"dosageInstruction\", 0) }}.text, '') IS NOT NULL,\n        1,\n        0) AS has_dosage_text\n    FROM {{ ref('MedicationDispense') }} AS M\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_dosage_text)',\n    denominator = 'COUNT(id)'\n) -}}", "language": "sql", "refs": [{"name": "MedicationDispense", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationdispense_dosage_instruction.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationDispense as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationdispense_dosage_instruction' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationDispense", "sql": " __dbt__cte__MedicationDispense as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.condition_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "condition_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/condition_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/condition_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.condition_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_reference_patient_undefined"], "alias": "condition_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "7e10d40962c251fe0e2c42b4b0c7761d53da9c5834843a57a39ad1940f061d09"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Condition resources that do not have a patient reference recorded", "short_description": "Cond ref. Patient - unrecorded", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Condition resources that do not have a patient reference recorded", "short_description": "Cond ref. Patient - unrecorded", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Condition resources that do not have a patient reference recorded", "short_description": "Cond ref. Patient - unrecorded", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1691506479.410934, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`condition_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Condition resources that do not have a patient reference recorded\",\n      \"short_description\": \"Cond ref. Patient - unrecorded\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('Condition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Condition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.active_patients_with_composition_daily": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "active_patients_with_composition_daily", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/active_patients_with_composition_daily.sql", "original_file_path": "models/metrics/data_quality/active_patients_with_composition_daily.sql", "unique_id": "model.fhir_dbt_analytics.active_patients_with_composition_daily", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "active_patients_with_composition_daily"], "alias": "active_patients_with_composition_daily", "checksum": {"name": "sha256", "checksum": "6e7b71fb7f54224d21193aec578bc415379d9e1c08efb4af8b6a85823b123097"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of active patients with at least one composition that day", "short_description": "Patients with Composition", "primary_resource": "Composition", "primary_fields": ["subject.patientId", "encounter.encounterId", "date"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of active patients with at least one composition that day", "short_description": "Patients with Composition", "primary_resource": "Composition", "primary_fields": ["subject.patientId", "encounter.encounterId", "date"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of active patients with at least one composition that day", "short_description": "Patients with Composition", "primary_resource": "Composition", "primary_fields": ["subject.patientId", "encounter.encounterId", "date"], "secondary_resources": ["Encounter"], "calculation": "PROPORTION", "category": "Active patients with resource", "dimension_a": "encounter_class_group", "dimension_a_description": "The latest class of the encounter grouped into ambulatory or non-ambulatory"}}, "created_at": 1691506479.419977, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`active_patients_with_composition_daily`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of active patients with at least one composition that day\",\n      \"short_description\": \"Patients with Composition\",\n      \"primary_resource\": \"Composition\",\n      \"primary_fields\": ['subject.patientId', 'encounter.encounterId', 'date'],\n      \"secondary_resources\": ['Encounter'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Active patients with resource\",\n      \"dimension_a\": \"encounter_class_group\",\n      \"dimension_a_description\": \"The latest class of the encounter grouped into ambulatory or non-ambulatory\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      ActiveEncounters.*,\n      C.subject.patientId AS composition_patientid\n    FROM ({{ active_encounters() }}) AS ActiveEncounters\n    LEFT JOIN {{ ref('Composition') }} AS C\n      ON ActiveEncounters.id = C.encounter.encounterId\n      AND (\n        ActiveEncounters.metric_date = C.metric_date\n        OR ActiveEncounters.encounter_class = 'AMB'\n      )\n{%- endset -%}\n\n{{- calculate_metric(\n    metric_sql,\n    numerator = 'COUNT(DISTINCT composition_patientid)',\n    denominator = 'COUNT(DISTINCT patientId)'\n) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "Composition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.active_encounters", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/active_patients_with_composition_daily.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n),  __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'active_patients_with_composition_daily' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}, {"id": "model.fhir_dbt_analytics.Composition", "sql": " __dbt__cte__Composition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "diagnosticreport_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/diagnosticreport_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/diagnosticreport_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "diagnosticreport_reference_patient_unresolved"], "alias": "diagnosticreport_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "2343fe571cdac55e1bd11afa61a49a51afdaa16a346ea5d22f05bc5e89137fad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent patient", "short_description": "DiagRep ref. Patient - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent patient", "short_description": "DiagRep ref. Patient - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DiagnosticReport resources that reference a non-existent patient", "short_description": "DiagRep ref. Patient - non-exist", "primary_resource": "DiagnosticReport", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DiagnosticReport.issued", "metric_date_description": "Diagnostic report latest version issue date", "dimension_a": "status", "dimension_a_description": "The status of the diagnostic report (registered | partial | preliminary | final +)", "dimension_b": "category", "dimension_b_description": "The service category of the diagnostic report"}}, "created_at": 1691506479.428152, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`diagnosticreport_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DiagnosticReport resources that reference a non-existent patient\",\n      \"short_description\": \"DiagRep ref. Patient - non-exist\",\n      \"primary_resource\": \"DiagnosticReport\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DiagnosticReport.issued\",\n      \"metric_date_description\": \"Diagnostic report latest version issue date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the diagnostic report (registered | partial | preliminary | final +)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The service category of the diagnostic report\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'https://g.co/fhir/harmonized/diagnostic_report/category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('DiagnosticReport') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "DiagnosticReport", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/diagnosticreport_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'diagnosticreport_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DiagnosticReport", "sql": " __dbt__cte__DiagnosticReport as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.observation_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "observation_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/observation_count.sql", "original_file_path": "models/metrics/data_quality/observation_count.sql", "unique_id": "model.fhir_dbt_analytics.observation_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_count"], "alias": "observation_count", "checksum": {"name": "sha256", "checksum": "0f83ce3bd48c0e3130d0ac05af6bad17cf2d33afa7c328a630d09cd167bee87b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Observation resources", "short_description": "Observation resources", "primary_resource": "Observation", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Observation resources", "short_description": "Observation resources", "primary_resource": "Observation", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Observation resources", "short_description": "Observation resources", "primary_resource": "Observation", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date", "dimension_a": "status", "dimension_a_description": "The status of the observation (registered | preliminary | final | amended +)"}}, "created_at": 1691506479.436747, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`observation_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Observation resources\",\n      \"short_description\": \"Observation resources\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the observation (registered | preliminary | final | amended +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status\n    FROM {{ ref('Observation') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_count.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_count.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_count"], "alias": "medicationrequest_count", "checksum": {"name": "sha256", "checksum": "a7c00149a6d3c1ecc67006fb8ba4beab223d04ac7a488d5fba9db7830656a367"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid MedicationRequest resources", "short_description": "MedicationRequest resources", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the medication request (inpatient | outpatient | community | discharge)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid MedicationRequest resources", "short_description": "MedicationRequest resources", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the medication request (inpatient | outpatient | community | discharge)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid MedicationRequest resources", "short_description": "MedicationRequest resources", "primary_resource": "MedicationRequest", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "intent", "dimension_b_description": "The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)", "dimension_c": "category", "dimension_c_description": "The category of the medication request (inpatient | outpatient | community | discharge)"}}, "created_at": 1691506479.44258, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid MedicationRequest resources\",\n      \"short_description\": \"MedicationRequest resources\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"intent\",\n      \"dimension_b_description\": \"The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()) }} AS category\n      FROM {{ ref('MedicationRequest') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.encounter_count_by_start_date": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "encounter_count_by_start_date", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/encounter_count_by_start_date.sql", "original_file_path": "models/metrics/data_quality/encounter_count_by_start_date.sql", "unique_id": "model.fhir_dbt_analytics.encounter_count_by_start_date", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_count_by_start_date"], "alias": "encounter_count_by_start_date", "checksum": {"name": "sha256", "checksum": "c1bdc17d414f59d6ee8ec8b45106aeb37e42ec12919e9fb4373c0eec3f4fbe70"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["spark_todo"], "meta": {"description": "Count of encounters starting each day", "short_description": "Admitted encounters", "primary_resource": "Encounter", "primary_fields": ["period.start", "classHistory"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "initial_encounter_class", "dimension_a_description": "The initial class recorded for the encounter, ignoring pre-admission class (PRENC)", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["spark_todo"], "description": "", "columns": {}, "meta": {"description": "Count of encounters starting each day", "short_description": "Admitted encounters", "primary_resource": "Encounter", "primary_fields": ["period.start", "classHistory"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "initial_encounter_class", "dimension_a_description": "The initial class recorded for the encounter, ignoring pre-admission class (PRENC)", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["spark_todo"], "meta": {"description": "Count of encounters starting each day", "short_description": "Admitted encounters", "primary_resource": "Encounter", "primary_fields": ["period.start", "classHistory"], "secondary_resources": [], "calculation": "COUNT", "category": "Encounter daily", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "initial_encounter_class", "dimension_a_description": "The initial class recorded for the encounter, ignoring pre-admission class (PRENC)", "dimension_b": "encounter_service_provider", "dimension_b_description": "The organization responsible for providing the services for this encounter"}}, "created_at": 1691506479.450655, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`encounter_count_by_start_date`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    tags = [\"spark_todo\"],\n    meta = {\n      \"description\": \"Count of encounters starting each day\",\n      \"short_description\": \"Admitted encounters\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['period.start', 'classHistory'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Encounter daily\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"initial_encounter_class\",\n      \"dimension_a_description\": \"The initial class recorded for the encounter, ignoring pre-admission class (PRENC)\",\n      \"dimension_b\": \"encounter_service_provider\",\n      \"dimension_b_description\": \"The organization responsible for providing the services for this encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    WITH\n      A AS (\n        SELECT\n          *,\n          COALESCE(\n            (\n              SELECT UPPER(H.class.code)\n              FROM UNNEST(classHistory) H\n              WHERE H.class.code IN ('IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER', 'AMB', 'IMPPS', 'IMPRE', 'OTHER')\n              ORDER BY H.period.start\n              LIMIT 1\n            ),\n            UPPER(E.class.code)\n          ) AS initial_encounter_class\n        FROM {{ ref('Encounter') }} AS E\n        WHERE\n          UPPER(E.class.code) IN ('IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER', 'AMB', 'IMPPS', 'IMPRE', 'OTHER')\n          AND E.status NOT IN ('cancelled', 'entered-in-error')\n          AND E.period.start IS NOT NULL\n          AND E.period.start <> ''\n      )\n      SELECT\n        id,\n        {{- metric_common_dimensions() }}\n        {{ get_column_or_default('serviceProvider.organizationId', 'Encounter') }} AS encounter_service_provider,\n        CASE\n          WHEN initial_encounter_class IN ('IMP', 'ACUTE', 'NONAC') THEN 'IMP/ACUTE/NONAC'\n          WHEN initial_encounter_class IN ('IMPPS', 'IMPRE','OTHER') THEN 'IMPPS/IMPRE/OTHER'\n          ELSE initial_encounter_class END AS initial_encounter_class\n      FROM A\n{%- endset -%}\n\n{{- calculate_metric(metric_sql) -}}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_count_by_start_date.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_count_by_start_date' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.documentreference_reference_practitioner_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "documentreference_reference_practitioner_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/documentreference_reference_practitioner_undefined.sql", "original_file_path": "models/metrics/data_quality/documentreference_reference_practitioner_undefined.sql", "unique_id": "model.fhir_dbt_analytics.documentreference_reference_practitioner_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "documentreference_reference_practitioner_undefined"], "alias": "documentreference_reference_practitioner_undefined", "checksum": {"name": "sha256", "checksum": "b8cfca52913a3a0b28db2a2943796675643cddec3347a1f956c1e1e7f01faf78"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of DocumentReference resources that do not have a practitioner reference recorded", "short_description": "DocRef ref. Prac - unrecorded", "primary_resource": "DocumentReference", "primary_fields": ["author.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of DocumentReference resources that do not have a practitioner reference recorded", "short_description": "DocRef ref. Prac - unrecorded", "primary_resource": "DocumentReference", "primary_fields": ["author.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of DocumentReference resources that do not have a practitioner reference recorded", "short_description": "DocRef ref. Prac - unrecorded", "primary_resource": "DocumentReference", "primary_fields": ["author.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "format", "dimension_b_description": "The format of the document referenced (scanned | NULL)"}}, "created_at": 1691506479.4571679, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`documentreference_reference_practitioner_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of DocumentReference resources that do not have a practitioner reference recorded\",\n      \"short_description\": \"DocRef ref. Prac - unrecorded\",\n      \"primary_resource\": \"DocumentReference\",\n      \"primary_fields\": ['author.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"DocumentReference.date\",\n      \"metric_date_description\": \"Document reference date\",\n      \"dimension_a\": \"document_status\",\n      \"dimension_a_description\": \"The document reference status  (current | superseded | entered-in-error)\",\n      \"dimension_b\": \"format\",\n      \"dimension_b_description\": \"The format of the document referenced (scanned | NULL)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status as document_status,\n      {%- if column_exists('content.format.code') %}\n      {{ safe_offset(\"content\", 0) }}.format.code AS format\n      {%- else %}\n      NULL AS format\n      {%- endif %},\n      {{ has_reference_value('author', 'Practitioner') }} AS has_reference_value\n    FROM {{ ref('DocumentReference') }} AS D\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "DocumentReference", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/documentreference_reference_practitioner_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'documentreference_reference_practitioner_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.allergyintolerance_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "allergyintolerance_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/allergyintolerance_count.sql", "original_file_path": "models/metrics/data_quality/allergyintolerance_count.sql", "unique_id": "model.fhir_dbt_analytics.allergyintolerance_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "allergyintolerance_count"], "alias": "allergyintolerance_count", "checksum": {"name": "sha256", "checksum": "4f48e07f51de4e53fe0cfb962387b3069a49c5611e2335c02c65bd5b47e78795"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid AllergyIntolerance resources", "short_description": "AllergyIntolerance resources", "primary_resource": "AllergyIntolerance", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid AllergyIntolerance resources", "short_description": "AllergyIntolerance resources", "primary_resource": "AllergyIntolerance", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid AllergyIntolerance resources", "short_description": "AllergyIntolerance resources", "primary_resource": "AllergyIntolerance", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "AllergyIntolerance.recordedDate", "metric_date_description": "Allergy or intolerance recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the allergy/intollerance (active | inactive | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)"}}, "created_at": 1691506479.464649, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`allergyintolerance_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid AllergyIntolerance resources\",\n      \"short_description\": \"AllergyIntolerance resources\",\n      \"primary_resource\": \"AllergyIntolerance\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"AllergyIntolerance.recordedDate\",\n      \"metric_date_description\": \"Allergy or intolerance recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the allergy/intollerance (active | inactive | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification' ) }} AS verification_status\n    FROM {{ ref('AllergyIntolerance') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "AllergyIntolerance", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/allergyintolerance_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'allergyintolerance_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.AllergyIntolerance", "sql": " __dbt__cte__AllergyIntolerance as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationrequest_reference_medication_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationrequest_reference_medication_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationrequest_reference_medication_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationrequest_reference_medication_undefined"], "alias": "medicationrequest_reference_medication_undefined", "checksum": {"name": "sha256", "checksum": "054beb15059265118330739fc93810de823100788ee5262ad18ba6553088d36d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationRequest resources that do not have an medication reference recorded", "short_description": "MedReq ref. Med - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationRequest resources that do not have an medication reference recorded", "short_description": "MedReq ref. Med - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationRequest resources that do not have an medication reference recorded", "short_description": "MedReq ref. Med - unrecorded", "primary_resource": "MedicationRequest", "primary_fields": ["requester.practitionerId", "medication.reference.medicationId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "MedicationRequest.authoredOn", "metric_date_description": "Medication request initial authored date", "dimension_a": "status", "dimension_a_description": "The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the medication request (inpatient | outpatient | community | discharge)", "dimension_c": "intent", "dimension_c_description": "The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)"}}, "created_at": 1691506479.4718258, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationrequest_reference_medication_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationRequest resources that do not have an medication reference recorded\",\n      \"short_description\": \"MedReq ref. Med - unrecorded\",\n      \"primary_resource\": \"MedicationRequest\",\n      \"primary_fields\": [\n          'requester.practitionerId', \n          'medication.reference.medicationId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"MedicationRequest.authoredOn\",\n      \"metric_date_description\": \"Medication request initial authored date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the medication request (inpatient | outpatient | community | discharge)\",\n      \"dimension_c\": \"intent\",\n      \"dimension_c_description\": \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      intent,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://terminology.hl7.org/CodeSystem/medicationrequest-category',\n        index = get_source_specific_category_index()\n      ) }} AS category,\n      {{ has_reference_value('medication.reference', 'Medication') }} AS has_reference_value\n    FROM {{ ref('MedicationRequest') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationrequest_reference_medication_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationrequest_reference_medication_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationRequest", "sql": " __dbt__cte__MedicationRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.encounter_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "encounter_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/encounter_count.sql", "original_file_path": "models/metrics/data_quality/encounter_count.sql", "unique_id": "model.fhir_dbt_analytics.encounter_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "encounter_count"], "alias": "encounter_count", "checksum": {"name": "sha256", "checksum": "cf50dbe7664f8d6f58a924403b23a5d8002ed43ffda01475e4d53b1027ca544c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid Encounter resources", "short_description": "Encounter resources", "primary_resource": "Encounter", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid Encounter resources", "short_description": "Encounter resources", "primary_resource": "Encounter", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid Encounter resources", "short_description": "Encounter resources", "primary_resource": "Encounter", "primary_fields": ["id"], "secondary_resources": [], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "Encounter.period.start", "metric_date_description": "Encounter start date", "dimension_a": "status", "dimension_a_description": "The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)", "dimension_b": "latest_encounter_class", "dimension_b_description": "The latest class of the encounter"}}, "created_at": 1691506479.479927, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`encounter_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid Encounter resources\",\n      \"short_description\": \"Encounter resources\",\n      \"primary_resource\": \"Encounter\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": [],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"Encounter.period.start\",\n      \"metric_date_description\": \"Encounter start date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\",\n      \"dimension_b\": \"latest_encounter_class\",\n      \"dimension_b_description\": \"The latest class of the encounter\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      class.code AS latest_encounter_class\n    FROM {{ ref('Encounter') }}\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/encounter_count.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'encounter_count' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Encounter", "sql": " __dbt__cte__Encounter as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "servicerequest_reference_patient_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/servicerequest_reference_patient_undefined.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_patient_undefined.sql", "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_patient_undefined"], "alias": "servicerequest_reference_patient_undefined", "checksum": {"name": "sha256", "checksum": "1d8ec14f0a32168c57d4a05032072a08e605fb46cbe02dd7a3ca0dedb8ebcb34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that do not have a patient reference recorded", "short_description": "SerReq ref. Patient - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that do not have a patient reference recorded", "short_description": "SerReq ref. Patient - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that do not have a patient reference recorded", "short_description": "SerReq ref. Patient - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["subject.patientId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1691506479.486848, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`servicerequest_reference_patient_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that do not have a patient reference recorded\",\n      \"short_description\": \"SerReq ref. Patient - unrecorded\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_patient_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_patient_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "servicerequest_reference_servicerequest_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/servicerequest_reference_servicerequest_undefined.sql", "original_file_path": "models/metrics/data_quality/servicerequest_reference_servicerequest_undefined.sql", "unique_id": "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "servicerequest_reference_servicerequest_undefined"], "alias": "servicerequest_reference_servicerequest_undefined", "checksum": {"name": "sha256", "checksum": "6011a7968c49bba01550a717a8d48c3d51697d6924801d7d550b8259128934fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of ServiceRequest resources that do not have a service request reference recorded", "short_description": "SerReq ref. SerReq - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of ServiceRequest resources that do not have a service request reference recorded", "short_description": "SerReq ref. SerReq - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of ServiceRequest resources that do not have a service request reference recorded", "short_description": "SerReq ref. SerReq - unrecorded", "primary_resource": "ServiceRequest", "primary_fields": ["requester.practitionerId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "ServiceRequest.authoredOn", "metric_date_description": "Service request signed date", "dimension_a": "status", "dimension_a_description": "The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)", "dimension_b": "category", "dimension_b_description": "The category of the service request"}}, "created_at": 1691506479.494457, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`servicerequest_reference_servicerequest_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of ServiceRequest resources that do not have a service request reference recorded\",\n      \"short_description\": \"SerReq ref. SerReq - unrecorded\",\n      \"primary_resource\": \"ServiceRequest\",\n      \"primary_fields\": ['requester.practitionerId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"ServiceRequest.authoredOn\",\n      \"metric_date_description\": \"Service request signed date\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\",\n      \"dimension_b\": \"category\",\n      \"dimension_b_description\": \"The category of the service request\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ code_from_codeableconcept(\n        'category',\n        'http://snomed.info/sct',\n        index = get_source_specific_category_index(),\n        return_field='display'\n      ) }} AS category,\n      {{ has_reference_value('basedOn', 'ServiceRequest') }} AS has_reference_value\n    FROM {{ ref('ServiceRequest') }} AS S\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "ServiceRequest", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/servicerequest_reference_servicerequest_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'servicerequest_reference_servicerequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.ServiceRequest", "sql": " __dbt__cte__ServiceRequest as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.observation_quantity_value": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "observation_quantity_value", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/observation_quantity_value.sql", "original_file_path": "models/metrics/data_quality/observation_quantity_value.sql", "unique_id": "model.fhir_dbt_analytics.observation_quantity_value", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "observation_quantity_value"], "alias": "observation_quantity_value", "checksum": {"name": "sha256", "checksum": "c72619a93d2f16d94040d49f5bade9879bfa4598f2ffea8e5d35cb7d2e03bb6b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of observations with a value recorded", "short_description": "Obs value recorded", "primary_resource": "Observation", "primary_fields": ["value.quantity.value"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of observations with a value recorded", "short_description": "Obs value recorded", "primary_resource": "Observation", "primary_fields": ["value.quantity.value"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of observations with a value recorded", "short_description": "Obs value recorded", "primary_resource": "Observation", "primary_fields": ["value.quantity.value"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "metric_date_field": "Observation.effective.dateTime", "metric_date_description": "Observation effective date"}}, "created_at": 1691506479.502481, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`observation_quantity_value`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of observations with a value recorded\",\n      \"short_description\": \"Obs value recorded\",\n      \"primary_resource\": \"Observation\",\n      \"primary_fields\": ['value.quantity.value'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"metric_date_field\": \"Observation.effective.dateTime\",\n      \"metric_date_description\": \"Observation effective date\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      IF({{ get_column_or_default('value.quantity.value') }} IS NOT NULL, 1, 0) AS has_value_quantity_value\n    FROM {{ ref('Observation') }}\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_value_quantity_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Observation", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/observation_quantity_value.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'observation_quantity_value' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Observation", "sql": " __dbt__cte__Observation as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.questionnaireresponse_count": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "questionnaireresponse_count", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/questionnaireresponse_count.sql", "original_file_path": "models/metrics/data_quality/questionnaireresponse_count.sql", "unique_id": "model.fhir_dbt_analytics.questionnaireresponse_count", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "questionnaireresponse_count"], "alias": "questionnaireresponse_count", "checksum": {"name": "sha256", "checksum": "49050877f6cb12076fb73adb549f52d76151568daf4c96ef0484ef2328ddc1dd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of valid QuestionnaireResponse resources", "short_description": "QuestionnaireResponse resources", "primary_resource": "QuestionnaireResponse", "primary_fields": ["id"], "secondary_resources": ["Questionnaire"], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "QuestionnaireResponse.authored", "metric_date_description": "QuestionnaireResponse authored", "dimension_a": "questionnaire_group.title", "dimension_a_description": "The title of the questionnaire (The Basics | Lifestyle +)", "dimension_b": "status", "dimension_b_description": "The status of the questionnaire response (completed | +)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of valid QuestionnaireResponse resources", "short_description": "QuestionnaireResponse resources", "primary_resource": "QuestionnaireResponse", "primary_fields": ["id"], "secondary_resources": ["Questionnaire"], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "QuestionnaireResponse.authored", "metric_date_description": "QuestionnaireResponse authored", "dimension_a": "questionnaire_group.title", "dimension_a_description": "The title of the questionnaire (The Basics | Lifestyle +)", "dimension_b": "status", "dimension_b_description": "The status of the questionnaire response (completed | +)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of valid QuestionnaireResponse resources", "short_description": "QuestionnaireResponse resources", "primary_resource": "QuestionnaireResponse", "primary_fields": ["id"], "secondary_resources": ["Questionnaire"], "calculation": "COUNT", "category": "Resource count", "metric_date_field": "QuestionnaireResponse.authored", "metric_date_description": "QuestionnaireResponse authored", "dimension_a": "questionnaire_group.title", "dimension_a_description": "The title of the questionnaire (The Basics | Lifestyle +)", "dimension_b": "status", "dimension_b_description": "The status of the questionnaire response (completed | +)"}}, "created_at": 1691506479.508575, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`questionnaireresponse_count`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of valid QuestionnaireResponse resources\",\n      \"short_description\": \"QuestionnaireResponse resources\",\n      \"primary_resource\": \"QuestionnaireResponse\",\n      \"primary_fields\": ['id'],\n      \"secondary_resources\": ['Questionnaire'],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Resource count\",\n      \"metric_date_field\": \"QuestionnaireResponse.authored\",\n      \"metric_date_description\": \"QuestionnaireResponse authored\",\n      \"dimension_a\": \"questionnaire_group.title\",\n      \"dimension_a_description\": \"The title of the questionnaire (The Basics | Lifestyle +)\",\n      \"dimension_b\": \"status\",\n      \"dimension_b_description\": \"The status of the questionnaire response (completed | +)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      QR.id,\n      {{- metric_common_dimensions(table_alias='QR') }}\n      Q.`group` AS questionnaire_group,\n      QR.status\n    FROM {{ ref('QuestionnaireResponse') }} QR\n    LEFT JOIN {{ ref('Questionnaire') }} Q\n    ON QR.questionnaire.questionnaireId = Q.id\n{%- endset -%}\n\n{{ calculate_metric(metric_sql) }}", "language": "sql", "refs": [{"name": "QuestionnaireResponse", "package": null, "version": null}, {"name": "Questionnaire", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.QuestionnaireResponse", "model.fhir_dbt_analytics.Questionnaire", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/questionnaireresponse_count.sql", "compiled": true, "compiled_code": "\n\n\nWITH\n   __dbt__cte__QuestionnaireResponse as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`QuestionnaireResponse_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`QuestionnaireResponse_view`\n),  __dbt__cte__Questionnaire as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`\n), A AS (\n    SELECT\n      QR.id,\n  QR.fhir_mapping,\n  QR.source_system,\n  QR.data_transfer_type,\n  QR.metric_date,\n  QR.site,\n      Q.`group` AS questionnaire_group,\n      QR.status\n    FROM __dbt__cte__QuestionnaireResponse QR\n    LEFT JOIN __dbt__cte__Questionnaire Q\n    ON QR.questionnaire.questionnaireId = Q.id\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'questionnaireresponse_count' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(questionnaire_group.title AS STRING) AS dimension_a,\n  CAST(status AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(COUNT(DISTINCT id) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.QuestionnaireResponse", "sql": " __dbt__cte__QuestionnaireResponse as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`QuestionnaireResponse_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`QuestionnaireResponse_view`\n)"}, {"id": "model.fhir_dbt_analytics.Questionnaire", "sql": " __dbt__cte__Questionnaire as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.patient_missing_mrn": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "patient_missing_mrn", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/patient_missing_mrn.sql", "original_file_path": "models/metrics/data_quality/patient_missing_mrn.sql", "unique_id": "model.fhir_dbt_analytics.patient_missing_mrn", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "patient_missing_mrn"], "alias": "patient_missing_mrn", "checksum": {"name": "sha256", "checksum": "b5882841338d06b499b0c1082c9b35cffd4407d8636b38a8f6fbef941ce86c89"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of patients that have missing MRN", "short_description": "Patients missing MRN", "primary_resource": "Patient", "primary_fields": ["identifier.value"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of patients that have missing MRN", "short_description": "Patients missing MRN", "primary_resource": "Patient", "primary_fields": ["identifier.value"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of patients that have missing MRN", "short_description": "Patients missing MRN", "primary_resource": "Patient", "primary_fields": ["identifier.value"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Data completeness", "dimension_a": "active", "dimension_a_description": "The patient active status  (true | false)"}}, "created_at": 1691506479.514776, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`patient_missing_mrn`", "raw_code": "{{ config(\n    meta = {\n      \"description\": \"Proportion of patients that have missing MRN\",\n      \"short_description\": \"Patients missing MRN\",\n      \"primary_resource\": \"Patient\",\n      \"primary_fields\": ['identifier.value'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Data completeness\",\n      \"dimension_a\": \"active\",\n      \"dimension_a_description\": \"The patient active status  (true | false)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      CAST({{ get_column_or_default('active') }} AS STRING) AS active,\n      {%- if column_exists('identifier.type') %}\n      (\n        SELECT 1 - SIGN(COUNT(*))\n        FROM {{ spark_parenthesis(\n          unnest_multiple([array_config('identifier', 'i'), array_config('i.type.coding', 't')])\n        )}}\n        WHERE i.value IS NOT NULL AND i.value <> ''\n          AND t.system = 'http://terminology.hl7.org/CodeSystem/v2-0203'\n          AND t.code='MR'\n      )\n      AS patient_missing_mrn\n      {%- else %}\n      1 AS patient_missing_mrn\n      {%- endif %}\n    FROM {{ ref('Patient') }} AS P\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(patient_missing_mrn)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.array_config", "macro.fhir_dbt_analytics.unnest_multiple", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/patient_missing_mrn.sql", "compiled": true, "compiled_code": "\nWITH\n   __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n), A AS (\n    SELECT\n      id,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n      CAST(active AS STRING) AS active,\n      1 AS patient_missing_mrn\n    FROM __dbt__cte__Patient AS P\n  )\nSELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'patient_missing_mrn' AS metric_name,\n  fhir_mapping,\n  source_system,\n  data_transfer_type,\n  metric_date,\n  site,\n  CAST(active AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  SUM(patient_missing_mrn) AS numerator,\n  COUNT(id) AS denominator,\n  CAST(IF((COUNT(id)) != 0, (SUM(patient_missing_mrn)) / (COUNT(id)), NULL) AS FLOAT64) AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Patient", "sql": " __dbt__cte__Patient as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "medicationadministration_reference_medicationrequest_undefined", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/medicationadministration_reference_medicationrequest_undefined.sql", "original_file_path": "models/metrics/data_quality/medicationadministration_reference_medicationrequest_undefined.sql", "unique_id": "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "medicationadministration_reference_medicationrequest_undefined"], "alias": "medicationadministration_reference_medicationrequest_undefined", "checksum": {"name": "sha256", "checksum": "0f9dbe8a200ab6910da9160dadd074c1abef805c3f5e3a4c1f50d8ad9a93648a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication request reference recorded", "short_description": "MedAdmin ref. MedReq - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication request reference recorded", "short_description": "MedAdmin ref. MedReq - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of MedicationAdministration resources that do not have an medication request reference recorded", "short_description": "MedAdmin ref. MedReq - unrecorded", "primary_resource": "MedicationAdministration", "primary_fields": ["context.encounterId", "request.medicationRequestId"], "secondary_resources": [], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)", "metric_date_description": "MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)", "dimension_a": "status", "dimension_a_description": "The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)"}}, "created_at": 1691506479.523068, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`medicationadministration_reference_medicationrequest_undefined`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of MedicationAdministration resources that do not have an medication request reference recorded\",\n      \"short_description\": \"MedAdmin ref. MedReq - unrecorded\",\n      \"primary_resource\": \"MedicationAdministration\",\n      \"primary_fields\": [\n          'context.encounterId', \n          'request.medicationRequestId'],\n      \"secondary_resources\": [],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\",\n      \"metric_date_description\": \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\",\n      \"dimension_a\": \"status\",\n      \"dimension_a_description\": \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      status,\n      {{ has_reference_value('request', 'MedicationRequest') }} AS has_reference_value\n    FROM {{ ref('MedicationAdministration') }} AS M\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(1 - has_reference_value)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "MedicationAdministration", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/medicationadministration_reference_medicationrequest_undefined.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'medicationadministration_reference_medicationrequest_undefined' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.MedicationAdministration", "sql": " __dbt__cte__MedicationAdministration as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.condition_reference_patient_unresolved": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "condition_reference_patient_unresolved", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/condition_reference_patient_unresolved.sql", "original_file_path": "models/metrics/data_quality/condition_reference_patient_unresolved.sql", "unique_id": "model.fhir_dbt_analytics.condition_reference_patient_unresolved", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "condition_reference_patient_unresolved"], "alias": "condition_reference_patient_unresolved", "checksum": {"name": "sha256", "checksum": "cf7f4e0872b1777945a07c647817b01cd2e04f5c285f69234c76a0e16e9b377e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Proportion of Condition resources that reference a non-existent patient", "short_description": "Cond ref. Patient - non-exist", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Proportion of Condition resources that reference a non-existent patient", "short_description": "Cond ref. Patient - non-exist", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Proportion of Condition resources that reference a non-existent patient", "short_description": "Cond ref. Patient - non-exist", "primary_resource": "Condition", "primary_fields": ["subject.patientId"], "secondary_resources": ["Patient"], "calculation": "PROPORTION", "category": "Referential integrity", "metric_date_field": "Condition.recordedDate", "metric_date_description": "Condition recorded date", "dimension_a": "clinical_status", "dimension_a_description": "The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)", "dimension_b": "verification_status", "dimension_b_description": "The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)", "dimension_c": "category", "dimension_c_description": "The category of the condition (problem-list-item | encounter-diagnosis)"}}, "created_at": 1691506479.530006, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`condition_reference_patient_unresolved`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Proportion of Condition resources that reference a non-existent patient\",\n      \"short_description\": \"Cond ref. Patient - non-exist\",\n      \"primary_resource\": \"Condition\",\n      \"primary_fields\": ['subject.patientId'],\n      \"secondary_resources\": ['Patient'],\n      \"calculation\": \"PROPORTION\",\n      \"category\": \"Referential integrity\",\n      \"metric_date_field\": \"Condition.recordedDate\",\n      \"metric_date_description\": \"Condition recorded date\",\n      \"dimension_a\": \"clinical_status\",\n      \"dimension_a_description\": \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\",\n      \"dimension_b\": \"verification_status\",\n      \"dimension_b_description\": \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\",\n      \"dimension_c\": \"category\",\n      \"dimension_c_description\": \"The category of the condition (problem-list-item | encounter-diagnosis)\",\n    }\n) -}}\n\n{%- set metric_sql -%}\n    SELECT\n      id,\n      {{- metric_common_dimensions() }}\n      {{ code_from_codeableconcept('clinicalStatus', 'http://terminology.hl7.org/CodeSystem/condition-clinical') }} AS clinical_status,\n      {{ code_from_codeableconcept('verificationStatus', 'http://terminology.hl7.org/CodeSystem/condition-ver-status') }} AS verification_status,\n      {{ code_from_codeableconcept('category', 'http://terminology.hl7.org/CodeSystem/condition-category', index = 0) }} AS category,\n      {{ has_reference_value('subject', 'Patient') }} AS has_reference_value,\n      {{ reference_resolves('subject', 'Patient') }} AS reference_resolves\n    FROM {{ ref('Condition') }} AS C\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql,\n    numerator = 'SUM(has_reference_value - reference_resolves)',\n    denominator = 'COUNT(id)'\n) }}", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}, {"name": "Condition", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.has_reference_value", "macro.fhir_dbt_analytics.reference_resolves", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/condition_reference_patient_unresolved.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'condition_reference_patient_unresolved' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.Condition", "sql": " __dbt__cte__Condition as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.documentreference_binary_mimetype": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "documentreference_binary_mimetype", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metrics/data_quality/documentreference_binary_mimetype.sql", "original_file_path": "models/metrics/data_quality/documentreference_binary_mimetype.sql", "unique_id": "model.fhir_dbt_analytics.documentreference_binary_mimetype", "fqn": ["fhir_dbt_analytics", "metrics", "data_quality", "documentreference_binary_mimetype"], "alias": "documentreference_binary_mimetype", "checksum": {"name": "sha256", "checksum": "8e569ac69a03430ae3d9c7a3b0c6972c0321684e55ecab498bfe14f4a29e2f81"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Count of DocumentReference by Binary MIME Type", "short_description": "DocRef Binary MIME Type", "primary_resource": "DocumentReference", "primary_fields": ["content"], "secondary_resources": ["Binary"], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "mime_type", "dimension_b_description": "The media type of the document (binary | image/png | NULL)"}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Count of DocumentReference by Binary MIME Type", "short_description": "DocRef Binary MIME Type", "primary_resource": "DocumentReference", "primary_fields": ["content"], "secondary_resources": ["Binary"], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "mime_type", "dimension_b_description": "The media type of the document (binary | image/png | NULL)"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "meta": {"description": "Count of DocumentReference by Binary MIME Type", "short_description": "DocRef Binary MIME Type", "primary_resource": "DocumentReference", "primary_fields": ["content"], "secondary_resources": ["Binary"], "calculation": "COUNT", "category": "Data distribution", "metric_date_field": "DocumentReference.date", "metric_date_description": "Document reference date", "dimension_a": "document_status", "dimension_a_description": "The document reference status  (current | superseded | entered-in-error)", "dimension_b": "mime_type", "dimension_b_description": "The media type of the document (binary | image/png | NULL)"}}, "created_at": 1691506479.539934, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`documentreference_binary_mimetype`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    meta = {\n      \"description\": \"Count of DocumentReference by Binary MIME Type\",\n      \"short_description\": \"DocRef Binary MIME Type\",\n      \"primary_resource\": \"DocumentReference\",\n      \"primary_fields\": ['content'],\n      \"secondary_resources\": ['Binary'],\n      \"calculation\": \"COUNT\",\n      \"category\": \"Data distribution\",\n      \"metric_date_field\": \"DocumentReference.date\",\n      \"metric_date_description\": \"Document reference date\",\n      \"dimension_a\": \"document_status\",\n      \"dimension_a_description\": \"The document reference status  (current | superseded | entered-in-error)\",\n      \"dimension_b\": \"mime_type\",\n      \"dimension_b_description\": \"The media type of the document (binary | image/png | NULL)\",\n    }\n) -}}\n\n\n{%- set metric_sql -%}\n    SELECT\n      D.id,\n      {{- metric_common_dimensions(table_alias='D') }}\n      status as document_status,\n      B.contentType AS mime_type\n    FROM {{ ref('DocumentReference') }} AS D\n    LEFT JOIN UNNEST(D.content) AS C\n    LEFT JOIN {{ ref('Binary') }} AS B\n      ON B.id = REPLACE(C.attachment.url, 'Binary/', '')\n{%- endset -%}\n\n{{ calculate_metric(\n    metric_sql\n) }}", "language": "sql", "refs": [{"name": "DocumentReference", "package": null, "version": null}, {"name": "Binary", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.calculate_metric"], "nodes": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.fhir_table_list"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metrics/data_quality/documentreference_binary_mimetype.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n),  __dbt__cte__Binary as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\n) SELECT\n  CURRENT_DATETIME() as execution_datetime,\n  'documentreference_binary_mimetype' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  'DRC-PPI' AS source_system,\n  'BigQuery' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  'DRC PPI' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS INT64) AS numerator,\n  CAST(NULL AS INT64) AS denominator,\n  CAST(NULL AS FLOAT64) AS measure", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fhir_dbt_analytics.DocumentReference", "sql": " __dbt__cte__DocumentReference as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\n)"}, {"id": "model.fhir_dbt_analytics.Binary", "sql": " __dbt__cte__Binary as (\n\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_thresholds": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_thresholds", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "post_processing/metric_thresholds.sql", "original_file_path": "models/post_processing/metric_thresholds.sql", "unique_id": "model.fhir_dbt_analytics.metric_thresholds", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_thresholds"], "alias": "metric_thresholds", "checksum": {"name": "sha256", "checksum": "a3c29d32b8c7d8ad943b94b3bd825c5c91b6c500ebb91692ddaadebaa8e6c2fa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1691506479.546317, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_thresholds`", "raw_code": "{#\n/* Copyright 2022 Google LLC\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n{{ config(\n    materialized = 'table'\n) -}}\n-- depends_on: {{ ref('unioned_thresholds') }}\n-- depends_on: {{ ref('metric') }}\n-- depends_on: {{ ref('metric_definition') }}\n\nWITH A AS (\n\n{%- set time_grains = dbt_utils.get_column_values(table=ref('unioned_thresholds'), column='time_grain') -%}\n{%- for grain in time_grains %}\n  {%- if grain != None %}\n    {% set grain_filter_expression = \"time_grain = '\" ~ grain ~ \"'\" %}\n  {%- else %}\n    {%- set grain_filter_expression = \"time_grain IS NULL\" %}\n  {%- endif %}\n  {%- set dimensions = dbt_utils.get_column_values(table=ref('unioned_thresholds'), column='dimension', where=grain_filter_expression) %}\n  {%- for dimension in dimensions %}\nSELECT\n  T.metric_name,\n  D.description,\n  D.primary_resource,\n  D.calculation,\n  D.category,\n  T.time_grain,\n  T.dimension,\n  T.validation_feature,\n  T.severity,\n  T.threshold_low,\n  T.threshold_high,\n  {% if grain == None or grain == \"\"  %} '' {% else -%} {{ date_to_period('M.metric_date', grain) }} {% endif -%} as metric_date,\n  {% if dimension == None or dimension == \"\" %} '' {% else -%} D.dimension_{{dimension}} {% endif -%} as dimension_name,\n  {% if dimension == None or dimension == \"\" %} '' {% else -%} M.dimension_{{dimension}} {% endif -%} as dimension_value,\n  SUM(M.numerator) AS numerator,\n  SUM(M.denominator) AS denominator,\n  {{ calculate_measure() }} measure\nFROM {{ ref('unioned_thresholds') }} T\nINNER JOIN {{ ref('metric') }} M ON T.metric_name = M.metric_name\nINNER JOIN {{ ref('metric_definition') }} D ON T.metric_name = D.metric_name\nWHERE D.calculation IN ('COUNT','PROPORTION')\n  AND T.time_grain {% if grain == None -%} IS NULL {% else -%} = '{{ grain }}' {% endif %}\n  AND T.dimension {% if dimension == None -%} IS NULL {% else -%} = '{{ dimension }}' {% endif %}\n{{ dbt_utils.group_by(14)|upper }}\n    {% if not loop.last -%}  UNION ALL {%- endif -%}\n  {%- endfor -%}\n  {% if not loop.last -%}  UNION ALL {%- endif -%}\n{%- endfor -%}\n\n)\n\nSELECT\n  *,\n  CASE\n    WHEN measure IS NULL THEN 'N/A'\n    WHEN measure < threshold_low THEN severity\n    WHEN measure > threshold_high THEN severity\n    ELSE 'Pass'\n    END AS status\nFROM A", "language": "sql", "refs": [{"name": "unioned_thresholds", "package": null, "version": null}, {"name": "metric", "package": null, "version": null}, {"name": "metric_definition", "package": null, "version": null}, {"name": "unioned_thresholds", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values"], "nodes": ["model.fhir_dbt_analytics.unioned_thresholds", "model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_definition": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_definition", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "post_processing/metric_definition.sql", "original_file_path": "models/post_processing/metric_definition.sql", "unique_id": "model.fhir_dbt_analytics.metric_definition", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_definition"], "alias": "metric_definition", "checksum": {"name": "sha256", "checksum": "47adb0a097a961ac752a67a4f9c2eb154c8cc462f2546a4b416bbe2bdccbc858"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Loops through all metadata recorded for models within the `metrics/` folder, writing this\ninformation to a database table.\n", "columns": {"metric_path": {"name": "metric_path", "description": "Location of this model within the dbt project.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metric_name": {"name": "metric_name", "description": "Unique name for the metric (e.g. *patient_count*).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Plain English description of the metric.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "short_description": {"name": "short_description", "description": "Shortened version of the metric description for display in tables. Aim to limit to 32 characters.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_resource": {"name": "primary_resource", "description": "FHIR resource that this metric is calculated over. In some cases a metric may join across multiple FHIR resources. This field should represent the main resource from which the cohort for the metric is calculated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_fields": {"name": "primary_fields", "description": "Primary FHIR fields that this metric is calculated over.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "secondary_resources": {"name": "secondary_resources", "description": "List of all FHIR resources that this metric is calculated over other than the *primary_resource*.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "Category to associate this metric with, enabling grouping/viewing metrics withiin specific categories (e.g. *Referential integrity*).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calculation": {"name": "calculation", "description": "Type of calculation performed on the metric measure value. This defines how downstream systems should aggregate the output.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metric_date_field": {"name": "metric_date_field", "description": "FHIR field used to generate the metric_date in the output (e.g. *Encounter.period.start*)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metric_date_description": {"name": "metric_date_description", "description": "Plain english description of the metric date calculation used (e.g. *Encounter start date*)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension_a": {"name": "dimension_a", "description": "The first metric segmentation group. This is a relevant variable that the metric is grouped by to enable drill-down analysis. This can be a column name or SQL expression that is used by the *calculate_metric* macro to derive dimension_a in the metric output.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension_a_description": {"name": "dimension_a_description", "description": "Description of first metric segmentation group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension_b": {"name": "dimension_b", "description": "The second metric segmentation group. This is a relevant variable that the metric is grouped by to enable drill-down analysis. This can be a column name or SQL expression that is used by the *calculate_metric* macro to derive dimension_b in the metric output.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension_b_description": {"name": "dimension_b_description", "description": "Description of second metric segmentation group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension_c": {"name": "dimension_c", "description": "The third metric segmentation group. This is a relevant variable that the metric is grouped by to enable drill-down analysis. This can be a column name or SQL expression that is used by the *calculate_metric* macro to derive dimension_a in the metric output.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension_c_description": {"name": "dimension_c_description", "description": "Description of third metric segmentation group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metadata/metadata_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1691506480.072596, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_definition`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='table'\n) -}}\n\nSELECT *\nFROM {{ ref('metric_all_definitions') }}\nWHERE metric_name IN (\n  SELECT DISTINCT metric_name\n  FROM {{ ref('metric') }}\n)\nORDER BY metric_name", "language": "sql", "refs": [{"name": "metric_all_definitions", "package": null, "version": null}, {"name": "metric", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fhir_dbt_analytics.metric_all_definitions", "model.fhir_dbt_analytics.metric"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_copy": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_copy", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "post_processing/metric_copy.sql", "original_file_path": "models/post_processing/metric_copy.sql", "unique_id": "model.fhir_dbt_analytics.metric_copy", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_copy"], "alias": "metric_copy", "checksum": {"name": "sha256", "checksum": "c0de9c3cfa91b9667e4a3a322d5a3fc943884a72005acd695e6726e4a871fce2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1691506479.560172, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_copy`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{# Copy the `metric` data to allow the `metric` model to backfill what wasn't run in the latest\n   execution. #}\n{{ config(\n    materialized = 'table',\n) }}\n\n{% if adapter.get_relation(this.database, this.schema, 'metric') %}\n{# Can't use `ref` because that would cause a cycle. #}\nSELECT * FROM {{ table_ref(this.database, this.schema, 'metric') }}\n{% else %}\nSELECT \"not found\" AS dummy\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_execution_log": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_execution_log", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "post_processing/metric_execution_log.sql", "original_file_path": "models/post_processing/metric_execution_log.sql", "unique_id": "model.fhir_dbt_analytics.metric_execution_log", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_execution_log"], "alias": "metric_execution_log", "checksum": {"name": "sha256", "checksum": "06f4ce79775e1cb5456cfaa94fc9550dc3bfc88f02d09aa79945f2ebbe3bfaa5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Creates a table logging metadata for each execution of the pipeline.\n", "columns": {"execution_id": {"name": "execution_id", "description": "Unique Id for each pipeline execution generated from GENERATE_UUID() BigQuery function.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "execution_date": {"name": "execution_date", "description": "Date of the pipeline execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cohort": {"name": "cohort", "description": "The cohort over which metrics were calculated for this pipeline execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metric": {"name": "metric", "description": "Array of fields with metadata for each metric that was included in this pipeline execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/post_processing/post_processing_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1691506480.015139, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_execution_log`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized = 'incremental'\n) -}}\n\nWITH LatestExecution AS (\n  SELECT execution_id, execution_date, execution_datetime, metric_name, MIN(metric_date) AS min_metric_date, MAX(metric_date) AS max_metric_date, COUNT(*) AS row_count\n  FROM {{ ref('metric_latest_execution') }}\n  GROUP BY 1,2,3,4\n)\nSELECT\n  execution_id,\n  execution_date,\n  '{{ var('cohort') }}' AS `cohort`,\n  ARRAY_AGG(STRUCT(metric_name, execution_datetime, min_metric_date, max_metric_date, row_count)) AS metric\nFROM LatestExecution\nGROUP BY 1, 2", "language": "sql", "refs": [{"name": "metric_latest_execution", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fhir_dbt_analytics.metric_latest_execution"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "post_processing/metric.sql", "original_file_path": "models/post_processing/metric.sql", "unique_id": "model.fhir_dbt_analytics.metric", "fqn": ["fhir_dbt_analytics", "post_processing", "metric"], "alias": "metric", "checksum": {"name": "sha256", "checksum": "21f8689faebdfec62169dcc108cd99e7a40aa814d0758c4cc6f04f92a9a1f5b0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [{"sql": "{{ maybe_drop_metric_tables() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Generates a table with the latest values for each metric.\n\nIt reads from `metric_latest_execution` and performs two transformations:\n\n1. Filters output to the time period specified by the `earliest_date` and `latest_date`\nvariables (static datasets) or `months_history` variable (dynamic datasets).\n\n2. Imputes missing daily values for all metric segmentation combinations with data in the time\nperiod.\n\nThis model includes a post-hook that drops all individual metric output tables after\nexecution.\n", "columns": {"execution_id": {"name": "execution_id", "description": "Unique Id for each pipeline execution generated from GENERATE_UUID() BigQuery function.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "execution_date": {"name": "execution_date", "description": "Date of the pipeline execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "execution_datetime": {"name": "execution_datetime", "description": "Datetime of the pipeline execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metric_name": {"name": "metric_name", "description": "Unique name for the metric (e.g. patient_count)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fhir_mapping": {"name": "fhir_mapping", "description": "The FHIR mapping from which the FHIR data queried originates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_system": {"name": "source_system", "description": "Data source from which the FHIR data queried originates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_transfer_type": {"name": "data_transfer_type", "description": "Mechanism of data transfer from which the FHIR data queried originates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metric_date": {"name": "metric_date", "description": "Clinically-relevant local calendar date for which this metric value is calculated. This field will be NULL for metrics that are not segmented by date (e.g. organization_count).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "site": {"name": "site", "description": "Provider code from which the FHIR data queried originates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension_a": {"name": "dimension_a", "description": "First metric segmentation group. A relevant variable that this metric is grouped by to enable drill-down analysis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension_b": {"name": "dimension_b", "description": "Second metric segmentation group. A relevant variable that this metric is grouped by to enable drill-down analysis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension_c": {"name": "dimension_c", "description": "Third metric segmentation group. A relevant variable that this metric is grouped by to enable drill-down analysis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numerator": {"name": "numerator", "description": "Numerator value for proportion or ratio calculation. This will be NULL for count metrics.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "denominator": {"name": "denominator", "description": "Denominator value for proportion or ratio calculation. This will be NULL for count metrics.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure": {"name": "measure", "description": "Value of the metric calculation for a given segmentation group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/post_processing/post_processing_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ maybe_drop_metric_tables() }}"]}, "created_at": 1691506480.0143209, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized = 'table',\n    post_hook = \"{{ maybe_drop_metric_tables() }}\"\n) -}}\n\nWITH\n\n  Breakdowns AS (\n    SELECT DISTINCT\n      M.execution_id, M.execution_date, M.execution_datetime,\n      M.metric_name, M.source_system, M.site, M.data_transfer_type, M.dimension_a, M.dimension_b, M.dimension_c, M.fhir_mapping,\n      D.calculation, D.metric_date_field\n      FROM {{ ref('metric_latest_execution') }} AS M\n      JOIN {{ ref('metric_all_definitions') }} AS D ON M.metric_name = D.metric_name\n  ),\n  DS AS (\n    {{ date_spine() }}\n  )\n\nSELECT\n  B.execution_id,\n  B.execution_date,\n  B.execution_datetime,\n  B.metric_name,\n  B.fhir_mapping,\n  B.source_system,\n  B.data_transfer_type,\n  CAST(metric_date AS DATE) AS metric_date,\n  B.site,\n  B.dimension_a,\n  B.dimension_b,\n  B.dimension_c,\n\n  -- Impute different values for rows without data for count metrics and non-count metrics:\n  COALESCE(M.numerator, IF(B.calculation IN ('COUNT'), NULL, 0)) AS numerator,\n  COALESCE(M.denominator, IF(B.calculation IN ('COUNT'), NULL, 0)) AS denominator,\n  COALESCE(M.measure, IF(B.calculation IN ('COUNT'), 0, NULL)) AS measure\n\nFROM Breakdowns AS B\nLEFT JOIN DS ON B.metric_date_field != ''\nLEFT JOIN {{ ref('metric_latest_execution') }} AS M\n  ON B.metric_name = M.metric_name\n  AND (DS.date_day = M.metric_date OR (DS.date_day IS NULL AND M.metric_date IS NULL))\n  AND (B.source_system = M.source_system OR (B.source_system IS NULL AND M.source_system IS NULL))\n  AND (B.data_transfer_type = M.data_transfer_type OR (B.data_transfer_type IS NULL AND M.data_transfer_type IS NULL))\n  AND (B.site = M.site OR (B.site IS NULL AND M.site IS NULL))\n  AND (B.dimension_a = M.dimension_a OR (B.dimension_a IS NULL AND M.dimension_a IS NULL))\n  AND (B.dimension_b = M.dimension_b OR (B.dimension_b IS NULL AND M.dimension_b IS NULL))\n  AND (B.dimension_c = M.dimension_c OR (B.dimension_c IS NULL AND M.dimension_c IS NULL))\n  AND (B.fhir_mapping = M.fhir_mapping OR (B.fhir_mapping IS NULL AND M.fhir_mapping IS NULL))\n\n{# Use a variable to allow dbt to discover the `ref`s. And use `metric_copy` because Spark first\n   drops the table before running the model. #}\n{% set union_metric_copy %}\nUNION ALL\nSELECT * FROM {{ ref('metric_copy') }}\nWHERE metric_name NOT IN (SELECT DISTINCT metric_name FROM {{ ref('metric_latest_execution') }})\n{% endset %}\n\n{% if adapter.get_relation(this.database, this.schema, this.table) %}\n{{ union_metric_copy }}\n{% endif %}", "language": "sql", "refs": [{"name": "metric_latest_execution", "package": null, "version": null}, {"name": "metric_all_definitions", "package": null, "version": null}, {"name": "metric_latest_execution", "package": null, "version": null}, {"name": "metric_copy", "package": null, "version": null}, {"name": "metric_latest_execution", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.date_spine", "macro.fhir_dbt_analytics.maybe_drop_metric_tables"], "nodes": ["model.fhir_dbt_analytics.metric_latest_execution", "model.fhir_dbt_analytics.metric_all_definitions", "model.fhir_dbt_analytics.metric_copy"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_latest_execution": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_latest_execution", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "post_processing/metric_latest_execution.sql", "original_file_path": "models/post_processing/metric_latest_execution.sql", "unique_id": "model.fhir_dbt_analytics.metric_latest_execution", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_latest_execution"], "alias": "metric_latest_execution", "checksum": {"name": "sha256", "checksum": "5a21a73b61c9432e0fb01c06ba2b350e2085696396eb21a53631b5b0d4ba3de5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Unions the output of all metrics executed in a given pipeline run, and writes to a single\ndatabase table.\n", "columns": {"metric_name": {"name": "metric_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/post_processing/post_processing_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1691506480.011202, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_latest_execution`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('metric_all_definitions') }}\n\n{{ config(\n    materialized='table'\n) -}}\n\nWITH\n\nUnionedMetrics AS (\n  {{ union_metric_tables() }}\n),\n\nExecution AS (\n  SELECT {{ uuid() }} AS execution_id,\n  CURRENT_DATE() AS execution_date\n)\n\nSELECT\n  Execution.execution_id,\n  Execution.execution_date,\n  UnionedMetrics.*\nFROM UnionedMetrics\nCROSS JOIN Execution", "language": "sql", "refs": [{"name": "metric_all_definitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.union_metric_tables", "macro.fhir_dbt_analytics.uuid"], "nodes": ["model.fhir_dbt_analytics.metric_all_definitions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.hypertension_without_medication": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "hypertension_without_medication", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "cohorts/hypertension_without_medication.sql", "original_file_path": "models/cohorts/hypertension_without_medication.sql", "unique_id": "model.fhir_dbt_analytics.hypertension_without_medication", "fqn": ["fhir_dbt_analytics", "cohorts", "hypertension_without_medication"], "alias": "hypertension_without_medication", "checksum": {"name": "sha256", "checksum": "fb5d3d9b7e3672e8bd9a417de2d25ffcb367444a09315ad97bcffcee87c444f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"cohort_description": "Adults with a diagnosis of hypertension and BMI>25 without a recorded medication reconciliation in the past 12 months"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"cohort_description": "Adults with a diagnosis of hypertension and BMI>25 without a recorded medication reconciliation in the past 12 months"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "meta": {"cohort_description": "Adults with a diagnosis of hypertension and BMI>25 without a recorded medication reconciliation in the past 12 months"}}, "created_at": 1691506479.5848, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{- config(\n    materialized = 'ephemeral',\n    meta = {\n      \"cohort_description\": \"Adults with a diagnosis of hypertension and BMI>25 without a recorded medication reconciliation in the past 12 months\"\n      }\n) -}}\n\nSELECT\n  '{{this.name}}' AS cohort_name,\n  {{ get_snapshot_date() }} AS cohort_snapshot_date,\n  P.id AS patient_id\nFROM {{ ref('Patient_view') }} AS P\nWHERE {{ alive() }}\nAND {{ age() }} >= 18\nAND {{ has_encounter(class=['AMB', 'EMER', 'IMP'], lookback='5 YEAR', patient_join_key= P.id) }}\nAND {{ has_condition('Hypertension', patient_join_key= P.id) }}\nAND {{ has_medication_request('Anti-hypertensive medication', lookback='12 MONTH', patient_join_key= P.id) }}\nAND {{ has_observation('BMI', value_greater_than=25, lookback='12 MONTH', patient_join_key= P.id) }}\nAND NOT{{ has_procedure('Medication Reconciliation', lookback='12 MONTH', patient_join_key= P.id) }}", "language": "sql", "refs": [{"name": "Patient_view", "package": null, "version": null}, {"name": "Encounter_view", "package": null, "version": null}, {"name": "Condition_view", "package": null, "version": null}, {"name": "clinical_code_groups", "package": null, "version": null}, {"name": "MedicationRequest_view", "package": null, "version": null}, {"name": "clinical_code_groups", "package": null, "version": null}, {"name": "Observation_view", "package": null, "version": null}, {"name": "clinical_code_groups", "package": null, "version": null}, {"name": "Procedure_view", "package": null, "version": null}, {"name": "clinical_code_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date", "macro.fhir_dbt_analytics.alive", "macro.fhir_dbt_analytics.age", "macro.fhir_dbt_analytics.has_encounter", "macro.fhir_dbt_analytics.has_condition", "macro.fhir_dbt_analytics.has_medication_request", "macro.fhir_dbt_analytics.has_observation", "macro.fhir_dbt_analytics.has_procedure"], "nodes": ["model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.Condition_view", "seed.fhir_dbt_analytics.clinical_code_groups", "model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.Procedure_view"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.adults": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "adults", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "cohorts/adults.sql", "original_file_path": "models/cohorts/adults.sql", "unique_id": "model.fhir_dbt_analytics.adults", "fqn": ["fhir_dbt_analytics", "cohorts", "adults"], "alias": "adults", "checksum": {"name": "sha256", "checksum": "486a629ebfd94d4009fcad23706592e5f1ef887a2e09728e40ce3024122ba6ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"cohort_description": "Alive adults"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"cohort_description": "Alive adults"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "meta": {"cohort_description": "Alive adults"}}, "created_at": 1691506479.615633, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{- config(\n    materialized = 'ephemeral',\n    meta = {\n      \"cohort_description\": \"Alive adults\"\n      }\n) -}}\n\nSELECT\n  '{{this.name}}' AS cohort_name,\n  {{ get_snapshot_date() }} AS cohort_snapshot_date,\n  P.id AS patient_id\nFROM {{ ref('Patient_view') }} AS P\nWHERE {{ alive() }}\nAND {{ age() }} >= 18", "language": "sql", "refs": [{"name": "Patient_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date", "macro.fhir_dbt_analytics.alive", "macro.fhir_dbt_analytics.age"], "nodes": ["model.fhir_dbt_analytics.Patient_view"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.QuestionnaireResponse_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "QuestionnaireResponse_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/QuestionnaireResponse_view.sql", "original_file_path": "models/fhir_resources/QuestionnaireResponse_view.sql", "unique_id": "model.fhir_dbt_analytics.QuestionnaireResponse_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "QuestionnaireResponse_view"], "alias": "QuestionnaireResponse_view", "checksum": {"name": "sha256", "checksum": "7d222f82d9c074e483602419c328a2a29e5c9fba3fce28184952cc5185b26973"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all QuestionnaireResponse FHIR resources", "fhir_resource": "QuestionnaireResponse", "metric_date_columns": ["authored"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Questionnaire_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all QuestionnaireResponse FHIR resources", "fhir_resource": "QuestionnaireResponse", "metric_date_columns": ["authored"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Questionnaire_view", "meta": {"description": "Union of all QuestionnaireResponse FHIR resources", "fhir_resource": "QuestionnaireResponse", "metric_date_columns": ["authored"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.620925, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`QuestionnaireResponse_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Questionnaire_view\",\n    meta = {\n      \"description\": \"Union of all QuestionnaireResponse FHIR resources\",\n      \"fhir_resource\": \"QuestionnaireResponse\",\n      \"metric_date_columns\": [\"authored\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/QuestionnaireResponse_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,IF(\n      CHAR_LENGTH(authored) = 10,\n      \n    safe_cast(authored as date)\n,\n      DATE(\n            safe_cast(authored as TIMESTAMP)\n        , 'America/New_York')\n    ) AS metric_date,IF(\n      CHAR_LENGTH(authored) = 10,\n      \n    safe_cast(NULL as TIMESTAMP)\n,\n      TIMESTAMP_TRUNC(\n    safe_cast(authored as TIMESTAMP)\n, hour, 'America/New_York')\n    ) AS metric_hour,\n    'DRC-PPI' AS source_system,\n    'DRC PPI' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `aou-datawarehouse-sandbox`.`ppi_001`.`QuestionnaireResponse`\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Medication_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Medication_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Medication_view.sql", "original_file_path": "models/fhir_resources/Medication_view.sql", "unique_id": "model.fhir_dbt_analytics.Medication_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Medication_view"], "alias": "Medication_view", "checksum": {"name": "sha256", "checksum": "c6ce7d386c190fa7e6a693e0e8a0674eede568a96ddbaa1b079d07299a2620f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "Medication", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Medication_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "Medication", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Medication_view", "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "Medication", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1691506479.628868, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Medication_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Medication_view\",\n    meta = {\n      \"description\": \"Union of all Medication FHIR resources\",\n      \"fhir_resource\": \"Medication\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Medication_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Binary_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Binary_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Binary_view.sql", "original_file_path": "models/fhir_resources/Binary_view.sql", "unique_id": "model.fhir_dbt_analytics.Binary_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Binary_view"], "alias": "Binary_view", "checksum": {"name": "sha256", "checksum": "25d93deed48e518a64351887e931c1ea4a6ef09d3dc81e26b9330b7a0cb5ef8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Binary FHIR resources", "fhir_resource": "Binary", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Binary_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Binary FHIR resources", "fhir_resource": "Binary", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Binary_view", "meta": {"description": "Union of all Binary FHIR resources", "fhir_resource": "Binary", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1691506479.6337862, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Binary_view\",\n    meta = {\n      \"description\": \"Union of all Binary FHIR resources\",\n      \"fhir_resource\": \"Binary\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Binary_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Procedure": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Procedure", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Procedure.sql", "original_file_path": "models/fhir_resources/Procedure.sql", "unique_id": "model.fhir_dbt_analytics.Procedure", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Procedure"], "alias": "Procedure", "checksum": {"name": "sha256", "checksum": "22e7a5acf5d37d1bacb7cd41b47908eda07f2efced682dd9466485de7de40369"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Procedure FHIR resources filtered by cohort", "fhir_resource": "Procedure"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Procedure", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Procedure FHIR resources filtered by cohort", "fhir_resource": "Procedure"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Procedure", "meta": {"description": "Procedure FHIR resources filtered by cohort", "fhir_resource": "Procedure"}, "materialized": "ephemeral"}, "created_at": 1691506479.6388009, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Procedure_view' )}}\n{{ config(\n    name = \"Procedure\",\n    meta = {\n      \"description\": \"Procedure FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Procedure\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Procedure_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Procedure_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Procedure.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Composition_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Composition_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Composition_view.sql", "original_file_path": "models/fhir_resources/Composition_view.sql", "unique_id": "model.fhir_dbt_analytics.Composition_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Composition_view"], "alias": "Composition_view", "checksum": {"name": "sha256", "checksum": "0a437c4272e6bcdfd26f390e87fdc15b2ca65bf7cc74a10070f912f62f80a8e5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Composition FHIR resources", "fhir_resource": "Composition", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Composition_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Composition FHIR resources", "fhir_resource": "Composition", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Composition_view", "meta": {"description": "Union of all Composition FHIR resources", "fhir_resource": "Composition", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.6470242, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Composition_view\",\n    meta = {\n      \"description\": \"Union of all Composition FHIR resources\",\n      \"fhir_resource\": \"Composition\",\n      \"metric_date_columns\": [\"date\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Composition_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.MedicationStatement": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "MedicationStatement", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/MedicationStatement.sql", "original_file_path": "models/fhir_resources/MedicationStatement.sql", "unique_id": "model.fhir_dbt_analytics.MedicationStatement", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationStatement"], "alias": "MedicationStatement", "checksum": {"name": "sha256", "checksum": "edaeb18d9bb1940b77df0596758828b6fd2daa1e47e4739ea413ebdc5f40186f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "MedicationStatement FHIR resources filtered by cohort", "fhir_resource": "MedicationStatement"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationStatement", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "MedicationStatement FHIR resources filtered by cohort", "fhir_resource": "MedicationStatement"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationStatement", "meta": {"description": "MedicationStatement FHIR resources filtered by cohort", "fhir_resource": "MedicationStatement"}, "materialized": "ephemeral"}, "created_at": 1691506479.651662, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('MedicationStatement_view' )}}\n{{ config(\n    name = \"MedicationStatement\",\n    meta = {\n      \"description\": \"MedicationStatement FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"MedicationStatement\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "MedicationStatement_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.MedicationStatement_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationStatement.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.MedicationRequest_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "MedicationRequest_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/MedicationRequest_view.sql", "original_file_path": "models/fhir_resources/MedicationRequest_view.sql", "unique_id": "model.fhir_dbt_analytics.MedicationRequest_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationRequest_view"], "alias": "MedicationRequest_view", "checksum": {"name": "sha256", "checksum": "ab9863b78021f82468366b941459e40fdbf45460cbe56a5f74b7c9296c9f71a5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all MedicationRequest FHIR resources", "fhir_resource": "MedicationRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationRequest_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all MedicationRequest FHIR resources", "fhir_resource": "MedicationRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationRequest_view", "meta": {"description": "Union of all MedicationRequest FHIR resources", "fhir_resource": "MedicationRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.655702, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"MedicationRequest_view\",\n    meta = {\n      \"description\": \"Union of all MedicationRequest FHIR resources\",\n      \"fhir_resource\": \"MedicationRequest\",\n      \"metric_date_columns\": [\"authoredOn\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationRequest_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.ImagingStudy_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "ImagingStudy_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/ImagingStudy_view.sql", "original_file_path": "models/fhir_resources/ImagingStudy_view.sql", "unique_id": "model.fhir_dbt_analytics.ImagingStudy_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "ImagingStudy_view"], "alias": "ImagingStudy_view", "checksum": {"name": "sha256", "checksum": "8b5faee709e65713a9271aa0ba40e9ebb81fb23e46ace116450fc40f130dcf66"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all ImagingStudy FHIR resources", "fhir_resource": "ImagingStudy", "metric_date_columns": ["started"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "ImagingStudy_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all ImagingStudy FHIR resources", "fhir_resource": "ImagingStudy", "metric_date_columns": ["started"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "ImagingStudy_view", "meta": {"description": "Union of all ImagingStudy FHIR resources", "fhir_resource": "ImagingStudy", "metric_date_columns": ["started"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.6601799, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ImagingStudy_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"ImagingStudy_view\",\n    meta = {\n      \"description\": \"Union of all ImagingStudy FHIR resources\",\n      \"fhir_resource\": \"ImagingStudy\",\n      \"metric_date_columns\": [\"started\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/ImagingStudy_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Practitioner": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Practitioner", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Practitioner.sql", "original_file_path": "models/fhir_resources/Practitioner.sql", "unique_id": "model.fhir_dbt_analytics.Practitioner", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Practitioner"], "alias": "Practitioner", "checksum": {"name": "sha256", "checksum": "9077cff3fa424856f1bec9a2a258f9d63b42b38d3dfbacecf1e55db142826657"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Practitioner FHIR resources filtered by cohort", "fhir_resource": "Practitioner"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Practitioner", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Practitioner FHIR resources filtered by cohort", "fhir_resource": "Practitioner"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Practitioner", "meta": {"description": "Practitioner FHIR resources filtered by cohort", "fhir_resource": "Practitioner"}, "materialized": "ephemeral"}, "created_at": 1691506479.6646998, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Practitioner_view' )}}\n{{ config(\n    name = \"Practitioner\",\n    meta = {\n      \"description\": \"Practitioner FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Practitioner\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Practitioner_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Practitioner_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Practitioner.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.AllergyIntolerance_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "AllergyIntolerance_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/AllergyIntolerance_view.sql", "original_file_path": "models/fhir_resources/AllergyIntolerance_view.sql", "unique_id": "model.fhir_dbt_analytics.AllergyIntolerance_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "AllergyIntolerance_view"], "alias": "AllergyIntolerance_view", "checksum": {"name": "sha256", "checksum": "4493e2ca9e3785aa85d3aff64c0fea5a34478986d3e575474fc3d42f0d5260a1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all AllergyIntolerance FHIR resources", "fhir_resource": "AllergyIntolerance", "metric_date_columns": ["recordedDate"], "patient_reference_column": "patient"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "AllergyIntolerance_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all AllergyIntolerance FHIR resources", "fhir_resource": "AllergyIntolerance", "metric_date_columns": ["recordedDate"], "patient_reference_column": "patient"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "AllergyIntolerance_view", "meta": {"description": "Union of all AllergyIntolerance FHIR resources", "fhir_resource": "AllergyIntolerance", "metric_date_columns": ["recordedDate"], "patient_reference_column": "patient"}, "materialized": "view"}, "created_at": 1691506479.66886, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"AllergyIntolerance_view\",\n    meta = {\n      \"description\": \"Union of all AllergyIntolerance FHIR resources\",\n      \"fhir_resource\": \"AllergyIntolerance\",\n      \"metric_date_columns\": [\"recordedDate\"],\n      \"patient_reference_column\": \"patient\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/AllergyIntolerance_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS patient,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Encounter": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Encounter", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Encounter.sql", "original_file_path": "models/fhir_resources/Encounter.sql", "unique_id": "model.fhir_dbt_analytics.Encounter", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Encounter"], "alias": "Encounter", "checksum": {"name": "sha256", "checksum": "5520bf135c4b0ed699b13e4abafce9e323a1506f01011d3999ef83ff64cd5624"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Encounter FHIR resources filtered by cohort", "fhir_resource": "Encounter"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Encounter", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Encounter FHIR resources filtered by cohort", "fhir_resource": "Encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Encounter", "meta": {"description": "Encounter FHIR resources filtered by cohort", "fhir_resource": "Encounter"}, "materialized": "ephemeral"}, "created_at": 1691506479.673354, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Encounter_view' )}}\n{{ config(\n    name = \"Encounter\",\n    meta = {\n      \"description\": \"Encounter FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Encounter\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Encounter_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Encounter_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Encounter.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Binary": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Binary", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Binary.sql", "original_file_path": "models/fhir_resources/Binary.sql", "unique_id": "model.fhir_dbt_analytics.Binary", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Binary"], "alias": "Binary", "checksum": {"name": "sha256", "checksum": "0bb4d238ca2db51fcb99031eedd0e3c6200fc2b26ab1c953052ceefe307d8526"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Binary FHIR resources", "fhir_resource": "Binary"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Binary", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Binary FHIR resources", "fhir_resource": "Binary"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Binary", "meta": {"description": "Binary FHIR resources", "fhir_resource": "Binary"}, "materialized": "ephemeral"}, "created_at": 1691506479.678613, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Binary_view' )}}\n{{ config(\n    name = \"Binary\",\n    meta = {\n      \"description\": \"Binary FHIR resources\",\n      \"fhir_resource\": \"Binary\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Binary_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Binary_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Binary.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Binary_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Location": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Location", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Location.sql", "original_file_path": "models/fhir_resources/Location.sql", "unique_id": "model.fhir_dbt_analytics.Location", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Location"], "alias": "Location", "checksum": {"name": "sha256", "checksum": "dc8feebbc91d990c1643ec6e2a7067672982a4c5def7e3722785f9522f0900d3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Location FHIR resources", "fhir_resource": "Location"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Location", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Location FHIR resources", "fhir_resource": "Location"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Location", "meta": {"description": "Location FHIR resources", "fhir_resource": "Location"}, "materialized": "ephemeral"}, "created_at": 1691506479.682813, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Location_view' )}}\n{{ config(\n    name = \"Location\",\n    meta = {\n      \"description\": \"Location FHIR resources\",\n      \"fhir_resource\": \"Location\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Location_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Location_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Location.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Composition": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Composition", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Composition.sql", "original_file_path": "models/fhir_resources/Composition.sql", "unique_id": "model.fhir_dbt_analytics.Composition", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Composition"], "alias": "Composition", "checksum": {"name": "sha256", "checksum": "113d51086bc0c903dbd932adedfcca9fe4156c0dab6a403c8fcbde1fc3c7dde3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Composition FHIR resources filtered by cohort", "fhir_resource": "Composition"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Composition", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Composition FHIR resources filtered by cohort", "fhir_resource": "Composition"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Composition", "meta": {"description": "Composition FHIR resources filtered by cohort", "fhir_resource": "Composition"}, "materialized": "ephemeral"}, "created_at": 1691506479.68683, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Composition_view' )}}\n{{ config(\n    name = \"Composition\",\n    meta = {\n      \"description\": \"Composition FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Composition\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Composition_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Composition_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Composition.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Composition_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.PractitionerRole": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "PractitionerRole", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/PractitionerRole.sql", "original_file_path": "models/fhir_resources/PractitionerRole.sql", "unique_id": "model.fhir_dbt_analytics.PractitionerRole", "fqn": ["fhir_dbt_analytics", "fhir_resources", "PractitionerRole"], "alias": "PractitionerRole", "checksum": {"name": "sha256", "checksum": "99bdb73acb00ac757fdd361f00dd04f6379eae01173f986f1e6695fa4c58cf3c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "PractitionerRole", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "PractitionerRole", "meta": {"description": "PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole"}, "materialized": "ephemeral"}, "created_at": 1691506479.6909409, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('PractitionerRole_view' )}}\n{{ config(\n    name = \"PractitionerRole\",\n    meta = {\n      \"description\": \"PractitionerRole FHIR resources\",\n      \"fhir_resource\": \"PractitionerRole\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "PractitionerRole_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.PractitionerRole_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/PractitionerRole.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Patient": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Patient", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Patient.sql", "original_file_path": "models/fhir_resources/Patient.sql", "unique_id": "model.fhir_dbt_analytics.Patient", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Patient"], "alias": "Patient", "checksum": {"name": "sha256", "checksum": "98cfdcba4d98b1ca966bba771e0feb5b0e6afebc6711a9e17581cf741f67efec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Patient FHIR resources filtered by cohort", "fhir_resource": "Patient"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Patient", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Patient FHIR resources filtered by cohort", "fhir_resource": "Patient"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Patient", "meta": {"description": "Patient FHIR resources filtered by cohort", "fhir_resource": "Patient"}, "materialized": "ephemeral"}, "created_at": 1691506479.695062, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Patient_view' )}}\n{{ config(\n    name = \"Patient\",\n    meta = {\n      \"description\": \"Patient FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Patient\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Patient_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Patient_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Patient.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Encounter_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Encounter_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Encounter_view.sql", "original_file_path": "models/fhir_resources/Encounter_view.sql", "unique_id": "model.fhir_dbt_analytics.Encounter_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Encounter_view"], "alias": "Encounter_view", "checksum": {"name": "sha256", "checksum": "387653ee97d5c4327b18d437bb8ce18a9884037e464b4108363c5d7586ee1641"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Encounter FHIR resources", "fhir_resource": "Encounter", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Encounter_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Encounter FHIR resources", "fhir_resource": "Encounter", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Encounter_view", "meta": {"description": "Union of all Encounter FHIR resources", "fhir_resource": "Encounter", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.699224, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Encounter_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Encounter_view\",\n    meta = {\n      \"description\": \"Union of all Encounter FHIR resources\",\n      \"fhir_resource\": \"Encounter\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Encounter_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.ImagingStudy": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "ImagingStudy", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/ImagingStudy.sql", "original_file_path": "models/fhir_resources/ImagingStudy.sql", "unique_id": "model.fhir_dbt_analytics.ImagingStudy", "fqn": ["fhir_dbt_analytics", "fhir_resources", "ImagingStudy"], "alias": "ImagingStudy", "checksum": {"name": "sha256", "checksum": "dea000b099144a8118b955142cfa069b1c44abef41c7e9031e1b2103f72925c9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "ImagingStudy FHIR resources filtered by cohort", "fhir_resource": "ImagingStudy"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "ImagingStudy", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "ImagingStudy FHIR resources filtered by cohort", "fhir_resource": "ImagingStudy"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "ImagingStudy", "meta": {"description": "ImagingStudy FHIR resources filtered by cohort", "fhir_resource": "ImagingStudy"}, "materialized": "ephemeral"}, "created_at": 1691506479.704797, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('ImagingStudy_view' )}}\n{{ config(\n    name = \"ImagingStudy\",\n    meta = {\n      \"description\": \"ImagingStudy FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"ImagingStudy\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "ImagingStudy_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.ImagingStudy_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/ImagingStudy.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ImagingStudy_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ImagingStudy_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Condition": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Condition", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Condition.sql", "original_file_path": "models/fhir_resources/Condition.sql", "unique_id": "model.fhir_dbt_analytics.Condition", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Condition"], "alias": "Condition", "checksum": {"name": "sha256", "checksum": "ae73dbdb9eea9cbeaef2292a9c381dace73e18194859c8630013525d12a17878"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Condition FHIR resources filtered by cohort", "fhir_resource": "Condition"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Condition", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Condition FHIR resources filtered by cohort", "fhir_resource": "Condition"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Condition", "meta": {"description": "Condition FHIR resources filtered by cohort", "fhir_resource": "Condition"}, "materialized": "ephemeral"}, "created_at": 1691506479.709016, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Condition_view' )}}\n{{ config(\n    name = \"Condition\",\n    meta = {\n      \"description\": \"Condition FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Condition\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Condition_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Condition_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Condition.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Medication": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Medication", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Medication.sql", "original_file_path": "models/fhir_resources/Medication.sql", "unique_id": "model.fhir_dbt_analytics.Medication", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Medication"], "alias": "Medication", "checksum": {"name": "sha256", "checksum": "777e1ecf77eea0da1bb3dca2c030dab939500b1f4eb6a81aec976859ad2322d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Medication FHIR resources", "fhir_resource": "Medication"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Medication", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Medication FHIR resources", "fhir_resource": "Medication"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Medication", "meta": {"description": "Medication FHIR resources", "fhir_resource": "Medication"}, "materialized": "ephemeral"}, "created_at": 1691506479.712996, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Medication_view' )}}\n{{ config(\n    name = \"Medication\",\n    meta = {\n      \"description\": \"Medication FHIR resources\",\n      \"fhir_resource\": \"Medication\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Medication_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Medication_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Medication.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Medication_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Medication_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.MedicationAdministration_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "MedicationAdministration_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/MedicationAdministration_view.sql", "original_file_path": "models/fhir_resources/MedicationAdministration_view.sql", "unique_id": "model.fhir_dbt_analytics.MedicationAdministration_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationAdministration_view"], "alias": "MedicationAdministration_view", "checksum": {"name": "sha256", "checksum": "1498700ed5c06ee557c67f74c9a94c3f46eba49ece3360e532bdbe72bbe008a5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all MedicationAdministration FHIR resources", "fhir_resource": "MedicationAdministration", "metric_date_columns": ["effective.period.start", "effective.dateTime"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationAdministration_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all MedicationAdministration FHIR resources", "fhir_resource": "MedicationAdministration", "metric_date_columns": ["effective.period.start", "effective.dateTime"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationAdministration_view", "meta": {"description": "Union of all MedicationAdministration FHIR resources", "fhir_resource": "MedicationAdministration", "metric_date_columns": ["effective.period.start", "effective.dateTime"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.717165, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"MedicationAdministration_view\",\n    meta = {\n      \"description\": \"Union of all MedicationAdministration FHIR resources\",\n      \"fhir_resource\": \"MedicationAdministration\",\n      \"metric_date_columns\": [\"effective.period.start\", \"effective.dateTime\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationAdministration_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.DiagnosticReport": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "DiagnosticReport", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/DiagnosticReport.sql", "original_file_path": "models/fhir_resources/DiagnosticReport.sql", "unique_id": "model.fhir_dbt_analytics.DiagnosticReport", "fqn": ["fhir_dbt_analytics", "fhir_resources", "DiagnosticReport"], "alias": "DiagnosticReport", "checksum": {"name": "sha256", "checksum": "3149bbba451621b98c707ed57af5ed5134c1efa2bbe0e0c378c66e382e587bd6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "DiagnosticReport FHIR resources filtered by cohort", "fhir_resource": "DiagnosticReport"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "DiagnosticReport", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "DiagnosticReport FHIR resources filtered by cohort", "fhir_resource": "DiagnosticReport"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "DiagnosticReport", "meta": {"description": "DiagnosticReport FHIR resources filtered by cohort", "fhir_resource": "DiagnosticReport"}, "materialized": "ephemeral"}, "created_at": 1691506479.7217731, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('DiagnosticReport_view' )}}\n{{ config(\n    name = \"DiagnosticReport\",\n    meta = {\n      \"description\": \"DiagnosticReport FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"DiagnosticReport\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "DiagnosticReport_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.DiagnosticReport_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/DiagnosticReport.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.MedicationStatement_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "MedicationStatement_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/MedicationStatement_view.sql", "original_file_path": "models/fhir_resources/MedicationStatement_view.sql", "unique_id": "model.fhir_dbt_analytics.MedicationStatement_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationStatement_view"], "alias": "MedicationStatement_view", "checksum": {"name": "sha256", "checksum": "dd1add0eba580373a25f585b4244ad656d3f3a6eaade6a0caf6f9471bbe73bc5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all MedicationStatement FHIR resources", "fhir_resource": "MedicationStatement", "metric_date_columns": ["dateAsserted"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationStatement_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all MedicationStatement FHIR resources", "fhir_resource": "MedicationStatement", "metric_date_columns": ["dateAsserted"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationStatement_view", "meta": {"description": "Union of all MedicationStatement FHIR resources", "fhir_resource": "MedicationStatement", "metric_date_columns": ["dateAsserted"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.7259898, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationStatement_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"MedicationStatement_view\",\n    meta = {\n      \"description\": \"Union of all MedicationStatement FHIR resources\",\n      \"fhir_resource\": \"MedicationStatement\",\n      \"metric_date_columns\": [\"dateAsserted\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationStatement_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.MedicationDispense_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "MedicationDispense_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/MedicationDispense_view.sql", "original_file_path": "models/fhir_resources/MedicationDispense_view.sql", "unique_id": "model.fhir_dbt_analytics.MedicationDispense_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationDispense_view"], "alias": "MedicationDispense_view", "checksum": {"name": "sha256", "checksum": "abaf39c8ecd554c4d5a7da7b82b66d4392360577b54df8a9a65d2d16ba287f88"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "MedicationDispense", "metric_date_columns": ["whenPrepared"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationDispense_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "MedicationDispense", "metric_date_columns": ["whenPrepared"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationDispense_view", "meta": {"description": "Union of all Medication FHIR resources", "fhir_resource": "MedicationDispense", "metric_date_columns": ["whenPrepared"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.730505, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"MedicationDispense_view\",\n    meta = {\n      \"description\": \"Union of all Medication FHIR resources\",\n      \"fhir_resource\": \"MedicationDispense\",\n      \"metric_date_columns\": [\"whenPrepared\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationDispense_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Organization": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Organization", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Organization.sql", "original_file_path": "models/fhir_resources/Organization.sql", "unique_id": "model.fhir_dbt_analytics.Organization", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Organization"], "alias": "Organization", "checksum": {"name": "sha256", "checksum": "9e3a014f7056afade98f990ad59e166d5617467061cfefc7ef238fd2ba431e8f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Organization FHIR resources filtered by cohort", "fhir_resource": "Organization"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Organization", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Organization FHIR resources filtered by cohort", "fhir_resource": "Organization"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Organization", "meta": {"description": "Organization FHIR resources filtered by cohort", "fhir_resource": "Organization"}, "materialized": "ephemeral"}, "created_at": 1691506479.7363148, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Organization_view' )}}\n{{ config(\n    name = \"Organization\",\n    meta = {\n      \"description\": \"Organization FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Organization\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Organization_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Organization_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Organization.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Organization_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Organization_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.PractitionerRole_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "PractitionerRole_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/PractitionerRole_view.sql", "original_file_path": "models/fhir_resources/PractitionerRole_view.sql", "unique_id": "model.fhir_dbt_analytics.PractitionerRole_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "PractitionerRole_view"], "alias": "PractitionerRole_view", "checksum": {"name": "sha256", "checksum": "fd504cf85c58f456f602cce9debebe7e5bda94de6e4e128f09ab587e08169a17"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole", "metric_date_columns": ["period.start"], "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "PractitionerRole_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole", "metric_date_columns": ["period.start"], "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "PractitionerRole_view", "meta": {"description": "Union of all PractitionerRole FHIR resources", "fhir_resource": "PractitionerRole", "metric_date_columns": ["period.start"], "patient_reference_column": null}, "materialized": "view"}, "created_at": 1691506479.740555, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`PractitionerRole_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"PractitionerRole_view\",\n    meta = {\n      \"description\": \"Union of all PractitionerRole FHIR resources\",\n      \"fhir_resource\": \"PractitionerRole\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/PractitionerRole_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.ServiceRequest_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "ServiceRequest_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/ServiceRequest_view.sql", "original_file_path": "models/fhir_resources/ServiceRequest_view.sql", "unique_id": "model.fhir_dbt_analytics.ServiceRequest_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "ServiceRequest_view"], "alias": "ServiceRequest_view", "checksum": {"name": "sha256", "checksum": "d085429d6426487b075f8177221bd51a8cb5fddf600fd6e90a1cea129433bc32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all ServiceRequest FHIR resources", "fhir_resource": "ServiceRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "ServiceRequest_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all ServiceRequest FHIR resources", "fhir_resource": "ServiceRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "ServiceRequest_view", "meta": {"description": "Union of all ServiceRequest FHIR resources", "fhir_resource": "ServiceRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.7450979, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"ServiceRequest_view\",\n    meta = {\n      \"description\": \"Union of all ServiceRequest FHIR resources\",\n      \"fhir_resource\": \"ServiceRequest\",\n      \"metric_date_columns\": [\"authoredOn\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/ServiceRequest_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Questionnaire_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Questionnaire_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Questionnaire_view.sql", "original_file_path": "models/fhir_resources/Questionnaire_view.sql", "unique_id": "model.fhir_dbt_analytics.Questionnaire_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Questionnaire_view"], "alias": "Questionnaire_view", "checksum": {"name": "sha256", "checksum": "ce1a83df8e2a1ec1e935bdfc1b46bcea9771978d87531b44695f54aef113e08d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Questionnaire FHIR resources", "fhir_resource": "Questionnaire", "metric_date_columns": ["date"], "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Questionnaire_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Questionnaire FHIR resources", "fhir_resource": "Questionnaire", "metric_date_columns": ["date"], "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Questionnaire_view", "meta": {"description": "Union of all Questionnaire FHIR resources", "fhir_resource": "Questionnaire", "metric_date_columns": ["date"], "patient_reference_column": null}, "materialized": "view"}, "created_at": 1691506479.749621, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Questionnaire_view\",\n    meta = {\n      \"description\": \"Union of all Questionnaire FHIR resources\",\n      \"fhir_resource\": \"Questionnaire\",\n      \"metric_date_columns\": [\"date\"],\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Questionnaire_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,IF(\n      CHAR_LENGTH(date) = 10,\n      \n    safe_cast(date as date)\n,\n      DATE(\n            safe_cast(date as TIMESTAMP)\n        , 'America/New_York')\n    ) AS metric_date,IF(\n      CHAR_LENGTH(date) = 10,\n      \n    safe_cast(NULL as TIMESTAMP)\n,\n      TIMESTAMP_TRUNC(\n    safe_cast(date as TIMESTAMP)\n, hour, 'America/New_York')\n    ) AS metric_hour,\n    'DRC-PPI' AS source_system,\n    'DRC PPI' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `aou-datawarehouse-sandbox`.`ppi_001`.`Questionnaire`\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.DocumentReference_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "DocumentReference_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/DocumentReference_view.sql", "original_file_path": "models/fhir_resources/DocumentReference_view.sql", "unique_id": "model.fhir_dbt_analytics.DocumentReference_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "DocumentReference_view"], "alias": "DocumentReference_view", "checksum": {"name": "sha256", "checksum": "c988f5c7430f111b0bc1d94444c876e7aa942f53ac157c55eef89d965710e84e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all DocumentReference FHIR resources", "fhir_resource": "DocumentReference", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "DocumentReference_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all DocumentReference FHIR resources", "fhir_resource": "DocumentReference", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "DocumentReference_view", "meta": {"description": "Union of all DocumentReference FHIR resources", "fhir_resource": "DocumentReference", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.7541811, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"DocumentReference_view\",\n    meta = {\n      \"description\": \"Union of all DocumentReference FHIR resources\",\n      \"fhir_resource\": \"DocumentReference\",\n      \"metric_date_columns\": [\"date\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/DocumentReference_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.DocumentReference": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "DocumentReference", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/DocumentReference.sql", "original_file_path": "models/fhir_resources/DocumentReference.sql", "unique_id": "model.fhir_dbt_analytics.DocumentReference", "fqn": ["fhir_dbt_analytics", "fhir_resources", "DocumentReference"], "alias": "DocumentReference", "checksum": {"name": "sha256", "checksum": "6a6aec531376fffcd072520eb8497521d90702296bd89e2e4ada6b9fdae837ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "DocumentReference FHIR resources filtered by cohort", "fhir_resource": "DocumentReference"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "DocumentReference", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "DocumentReference FHIR resources filtered by cohort", "fhir_resource": "DocumentReference"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "DocumentReference", "meta": {"description": "DocumentReference FHIR resources filtered by cohort", "fhir_resource": "DocumentReference"}, "materialized": "ephemeral"}, "created_at": 1691506479.7587159, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('DocumentReference_view' )}}\n{{ config(\n    name = \"DocumentReference\",\n    meta = {\n      \"description\": \"DocumentReference FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"DocumentReference\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "DocumentReference_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.DocumentReference_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/DocumentReference.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DocumentReference_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Observation": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Observation", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Observation.sql", "original_file_path": "models/fhir_resources/Observation.sql", "unique_id": "model.fhir_dbt_analytics.Observation", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Observation"], "alias": "Observation", "checksum": {"name": "sha256", "checksum": "f6f5c5ac48c2734570c5fbc9e7b484222e166e6ea67a30eb68848627f15dc7d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Observation FHIR resources filtered by cohort", "fhir_resource": "Observation"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Observation", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Observation FHIR resources filtered by cohort", "fhir_resource": "Observation"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Observation", "meta": {"description": "Observation FHIR resources filtered by cohort", "fhir_resource": "Observation"}, "materialized": "ephemeral"}, "created_at": 1691506479.764152, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Observation_view' )}}\n{{ config(\n    name = \"Observation\",\n    meta = {\n      \"description\": \"Observation FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Observation\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Observation_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Observation_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Observation.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Patient_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Patient_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Patient_view.sql", "original_file_path": "models/fhir_resources/Patient_view.sql", "unique_id": "model.fhir_dbt_analytics.Patient_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Patient_view"], "alias": "Patient_view", "checksum": {"name": "sha256", "checksum": "e74ff3d7b64ec88151bb986e55eebd01a880adaa9c4285a326a84f4d0b9a319e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Patient FHIR resources", "fhir_resource": "Patient", "metric_date_columns": null, "patient_reference_column": "id"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Patient_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Patient FHIR resources", "fhir_resource": "Patient", "metric_date_columns": null, "patient_reference_column": "id"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Patient_view", "meta": {"description": "Union of all Patient FHIR resources", "fhir_resource": "Patient", "metric_date_columns": null, "patient_reference_column": "id"}, "materialized": "view"}, "created_at": 1691506479.7681699, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Patient_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Patient_view\",\n    meta = {\n      \"description\": \"Union of all Patient FHIR resources\",\n      \"fhir_resource\": \"Patient\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": \"id\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Patient_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    CAST(NULL AS DATE) AS metric_date,\n    CAST(NULL AS TIMESTAMP) AS metric_hour,\n    'DRC-PPI' AS source_system,\n    'DRC PPI' AS site,\n    'BigQuery' AS data_transfer_type\nFROM `aou-datawarehouse-sandbox`.`ppi_001`.`Patient`\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Location_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Location_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Location_view.sql", "original_file_path": "models/fhir_resources/Location_view.sql", "unique_id": "model.fhir_dbt_analytics.Location_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Location_view"], "alias": "Location_view", "checksum": {"name": "sha256", "checksum": "e83bc64d659cfa2b1d0fa792b91d232125740f14f0c65272c014bc01d14f042b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Location FHIR resources", "fhir_resource": "Location", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Location_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Location FHIR resources", "fhir_resource": "Location", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Location_view", "meta": {"description": "Union of all Location FHIR resources", "fhir_resource": "Location", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1691506479.7726028, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Location_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Location_view\",\n    meta = {\n      \"description\": \"Union of all Location FHIR resources\",\n      \"fhir_resource\": \"Location\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Location_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Condition_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Condition_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Condition_view.sql", "original_file_path": "models/fhir_resources/Condition_view.sql", "unique_id": "model.fhir_dbt_analytics.Condition_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Condition_view"], "alias": "Condition_view", "checksum": {"name": "sha256", "checksum": "7258238f7f66eaff53519b839ac909de8c2d8b7f590c547d7215d566692f5b45"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Condition FHIR resources", "fhir_resource": "Condition", "metric_date_columns": ["recordedDate"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Condition_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Condition FHIR resources", "fhir_resource": "Condition", "metric_date_columns": ["recordedDate"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Condition_view", "meta": {"description": "Union of all Condition FHIR resources", "fhir_resource": "Condition", "metric_date_columns": ["recordedDate"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.777067, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Condition_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Condition_view\",\n    meta = {\n      \"description\": \"Union of all Condition FHIR resources\",\n      \"fhir_resource\": \"Condition\",\n      \"metric_date_columns\": [\"recordedDate\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Condition_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Organization_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Organization_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Organization_view.sql", "original_file_path": "models/fhir_resources/Organization_view.sql", "unique_id": "model.fhir_dbt_analytics.Organization_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Organization_view"], "alias": "Organization_view", "checksum": {"name": "sha256", "checksum": "909bd1067238b695082e7611eb944a4f7dbe3ca6cada5c9de184bc8c916698c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Organization FHIR resources", "fhir_resource": "Organization", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Organization_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Organization FHIR resources", "fhir_resource": "Organization", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Organization_view", "meta": {"description": "Union of all Organization FHIR resources", "fhir_resource": "Organization", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1691506479.7815208, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Organization_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Organization_view\",\n    meta = {\n      \"description\": \"Union of all Organization FHIR resources\",\n      \"fhir_resource\": \"Organization\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Organization_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.ServiceRequest": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "ServiceRequest", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/ServiceRequest.sql", "original_file_path": "models/fhir_resources/ServiceRequest.sql", "unique_id": "model.fhir_dbt_analytics.ServiceRequest", "fqn": ["fhir_dbt_analytics", "fhir_resources", "ServiceRequest"], "alias": "ServiceRequest", "checksum": {"name": "sha256", "checksum": "ecf59996afec75c0528c6d73321fa7e644ca5b7ace1328e19d292f8d4e6d7efe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "ServiceRequest FHIR resources filtered by cohort", "fhir_resource": "ServiceRequest"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "ServiceRequest", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "ServiceRequest FHIR resources filtered by cohort", "fhir_resource": "ServiceRequest"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "ServiceRequest", "meta": {"description": "ServiceRequest FHIR resources filtered by cohort", "fhir_resource": "ServiceRequest"}, "materialized": "ephemeral"}, "created_at": 1691506479.7859719, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('ServiceRequest_view' )}}\n{{ config(\n    name = \"ServiceRequest\",\n    meta = {\n      \"description\": \"ServiceRequest FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"ServiceRequest\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "ServiceRequest_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.ServiceRequest_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/ServiceRequest.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`ServiceRequest_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.CareTeam_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "CareTeam_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/CareTeam_view.sql", "original_file_path": "models/fhir_resources/CareTeam_view.sql", "unique_id": "model.fhir_dbt_analytics.CareTeam_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "CareTeam_view"], "alias": "CareTeam_view", "checksum": {"name": "sha256", "checksum": "ed1ce472307f0986cc694d608e109a9b1018a1e489f88fe3f8a50d072f3fa393"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all CareTeam FHIR resources", "fhir_resource": "CareTeam", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "CareTeam_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all CareTeam FHIR resources", "fhir_resource": "CareTeam", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "CareTeam_view", "meta": {"description": "Union of all CareTeam FHIR resources", "fhir_resource": "CareTeam", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.791669, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"CareTeam_view\",\n    meta = {\n      \"description\": \"Union of all CareTeam FHIR resources\",\n      \"fhir_resource\": \"CareTeam\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/CareTeam_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.AllergyIntolerance": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "AllergyIntolerance", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/AllergyIntolerance.sql", "original_file_path": "models/fhir_resources/AllergyIntolerance.sql", "unique_id": "model.fhir_dbt_analytics.AllergyIntolerance", "fqn": ["fhir_dbt_analytics", "fhir_resources", "AllergyIntolerance"], "alias": "AllergyIntolerance", "checksum": {"name": "sha256", "checksum": "48ac667f1c6ef4fdaa2548315436d92963aa1ad9ee6fa0381ce40e328641b23c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "AllergyIntolerance FHIR resources filtered by cohort", "fhir_resource": "AllergyIntolerance"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "AllergyIntolerance", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "AllergyIntolerance FHIR resources filtered by cohort", "fhir_resource": "AllergyIntolerance"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "AllergyIntolerance", "meta": {"description": "AllergyIntolerance FHIR resources filtered by cohort", "fhir_resource": "AllergyIntolerance"}, "materialized": "ephemeral"}, "created_at": 1691506479.796553, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('AllergyIntolerance_view' )}}\n{{ config(\n    name = \"AllergyIntolerance\",\n    meta = {\n      \"description\": \"AllergyIntolerance FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"AllergyIntolerance\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "AllergyIntolerance_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.AllergyIntolerance_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/AllergyIntolerance.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`AllergyIntolerance_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Questionnaire": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Questionnaire", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Questionnaire.sql", "original_file_path": "models/fhir_resources/Questionnaire.sql", "unique_id": "model.fhir_dbt_analytics.Questionnaire", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Questionnaire"], "alias": "Questionnaire", "checksum": {"name": "sha256", "checksum": "d4c955351543dcc69222cbb4a1090f4b04fc3f07d48699cedfca63456b732993"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Questionnaire FHIR resources filtered by ???", "fhir_resource": "Questionnaire"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Questionnaire", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Questionnaire FHIR resources filtered by ???", "fhir_resource": "Questionnaire"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Questionnaire", "meta": {"description": "Questionnaire FHIR resources filtered by ???", "fhir_resource": "Questionnaire"}, "materialized": "ephemeral"}, "created_at": 1691506479.80131, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Questionnaire_view' )}}\n{{ config(\n    name = \"Questionnaire\",\n    meta = {\n      \"description\": \"Questionnaire FHIR resources filtered by ???\",\n      \"fhir_resource\": \"Questionnaire\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Questionnaire_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Questionnaire_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Questionnaire.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Questionnaire_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.CareTeam": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "CareTeam", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/CareTeam.sql", "original_file_path": "models/fhir_resources/CareTeam.sql", "unique_id": "model.fhir_dbt_analytics.CareTeam", "fqn": ["fhir_dbt_analytics", "fhir_resources", "CareTeam"], "alias": "CareTeam", "checksum": {"name": "sha256", "checksum": "cb18d0555dd518d6cd40517165d2a9f50d3ebb6d347612210b7b229ae6835daf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "CareTeam FHIR resources filtered by cohort", "fhir_resource": "CareTeam"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "CareTeam", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "CareTeam FHIR resources filtered by cohort", "fhir_resource": "CareTeam"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "CareTeam", "meta": {"description": "CareTeam FHIR resources filtered by cohort", "fhir_resource": "CareTeam"}, "materialized": "ephemeral"}, "created_at": 1691506479.805689, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('CareTeam_view' )}}\n{{ config(\n    name = \"CareTeam\",\n    meta = {\n      \"description\": \"CareTeam FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"CareTeam\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "CareTeam_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.CareTeam_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/CareTeam.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`CareTeam_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.MedicationAdministration": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "MedicationAdministration", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/MedicationAdministration.sql", "original_file_path": "models/fhir_resources/MedicationAdministration.sql", "unique_id": "model.fhir_dbt_analytics.MedicationAdministration", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationAdministration"], "alias": "MedicationAdministration", "checksum": {"name": "sha256", "checksum": "dde9597fd89f47c20d902d0cc142b97703726bc325ab622cab7d8e4aed712d76"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "MedicationAdministration FHIR resources filtered by cohort", "fhir_resource": "MedicationAdministration"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationAdministration", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "MedicationAdministration FHIR resources filtered by cohort", "fhir_resource": "MedicationAdministration"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationAdministration", "meta": {"description": "MedicationAdministration FHIR resources filtered by cohort", "fhir_resource": "MedicationAdministration"}, "materialized": "ephemeral"}, "created_at": 1691506479.8101308, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('MedicationAdministration_view' )}}\n{{ config(\n    name = \"MedicationAdministration\",\n    meta = {\n      \"description\": \"MedicationAdministration FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"MedicationAdministration\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "MedicationAdministration_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.MedicationAdministration_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationAdministration.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationAdministration_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Observation_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Observation_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Observation_view.sql", "original_file_path": "models/fhir_resources/Observation_view.sql", "unique_id": "model.fhir_dbt_analytics.Observation_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Observation_view"], "alias": "Observation_view", "checksum": {"name": "sha256", "checksum": "3d3109a40dfde284e4468653cb294e9e8a0f82d8b91055196f74b8929d4ea82e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Observation FHIR resources", "fhir_resource": "Observation", "metric_date_columns": ["effective.dateTime"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Observation_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Observation FHIR resources", "fhir_resource": "Observation", "metric_date_columns": ["effective.dateTime"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Observation_view", "meta": {"description": "Union of all Observation FHIR resources", "fhir_resource": "Observation", "metric_date_columns": ["effective.dateTime"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.815146, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Observation_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Observation_view\",\n    meta = {\n      \"description\": \"Union of all Observation FHIR resources\",\n      \"fhir_resource\": \"Observation\",\n      \"metric_date_columns\": [\"effective.dateTime\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Observation_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.DiagnosticReport_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "DiagnosticReport_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/DiagnosticReport_view.sql", "original_file_path": "models/fhir_resources/DiagnosticReport_view.sql", "unique_id": "model.fhir_dbt_analytics.DiagnosticReport_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "DiagnosticReport_view"], "alias": "DiagnosticReport_view", "checksum": {"name": "sha256", "checksum": "4f809c0611b88b9b10ac120a32bac937f50d54049a5645c8621f668eed2510b3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all DiagnosticReport FHIR resources", "fhir_resource": "DiagnosticReport", "metric_date_columns": ["issued"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "DiagnosticReport_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all DiagnosticReport FHIR resources", "fhir_resource": "DiagnosticReport", "metric_date_columns": ["issued"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "DiagnosticReport_view", "meta": {"description": "Union of all DiagnosticReport FHIR resources", "fhir_resource": "DiagnosticReport", "metric_date_columns": ["issued"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.8200269, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`DiagnosticReport_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"DiagnosticReport_view\",\n    meta = {\n      \"description\": \"Union of all DiagnosticReport FHIR resources\",\n      \"fhir_resource\": \"DiagnosticReport\",\n      \"metric_date_columns\": [\"issued\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/DiagnosticReport_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Practitioner_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Practitioner_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Practitioner_view.sql", "original_file_path": "models/fhir_resources/Practitioner_view.sql", "unique_id": "model.fhir_dbt_analytics.Practitioner_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Practitioner_view"], "alias": "Practitioner_view", "checksum": {"name": "sha256", "checksum": "a959bdf1c3a3f22cfdbfcc440520fcb3b2b1ff28c26279ee17c448f3056575f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Practitioner FHIR resources", "fhir_resource": "Practitioner", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Practitioner_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Practitioner FHIR resources", "fhir_resource": "Practitioner", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Practitioner_view", "meta": {"description": "Union of all Practitioner FHIR resources", "fhir_resource": "Practitioner", "metric_date_columns": null, "patient_reference_column": null}, "materialized": "view"}, "created_at": 1691506479.826645, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Practitioner_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Practitioner_view\",\n    meta = {\n      \"description\": \"Union of all Practitioner FHIR resources\",\n      \"fhir_resource\": \"Practitioner\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Practitioner_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Person_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Person_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Person_view.sql", "original_file_path": "models/fhir_resources/Person_view.sql", "unique_id": "model.fhir_dbt_analytics.Person_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Person_view"], "alias": "Person_view", "checksum": {"name": "sha256", "checksum": "16591f6e8acf9c53ffb47da1d1140f55df63bfbb073511bd5358d2f33ef80aa4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Person FHIR resources", "fhir_resource": "Person", "metric_date_columns": null, "patient_reference_column": "link[].target"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Person_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Person FHIR resources", "fhir_resource": "Person", "metric_date_columns": null, "patient_reference_column": "link[].target"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Person_view", "meta": {"description": "Union of all Person FHIR resources", "fhir_resource": "Person", "metric_date_columns": null, "patient_reference_column": "link[].target"}, "materialized": "view"}, "created_at": 1691506479.83139, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Person_view\",\n    meta = {\n      \"description\": \"Union of all Person FHIR resources\",\n      \"fhir_resource\": \"Person\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": \"link[].target\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Person_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  \n    [ STRUCT(STRUCT('no_data' AS patientId) AS target) ]\n     AS link,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.QuestionnaireResponse": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "QuestionnaireResponse", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/QuestionnaireResponse.sql", "original_file_path": "models/fhir_resources/QuestionnaireResponse.sql", "unique_id": "model.fhir_dbt_analytics.QuestionnaireResponse", "fqn": ["fhir_dbt_analytics", "fhir_resources", "QuestionnaireResponse"], "alias": "QuestionnaireResponse", "checksum": {"name": "sha256", "checksum": "6567c834d5716373d0f7f9657857031f3024c637673fe02021c63f8374e5d27b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "QuestionnaireResponse FHIR resources filtered by cohort???", "fhir_resource": "QuestionnaireResponse"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "QuestionnaireResponse", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "QuestionnaireResponse FHIR resources filtered by cohort???", "fhir_resource": "QuestionnaireResponse"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "QuestionnaireResponse", "meta": {"description": "QuestionnaireResponse FHIR resources filtered by cohort???", "fhir_resource": "QuestionnaireResponse"}, "materialized": "ephemeral"}, "created_at": 1691506479.835999, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('QuestionnaireResponse_view' )}}\n{{ config(\n    name = \"QuestionnaireResponse\",\n    meta = {\n      \"description\": \"QuestionnaireResponse FHIR resources filtered by cohort???\",\n      \"fhir_resource\": \"QuestionnaireResponse\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "QuestionnaireResponse_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.QuestionnaireResponse_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/QuestionnaireResponse.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`QuestionnaireResponse_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`QuestionnaireResponse_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Person": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Person", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Person.sql", "original_file_path": "models/fhir_resources/Person.sql", "unique_id": "model.fhir_dbt_analytics.Person", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Person"], "alias": "Person", "checksum": {"name": "sha256", "checksum": "4dc8a06eac3524c0965abbd6ab79d20a6e99e717c36a3069b82ab29603074dc5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Person FHIR resources filtered by cohort", "fhir_resource": "Person"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Person", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Person FHIR resources filtered by cohort", "fhir_resource": "Person"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Person", "meta": {"description": "Person FHIR resources filtered by cohort", "fhir_resource": "Person"}, "materialized": "ephemeral"}, "created_at": 1691506479.840054, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('Person_view' )}}\n{{ config(\n    name = \"Person\",\n    meta = {\n      \"description\": \"Person FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"Person\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "Person_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.Person_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Person.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Person_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.MedicationDispense": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "MedicationDispense", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/MedicationDispense.sql", "original_file_path": "models/fhir_resources/MedicationDispense.sql", "unique_id": "model.fhir_dbt_analytics.MedicationDispense", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationDispense"], "alias": "MedicationDispense", "checksum": {"name": "sha256", "checksum": "d27aba37d6f91cf3f739215467e105b9ecab6e559c98c87296789ba936de26d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "MedicationDispense FHIR resources", "fhir_resource": "MedicationDispense"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationDispense", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "MedicationDispense FHIR resources", "fhir_resource": "MedicationDispense"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationDispense", "meta": {"description": "MedicationDispense FHIR resources", "fhir_resource": "MedicationDispense"}, "materialized": "ephemeral"}, "created_at": 1691506479.844106, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('MedicationDispense_view' )}}\n{{ config(\n    name = \"MedicationDispense\",\n    meta = {\n      \"description\": \"MedicationDispense FHIR resources\",\n      \"fhir_resource\": \"MedicationDispense\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "MedicationDispense_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.MedicationDispense_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationDispense.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationDispense_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.Procedure_view": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "Procedure_view", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/Procedure_view.sql", "original_file_path": "models/fhir_resources/Procedure_view.sql", "unique_id": "model.fhir_dbt_analytics.Procedure_view", "fqn": ["fhir_dbt_analytics", "fhir_resources", "Procedure_view"], "alias": "Procedure_view", "checksum": {"name": "sha256", "checksum": "a1f30976bc308d4e3bafbabaa0bb9c5c3970f2fe3506e4cec500dca9aa4c13e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all Procedure FHIR resources", "fhir_resource": "Procedure", "metric_date_columns": ["performed.period.start", "performed.dateTime"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Procedure_view", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all Procedure FHIR resources", "fhir_resource": "Procedure", "metric_date_columns": ["performed.period.start", "performed.dateTime"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "Procedure_view", "meta": {"description": "Union of all Procedure FHIR resources", "fhir_resource": "Procedure", "metric_date_columns": ["performed.period.start", "performed.dateTime"], "patient_reference_column": "subject"}, "materialized": "view"}, "created_at": 1691506479.8479722, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`Procedure_view`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n{{- config(\n    name = \"Procedure_view\",\n    meta = {\n      \"description\": \"Union of all Procedure FHIR resources\",\n      \"fhir_resource\": \"Procedure\",\n      \"metric_date_columns\": [\"performed.period.start\", \"performed.dateTime\"],\n      \"patient_reference_column\": \"subject\"\n      },\n    materialized = 'view'\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/Procedure_view.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\nSELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  'DRC-PPI' AS source_system,\n  'DRC PPI' AS site,\n  'BigQuery' AS data_transfer_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.MedicationRequest": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "MedicationRequest", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "fhir_resources/MedicationRequest.sql", "original_file_path": "models/fhir_resources/MedicationRequest.sql", "unique_id": "model.fhir_dbt_analytics.MedicationRequest", "fqn": ["fhir_dbt_analytics", "fhir_resources", "MedicationRequest"], "alias": "MedicationRequest", "checksum": {"name": "sha256", "checksum": "385607ba8ea45661eac70df79e56152383a0d0ff189a31195332dbfeb3548f28"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "MedicationRequest FHIR resources filtered by cohort", "fhir_resource": "MedicationRequest"}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationRequest", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "MedicationRequest FHIR resources filtered by cohort", "fhir_resource": "MedicationRequest"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "MedicationRequest", "meta": {"description": "MedicationRequest FHIR resources filtered by cohort", "fhir_resource": "MedicationRequest"}, "materialized": "ephemeral"}, "created_at": 1691506479.853877, "relation_name": null, "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n-- depends_on: {{ ref('fhir_table_list') }}\n-- depends_on: {{ ref('site_timezones') }}\n-- depends_on: {{ ref('MedicationRequest_view' )}}\n{{ config(\n    name = \"MedicationRequest\",\n    meta = {\n      \"description\": \"MedicationRequest FHIR resources filtered by cohort\",\n      \"fhir_resource\": \"MedicationRequest\"\n      },\n    materialized = 'ephemeral'\n) -}}\n\n{{ fhir_resource_table_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}, {"name": "site_timezones", "package": null, "version": null}, {"name": "MedicationRequest_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_table_expression"], "nodes": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones", "model.fhir_dbt_analytics.MedicationRequest_view"]}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/fhir_resources/MedicationRequest.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`\n-- depends_on: `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`\nSELECT * FROM `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`MedicationRequest_view`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.fhir_table_list": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "fhir_table_list", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metadata/fhir_table_list.sql", "original_file_path": "models/metadata/fhir_table_list.sql", "unique_id": "model.fhir_dbt_analytics.fhir_table_list", "fqn": ["fhir_dbt_analytics", "metadata", "fhir_table_list"], "alias": "fhir_table_list", "checksum": {"name": "sha256", "checksum": "b0ce71546c0e56974bb53d266fef6e43d854ed43335f21cfb0abd38fbcd1ad80"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Creates a table that lists all FHIR resource tables that are located in the `database` and\n`schema` specified within `dbt_project.yml`.\n", "columns": {"bq_project": {"name": "bq_project", "description": "BigQuery project name (equivalent of dbt database).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bq_dataset": {"name": "bq_dataset", "description": "BigQuery dataset name (equivalent of dbt schema).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bq_table": {"name": "bq_table", "description": "BigQuery table name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fully_qualified_bq_table": {"name": "fully_qualified_bq_table", "description": "Full BigQuery table name including project, dataset and table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fhir_resource": {"name": "fhir_resource", "description": "FHIR resource name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "map_name": {"name": "map_name", "description": "Name of mapping that generated FHIR resource.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "latest_version": {"name": "latest_version", "description": "Flag for whether this is the latest table for a given FHIR mapping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "creation_time": {"name": "creation_time", "description": "Timestamp for creation of table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metadata/metadata_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1691506480.0698361, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`fhir_table_list`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{# TODO(jakuba): Explore if we could get table info using SHOW TABLES and processing the result by\n   dbt. #}\n{% if is_spark() %}\n  {%- set path_prefix='fhir_resources/' %}\n  {%- set fhir_resources={} %}\n  {%- for node in graph.nodes.values()\n       if node.resource_type == 'model'\n       and node.path.startswith(path_prefix)\n       and not node.path.endswith('_view.sql') %}\n    {%- set fhir_resource = node.path[path_prefix|length : -4] %}\n    {%- set table_name = get_source_table_name(fhir_resource) %}\n    {%- if adapter.get_relation(\n      database = var('database'),\n      schema = var('schema'),\n      identifier = table_name) %}\n      {%- do fhir_resources.update({fhir_resource: table_name}) %}\n    {%- endif %}\n  {%- endfor %}\n\n  {%- for fhir_resource, table_name in fhir_resources.items() %}\nSELECT\n  '{{ fhir_resource }}' AS fhir_resource,\n  NULL as bq_project,\n  NULL as bq_dataset,\n  '{{ table_name }}' as bq_table,\n  '`{{ var('schema') }}`.`{{ table_name }}`' AS fully_qualified_bq_table,\n  NULL AS map_name,\n  1 as latest_version,\n  NULL AS creation_time\n    {% if not loop.last %}UNION ALL{% endif %}\n  {% endfor %}\n\n{% else %} {# end of is_spark() #}\n\nSELECT\n  table_catalog as bq_project,\n  table_schema as bq_dataset,\n  table_name as bq_table,\n  CONCAT('`', table_catalog, '`.`', table_schema, '`.`', table_name, '`') AS fully_qualified_bq_table,\n  table_name AS fhir_resource,\n  NULL AS map_name,\n  1 AS latest_version,\n  creation_time\nFROM `{{ var('database') }}`.`{{ var('schema') }}`.INFORMATION_SCHEMA.TABLES\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.is_spark"], "nodes": []}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metadata/fhir_table_list.sql", "compiled": true, "compiled_code": "\n\n\n \n\nSELECT\n  table_catalog as bq_project,\n  table_schema as bq_dataset,\n  table_name as bq_table,\n  CONCAT('`', table_catalog, '`.`', table_schema, '`.`', table_name, '`') AS fully_qualified_bq_table,\n  table_name AS fhir_resource,\n  NULL AS map_name,\n  1 AS latest_version,\n  creation_time\nFROM `aou-datawarehouse-sandbox`.`ppi_001`.INFORMATION_SCHEMA.TABLES\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.project_variables": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "project_variables", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metadata/project_variables.sql", "original_file_path": "models/metadata/project_variables.sql", "unique_id": "model.fhir_dbt_analytics.project_variables", "fqn": ["fhir_dbt_analytics", "metadata", "project_variables"], "alias": "project_variables", "checksum": {"name": "sha256", "checksum": "eb0d757a42f83b2ee2fbdad288b1307bfa0b71bd258e0ae41d1ca7c75992f08e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Creates a single row table in the database containing values for all project variables.\n", "columns": {"looker_studio_url": {"name": "looker_studio_url", "description": "URL to create a Looker Studio dashboard displaying the metric outputs. The URL contains your bigquery project and dataset (defined in profiles.yml) as parameters. Copy this URL into a web browser to create a new dashboard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metadata/metadata_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1691506480.0731678, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`project_variables`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\nSELECT\n  '{{ var('organization') }}' AS `organization`,\n  '{{ var('database') }}' AS `database`,\n  '{{ var('schema') }}' AS `schema`,\n  '{{ var('source_system_default') }}' AS `source_system_default`,\n  '{{ var('site_default') }}' AS `site_default`,\n  '{{ var('data_transfer_type_default') }}' AS `data_transfer_type_default`,\n  '{{ var('timezone_default') }}' AS `timezone_default`,\n  {{ var('static_dataset') }} AS `static_dataset`,\n  '{{ var('earliest_date') }}' AS `earliest_date`,\n  '{{ var('latest_date') }}' AS `latest_date`,\n  {{ var('months_history') }} AS `months_history`,\n  {{ var('length_of_stay_cap') }} AS `length_of_stay_cap`,\n  {{ dbt.array_construct(quote_array(var('null_values'))) }} AS `null_values`,\n  {{ var('persist_all_metric_executions') }} AS `persist_all_metric_executions`,\n  '{{ var('cohort') }}' AS `cohort`,\n  '{{ var('cohort_snapshot_date') }}' AS `cohort_snapshot_date`,\n  '{{ var('drop_metric_tables') }}' AS `drop_metric_tables`,\n  {{ linking_api_datasource(\n    report_id='2de086de-b4ab-4431-8786-57ffa47e96b8',\n    datasource_list=[\n      ['mbdd', 'metric_by_day_dimensions'],\n      ['mbd', 'metric_by_day'],\n      ['mo', 'metric_overall'],\n      ['md', 'metric_definition'],\n      ['ftl', 'fhir_table_list'],\n      ['pv', 'project_variables'],\n      ['mel', 'metric_execution_log'],\n      ['mt', 'metric_thresholds']\n    ]) }} AS looker_studio_url", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.quote_array", "macro.dbt.array_construct", "macro.fhir_dbt_analytics.linking_api_datasource"], "nodes": []}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metadata/project_variables.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  'DRC' AS `organization`,\n  'aou-datawarehouse-sandbox' AS `database`,\n  'ppi_001' AS `schema`,\n  'DRC-PPI' AS `source_system_default`,\n  'DRC PPI' AS `site_default`,\n  'BigQuery' AS `data_transfer_type_default`,\n  'America/New_York' AS `timezone_default`,\n  True AS `static_dataset`,\n  '2009-10-01' AS `earliest_date`,\n  '2019-09-23' AS `latest_date`,\n  12 AS `months_history`,\n  90 AS `length_of_stay_cap`,\n  \n    [ '' ]\n     AS `null_values`,\n  False AS `persist_all_metric_executions`,\n  'all_patients' AS `cohort`,\n  'today' AS `cohort_snapshot_date`,\n  'True' AS `drop_metric_tables`,\n  CONCAT(\n    'https://lookerstudio.google.com/reporting/create?',\n    'c.reportId=', '2de086de-b4ab-4431-8786-57ffa47e96b8','&ds.mbdd.type=TABLE',\n    '&ds.mbdd.projectId=', 'aou-datawarehouse-sandbox',\n    '&ds.mbdd.datasetId=', 'mv2451_ppi_001',\n    '&ds.mbdd.tableId=', 'metric_by_day_dimensions','&ds.mbd.type=TABLE',\n    '&ds.mbd.projectId=', 'aou-datawarehouse-sandbox',\n    '&ds.mbd.datasetId=', 'mv2451_ppi_001',\n    '&ds.mbd.tableId=', 'metric_by_day','&ds.mo.type=TABLE',\n    '&ds.mo.projectId=', 'aou-datawarehouse-sandbox',\n    '&ds.mo.datasetId=', 'mv2451_ppi_001',\n    '&ds.mo.tableId=', 'metric_overall','&ds.md.type=TABLE',\n    '&ds.md.projectId=', 'aou-datawarehouse-sandbox',\n    '&ds.md.datasetId=', 'mv2451_ppi_001',\n    '&ds.md.tableId=', 'metric_definition','&ds.ftl.type=TABLE',\n    '&ds.ftl.projectId=', 'aou-datawarehouse-sandbox',\n    '&ds.ftl.datasetId=', 'mv2451_ppi_001',\n    '&ds.ftl.tableId=', 'fhir_table_list','&ds.pv.type=TABLE',\n    '&ds.pv.projectId=', 'aou-datawarehouse-sandbox',\n    '&ds.pv.datasetId=', 'mv2451_ppi_001',\n    '&ds.pv.tableId=', 'project_variables','&ds.mel.type=TABLE',\n    '&ds.mel.projectId=', 'aou-datawarehouse-sandbox',\n    '&ds.mel.datasetId=', 'mv2451_ppi_001',\n    '&ds.mel.tableId=', 'metric_execution_log','&ds.mt.type=TABLE',\n    '&ds.mt.projectId=', 'aou-datawarehouse-sandbox',\n    '&ds.mt.datasetId=', 'mv2451_ppi_001',\n    '&ds.mt.tableId=', 'metric_thresholds'\n  ) AS looker_studio_url", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_all_definitions": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_all_definitions", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metadata/metric_all_definitions.sql", "original_file_path": "models/metadata/metric_all_definitions.sql", "unique_id": "model.fhir_dbt_analytics.metric_all_definitions", "fqn": ["fhir_dbt_analytics", "metadata", "metric_all_definitions"], "alias": "metric_all_definitions", "checksum": {"name": "sha256", "checksum": "564a5140b3d867b6678c95e0d1768e2fd5c6fa097ac5f51ef2e9a6c78bd533e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1691506479.8809469, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_all_definitions`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{% for node in graph.nodes.values() if node.resource_type == 'model' and node.path.startswith('metrics/') %}\nSELECT\n    \"{{ node.path }}\" AS metric_path,\n    \"{{ node.name }}\" AS metric_name,\n    \"{{ node.config.meta.description }}\" AS description,\n    \"{{ node.config.meta.short_description }}\" AS short_description,\n    \"{{ node.config.meta.primary_resource }}\" AS primary_resource,\n    {{ dbt.array_construct(quote_array(node.config.meta.primary_fields)) }} AS primary_fields,\n    {{ dbt.array_construct(quote_array(node.config.meta.secondary_resources))\n       if node.config.meta.secondary_resources else 'NULL' }} AS secondary_resources,\n    \"{{ node.config.meta.category }}\" AS category,\n    \"{{ node.config.meta.calculation }}\" AS calculation,\n    \"{{ node.config.meta.metric_date_field }}\" AS metric_date_field,\n    \"{{ node.config.meta.metric_date_description }}\" AS metric_date_description,\n    \"{{ node.config.meta.dimension_a }}\" AS dimension_a,\n    \"{{ node.config.meta.dimension_a_description }}\" AS dimension_a_description,\n    \"{{ node.config.meta.dimension_b }}\" AS dimension_b,\n    \"{{ node.config.meta.dimension_b_description }}\" AS dimension_b_description,\n    \"{{ node.config.meta.dimension_c }}\" AS dimension_c,\n    \"{{ node.config.meta.dimension_c_description }}\" AS dimension_c_description\n{% if not loop.last -%} UNION ALL {%- endif %}\n{%- endfor -%}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.quote_array", "macro.dbt.array_construct"], "nodes": []}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metadata/metric_all_definitions.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n    \"metrics/data_quality/servicerequest_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"servicerequest_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of ServiceRequest resources that reference a non-existent practitioner\" AS description,\n    \"SerReq ref. Prac - non-exist\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' ]\n     AS primary_fields,\n    \n    [ 'Practitioner' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_medicationrequest_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_medicationrequest_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent parent medication request\" AS description,\n    \"MedReq ref. MedReq - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' , 'basedOn.medicationRequestId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_patient_undefined.sql\" AS metric_path,\n    \"observation_reference_patient_undefined\" AS metric_name,\n    \"Proportion of Observation resources that do not have a patient reference recorded\" AS description,\n    \"Obs ref. Patient - unrecorded\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_encounter_unresolved.sql\" AS metric_path,\n    \"procedure_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of LDA Procedure resources that reference a non-existent encounter\" AS description,\n    \"LDA Proc ref. Enc - non-exist\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_encounter_undefined.sql\" AS metric_path,\n    \"medicationstatement_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of MedicationStatement resources that do not have an encounter reference recorded\" AS description,\n    \"MedStat ref. Enc - unrecorded\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'context.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_patient_undefined.sql\" AS metric_path,\n    \"medicationstatement_reference_patient_undefined\" AS metric_name,\n    \"Proportion of MedicationStatement resources that do not have a patient reference recorded\" AS description,\n    \"MedStat ref. Patient - unrecorded\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_reference_patient_undefined.sql\" AS metric_path,\n    \"encounter_reference_patient_undefined\" AS metric_name,\n    \"Proportion of Encounter resources that do not have a patient reference recorded\" AS description,\n    \"Enc ref. Patient - unrecorded\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_encounter_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent encounter\" AS description,\n    \"MedReq ref. Enc - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_unknown_gender.sql\" AS metric_path,\n    \"patient_unknown_gender\" AS metric_name,\n    \"Proportion of patients that have unknown gender\" AS description,\n    \"Patients unknown gender\" AS short_description,\n    \"Patient\" AS primary_resource,\n    \n    [ 'gender' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"The patient active status  (true | false)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/person_reference_patient_undefined.sql\" AS metric_path,\n    \"person_reference_patient_undefined\" AS metric_name,\n    \"Proportion of Person resources that do not have at least one reference to a patient recorded\" AS description,\n    \"Person ref. Patient - unrecorded\" AS short_description,\n    \"Person\" AS primary_resource,\n    \n    [ 'link.target.patientId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"person_active\" AS dimension_a,\n    \"The person active status  (true | false)\" AS dimension_a_description,\n    \"person_gender\" AS dimension_b,\n    \"The gender of the person (male | female | other | unknown)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_dob_distribution.sql\" AS metric_path,\n    \"patient_dob_distribution\" AS metric_name,\n    \"Patient birthdate distribution\" AS description,\n    \"Patient dob distribution\" AS short_description,\n    \"Patient\" AS primary_resource,\n    \n    [ 'birthdate' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data distribution\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"decade\" AS dimension_a,\n    \"The patient's birth decade'\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent practitioner\" AS description,\n    \"MedReq ref. Prac - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' ]\n     AS primary_fields,\n    \n    [ 'Practitioner' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_count_by_end_date.sql\" AS metric_path,\n    \"encounter_count_by_end_date\" AS metric_name,\n    \"Count of encounters ending during each day\" AS description,\n    \"Discharged encounters\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'period.end' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Encounter daily\" AS category,\n    \"COUNT\" AS calculation,\n    \"Encounter.period.end\" AS metric_date_field,\n    \"Encounter end date\" AS metric_date_description,\n    \"latest_encounter_class\" AS dimension_a,\n    \"The latest class of the encounter\" AS dimension_a_description,\n    \"encounter_service_provider\" AS dimension_b,\n    \"The organization responsible for providing the services for this encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_patients_with_servicerequest_daily.sql\" AS metric_path,\n    \"active_patients_with_servicerequest_daily\" AS metric_name,\n    \"Proportion of active patients with at least one service request that day\" AS description,\n    \"Patients with ServiceRequest\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'subject.patientId' , 'encounter.encounterId' , 'authoredOn' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Active patients with resource\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class_group\" AS dimension_a,\n    \"The latest class of the encounter grouped into ambulatory or non-ambulatory\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_practitioner_undefined.sql\" AS metric_path,\n    \"careteam_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of CareTeam resources that do not have a practitioner reference recorded\" AS description,\n    \"CareTeam ref. Prac - unrecorded\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    \n    [ 'participant.member.practitionerId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_medicationrequest_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_medicationrequest_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have a parent medication request reference recorded\" AS description,\n    \"MedReq ref. MedReq - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' , 'basedOn.medicationRequestId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_encounter_unresolved.sql\" AS metric_path,\n    \"composition_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of Composition resources that reference a non-existent encounter\" AS description,\n    \"Comp ref. Enc - non-exist\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_missing_dob.sql\" AS metric_path,\n    \"patient_missing_dob\" AS metric_name,\n    \"Proportion of patients that have missing birthdate\" AS description,\n    \"Patients missing dob\" AS short_description,\n    \"Patient\" AS primary_resource,\n    \n    [ 'birthdate' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"The patient active status  (true | false)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_dosage_dose_rate.sql\" AS metric_path,\n    \"medicationadministration_dosage_dose_rate\" AS metric_name,\n    \"Proportion of medication administrations with dosage dose or rate recorded\" AS description,\n    \"MedAdmin dose or rate recorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'dosage.dose' , 'dosage.rate' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_patient_undefined.sql\" AS metric_path,\n    \"medicationadministration_reference_patient_undefined\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that do not have a patient reference recorded\" AS description,\n    \"MedAdmin ref. Patient - unrecorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationdispense_dosage_dose_rate.sql\" AS metric_path,\n    \"medicationdispense_dosage_dose_rate\" AS metric_name,\n    \"Proportion of medication dispenses with dosage dose and rate recorded\" AS description,\n    \"MedDisp dose and rate recorded\" AS short_description,\n    \"MedicationDispense\" AS primary_resource,\n    \n    [ 'dosageInstruction.doseAndRate' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationDispense.whenPrepared\" AS metric_date_field,\n    \"Date when the dispensed medication was packaged and reviewed\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_medication_unresolved.sql\" AS metric_path,\n    \"medicationstatement_reference_medication_unresolved\" AS metric_name,\n    \"Proportion of MedicationStatement resources that reference a non-existent medication\" AS description,\n    \"MedStat ref. Med - non-exist\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'medication.reference.medicationId' ]\n     AS primary_fields,\n    \n    [ 'Medication' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_with_type_text.sql\" AS metric_path,\n    \"composition_with_type_text\" AS metric_name,\n    \"Proportion of Composition resources that contain a non-empty type.text\" AS description,\n    \"Comp with type.text\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'type.text' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"date\" AS metric_date_field,\n    \"Composition date\" AS metric_date_description,\n    \"composition_status\" AS dimension_a,\n    \"The composition status  (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_reference_patient_undefined.sql\" AS metric_path,\n    \"allergyintolerance_reference_patient_undefined\" AS metric_name,\n    \"Proportion of AllergyIntolerance resources that do not have a patient reference recorded\" AS description,\n    \"Allergy ref. Patient - unrecorded\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    \n    [ 'patient.patientId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_practitioner_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have a requester practitioner reference recorded\" AS description,\n    \"MedReq ref. Prac - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_patient_unresolved.sql\" AS metric_path,\n    \"medicationstatement_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of MedicationStatement resources that reference a non-existent patient\" AS description,\n    \"MedStat ref. Patient - non-exist\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_count.sql\" AS metric_path,\n    \"patient_count\" AS metric_name,\n    \"Count of valid Patient resources\" AS description,\n    \"Patient resources\" AS short_description,\n    \"Patient\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date of patient's earliest clinical encounter\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this patient's record is in active use\" AS dimension_a_description,\n    \"gender\" AS dimension_b,\n    \"The patient's gender (male, female, other, unknown)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_count.sql\" AS metric_path,\n    \"medicationadministration_count\" AS metric_name,\n    \"Count of valid MedicationAdministration resources\" AS description,\n    \"MedicationAdministration resources\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"MedicationAdministration.effective.dateTime\" AS metric_date_field,\n    \"MedicationAdministration effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_medicationrequest_unresolved.sql\" AS metric_path,\n    \"medicationadministration_reference_medicationrequest_unresolved\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that reference a non-existent medication request\" AS description,\n    \"MedAdmin ref. MedReq - non-exist\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'context.encounterId' , 'request.medicationRequestId' ]\n     AS primary_fields,\n    \n    [ 'MedicationRequest' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/practitioner_count.sql\" AS metric_path,\n    \"practitioner_count\" AS metric_name,\n    \"Count of valid Practitioner resources\" AS description,\n    \"Practitioner resources\" AS short_description,\n    \"Practitioner\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this practitioner's record is in active use\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_with_attachment.sql\" AS metric_path,\n    \"diagnosticreport_with_attachment\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that contain inlined attachment\" AS description,\n    \"DR with inlined attachment\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'presentedForm.data' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"issued\" AS metric_date_field,\n    \"DiagnosticReport issued date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The report status  (preliminary | final | amended | entered-in-error +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_dosage_instruction.sql\" AS metric_path,\n    \"medicationrequest_dosage_instruction\" AS metric_name,\n    \"Proportion of medication requests with dosage instruction text recorded\" AS description,\n    \"MedReq instruction recorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'dosageInstruction.patientInstruction' , 'dosageInstruction.text' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_patients_with_observation_daily.sql\" AS metric_path,\n    \"active_patients_with_observation_daily\" AS metric_name,\n    \"Proportion of active patients with at least one observation that day\" AS description,\n    \"Patients with Obs\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'subject.patientId' , 'encounter.encounterId' , 'effective.dateTime' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Active patients with resource\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class_group\" AS dimension_a,\n    \"The latest class of the encounter grouped into ambulatory or non-ambulatory\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_count.sql\" AS metric_path,\n    \"composition_count\" AS metric_name,\n    \"Count of valid Composition resources\" AS description,\n    \"Composition resources\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_medication_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_medication_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent medication\" AS description,\n    \"MedReq ref. Med - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' , 'medication.reference.medicationId' ]\n     AS primary_fields,\n    \n    [ 'Medication' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_encounter_unresolved.sql\" AS metric_path,\n    \"medicationadministration_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that reference a non-existent encounter\" AS description,\n    \"MedAdmin ref. Enc - non-exist\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'context.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_practitioner_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have a practitioner reference recorded\" AS description,\n    \"DiagRep ref. Prac - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'performer.practitionerId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_encounter_undefined.sql\" AS metric_path,\n    \"servicerequest_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of ServiceRequest resources that do not have an encounter reference recorded\" AS description,\n    \"SerReq ref. Enc - unrecorded\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_medication_undefined.sql\" AS metric_path,\n    \"medicationstatement_reference_medication_undefined\" AS metric_name,\n    \"Proportion of MedicationStatement resources that do not have an medication reference recorded\" AS description,\n    \"MedStat ref. Med - unrecorded\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'medication.reference.medicationId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_servicerequest_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_servicerequest_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have a service request reference recorded\" AS description,\n    \"DiagRep ref. SerReq - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'basedOn.serviceRequestId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/documentreference_reference_patient_undefined.sql\" AS metric_path,\n    \"documentreference_reference_patient_undefined\" AS metric_name,\n    \"Proportion of DocumentReference resources that do not have a patient reference recorded\" AS description,\n    \"DocRef ref. Patient - unrecorded\" AS short_description,\n    \"DocumentReference\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DocumentReference.date\" AS metric_date_field,\n    \"Document reference date\" AS metric_date_description,\n    \"document_status\" AS dimension_a,\n    \"The document reference status  (current | superseded | entered-in-error)\" AS dimension_a_description,\n    \"format\" AS dimension_b,\n    \"The format of the document referenced (scanned | NULL)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_with_code_text.sql\" AS metric_path,\n    \"procedure_with_code_text\" AS metric_name,\n    \"Proportion of Procedure resources that contain a non-empty code.text\" AS description,\n    \"Procedure with code.text\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    \n    [ 'code.text' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(performed.period.start, performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed datetime\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The procedure status bound to http://hl7.org/fhir/event-status\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"careteam_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of CareTeam resources that reference a non-existent practitioner\" AS description,\n    \"CareTeam ref. Prac - non-exist\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    \n    [ 'participant.member.practitionerId' ]\n     AS primary_fields,\n    \n    [ 'Practitioner' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/location_count.sql\" AS metric_path,\n    \"location_count\" AS metric_name,\n    \"Count of valid Location resources\" AS description,\n    \"Location resources\" AS short_description,\n    \"Location\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the location (active | suspended | inactive)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_with_code_text.sql\" AS metric_path,\n    \"condition_with_code_text\" AS metric_name,\n    \"Proportion of Condition resources that contain a non-empty code.text\" AS description,\n    \"Condition with code.text\" AS short_description,\n    \"Condition\" AS primary_resource,\n    \n    [ 'code.text' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The condition status bound to http://terminology.hl7.org/CodeSystem/condition-clinical\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The condition verification status bound to http://terminology.hl7.org/CodeSystem/condition-ver-status\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent practitioner\" AS description,\n    \"DiagRep ref. Prac - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'performer.practitionerId' ]\n     AS primary_fields,\n    \n    [ 'Practitioner' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_encounter_unresolved.sql\" AS metric_path,\n    \"careteam_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of CareTeam resources that reference a non-existent encounter\" AS description,\n    \"CareTeam ref. Enc - non-exist\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_encounter_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have an encounter reference recorded\" AS description,\n    \"DiagRep ref. Enc - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_encounter_undefined.sql\" AS metric_path,\n    \"composition_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of Composition resources that do not have an encounter reference recorded\" AS description,\n    \"Comp ref. Enc - unrecorded\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_count.sql\" AS metric_path,\n    \"procedure_count\" AS metric_name,\n    \"Count of valid Procedure resources\" AS description,\n    \"Procedure resources\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_patient_unresolved.sql\" AS metric_path,\n    \"careteam_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of CareTeam resources that reference a non-existent patient\" AS description,\n    \"CareTeam ref. Patient - non-exist\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_patients_with_medicationrequest_daily.sql\" AS metric_path,\n    \"active_patients_with_medicationrequest_daily\" AS metric_name,\n    \"Proportion of active patients with at least one medication request that day\" AS description,\n    \"Patients with MedicationRequest\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'subject.patientId' , 'encounter.encounterId' , 'authoredOn' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Active patients with resource\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class_group\" AS dimension_a,\n    \"The latest class of the encounter grouped into ambulatory or non-ambulatory\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/documentreference_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"documentreference_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of DocumentReference resources that reference a non-existent practitioner\" AS description,\n    \"DocRef ref. Prac - non-exist\" AS short_description,\n    \"DocumentReference\" AS primary_resource,\n    \n    [ 'author.practitionerId' ]\n     AS primary_fields,\n    \n    [ 'Practitioner' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DocumentReference.date\" AS metric_date_field,\n    \"Document reference date\" AS metric_date_description,\n    \"document_status\" AS dimension_a,\n    \"The document reference status  (current | superseded | entered-in-error)\" AS dimension_a_description,\n    \"format\" AS dimension_b,\n    \"The format of the document referenced (scanned | NULL)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_patients_with_allergyintolerance.sql\" AS metric_path,\n    \"active_patients_with_allergyintolerance\" AS metric_name,\n    \"Proportion of active patients with at least one allergy or intolerance recorded at any time\" AS description,\n    \"Patients with AllergyIntol\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    \n    [ 'patient.patientId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Active patients with resource\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class_group\" AS dimension_a,\n    \"The latest class of the encounter grouped into ambulatory or non-ambulatory\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_binary_unresolved.sql\" AS metric_path,\n    \"composition_reference_binary_unresolved\" AS metric_name,\n    \"Proportion of Composition resources that reference a non-existent binary resource\" AS description,\n    \"Comp ref. Binary - non-exist\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'section.entry.binaryId' ]\n     AS primary_fields,\n    \n    [ 'Binary' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_reference_location_unresolved.sql\" AS metric_path,\n    \"encounter_reference_location_unresolved\" AS metric_name,\n    \"Proportion of Encounter resources that reference a non-existent location\" AS description,\n    \"Enc ref. Loc - non-exist\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'location.location.locationId' ]\n     AS primary_fields,\n    \n    [ 'Location' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_patient_unresolved.sql\" AS metric_path,\n    \"composition_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of Composition resources that reference a non-existent patient\" AS description,\n    \"Comp ref. Patient - non-exist\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_patient_undefined.sql\" AS metric_path,\n    \"procedure_reference_patient_undefined\" AS metric_name,\n    \"Proportion of LDA Procedure resources that do not have a patient reference recorded\" AS description,\n    \"LDA Proc ref. Patient - unrecorded\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_servicerequest_unresolved.sql\" AS metric_path,\n    \"servicerequest_reference_servicerequest_unresolved\" AS metric_name,\n    \"Proportion of ServiceRequest resources that reference a non-existent service request\" AS description,\n    \"SerReq ref. SerReq - non-exist\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_reference_encounter_unresolved.sql\" AS metric_path,\n    \"allergyintolerance_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of AllergyIntolerance resources that reference a non-existent encounter\" AS description,\n    \"Allergy ref. Enc - non-exist\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_inactive.sql\" AS metric_path,\n    \"patient_inactive\" AS metric_name,\n    \"Proportion of patients that are inactive\" AS description,\n    \"Inactive patients\" AS short_description,\n    \"Patient\" AS primary_resource,\n    \n    [ 'active' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data distribution\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_patients_with_diagnosticreport_daily.sql\" AS metric_path,\n    \"active_patients_with_diagnosticreport_daily\" AS metric_name,\n    \"Proportion of active patients with at least one diagnostic report that day\" AS description,\n    \"Patients with DiagnosticReport\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'subject.patientId' , 'encounter.encounterId' , 'issued' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Active patients with resource\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class_group\" AS dimension_a,\n    \"The latest class of the encounter grouped into ambulatory or non-ambulatory\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_dosage_instruction.sql\" AS metric_path,\n    \"medicationadministration_dosage_instruction\" AS metric_name,\n    \"Proportion of medication administrations with dosage instruction text recorded\" AS description,\n    \"MedAdmin instruction recorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'dosage.text' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/organization_count.sql\" AS metric_path,\n    \"organization_count\" AS metric_name,\n    \"Count of valid Organization resources\" AS description,\n    \"Organization resources\" AS short_description,\n    \"Organization\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this organization is active\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_encounters_daily.sql\" AS metric_path,\n    \"active_encounters_daily\" AS metric_name,\n    \"Count of inpatient encounters that are active at any time during each day\" AS description,\n    \"Active encounters\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'period.start' , 'period.end' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Encounter daily\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class\" AS dimension_a,\n    \"The latest class of the encounter\" AS dimension_a_description,\n    \"encounter_service_provider\" AS dimension_b,\n    \"The organization responsible for providing the services for this encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_missing_encounter.sql\" AS metric_path,\n    \"patient_missing_encounter\" AS metric_name,\n    \"Proportion of patients that do not have an encounter\" AS description,\n    \"Patients missing encounters\" AS short_description,\n    \"Patient\" AS primary_resource,\n    \n    [ 'active' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"The patient active status  (true | false)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_with_binary_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_with_binary_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that contain a binary reference that resolves\" AS description,\n    \"DR with binary content\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'presentedForm.url' ]\n     AS primary_fields,\n    \n    [ 'Binary' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"issued\" AS metric_date_field,\n    \"DiagnosticReport issued date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The report status  (preliminary | final | amended | entered-in-error +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_patient_unresolved.sql\" AS metric_path,\n    \"procedure_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of LDA Procedure resources that reference a non-existent patient\" AS description,\n    \"LDA Proc ref. Patient - non-exist\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/resource_hour_distribution.sql\" AS metric_path,\n    \"resource_hour_distribution\" AS metric_name,\n    \"Distribution of resource counts by time of day\" AS description,\n    \"Resource hour distribution\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'period.start' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data distribution\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"hour_of_day\" AS dimension_a,\n    \"The hour of the day of the clinical timestamp of a resource\" AS dimension_a_description,\n    \"resource\" AS dimension_b,\n    \"The relevant resource used to extract the timestamp\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_reference_location_undefined.sql\" AS metric_path,\n    \"encounter_reference_location_undefined\" AS metric_name,\n    \"Proportion of Encounter resources that do not have a location reference recorded\" AS description,\n    \"Enc ref. Loc - unrecorded\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'location.location.locationId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_reference_patient_unresolved.sql\" AS metric_path,\n    \"encounter_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of Encounter resources that reference a non-existent patient\" AS description,\n    \"Enc ref. Patient - non-exist\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_with_section_text_div.sql\" AS metric_path,\n    \"composition_with_section_text_div\" AS metric_name,\n    \"Proportion of Composition resources that contain a non-empty section[].text.div\" AS description,\n    \"Comp with section div\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'section.text.div' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"date\" AS metric_date_field,\n    \"Composition date\" AS metric_date_description,\n    \"composition_status\" AS dimension_a,\n    \"The composition status  (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/binary_count.sql\" AS metric_path,\n    \"binary_count\" AS metric_name,\n    \"Count of valid Binary resources\" AS description,\n    \"Binary resources\" AS short_description,\n    \"Binary\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_performer_specialty.sql\" AS metric_path,\n    \"diagnosticreport_performer_specialty\" AS metric_name,\n    \"Proportion of diagnostic reports referencing a practioner role with specialty recorded\" AS description,\n    \"DiagRep prac. specialty recorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'performer' ]\n     AS primary_fields,\n    \n    [ 'Practitioner' , 'PractitionerRole' ]\n     AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"category\" AS dimension_a,\n    \"The service category of the diagnostic report\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/documentreference_reference_patient_unresolved.sql\" AS metric_path,\n    \"documentreference_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of DocumentReference resources that reference a non-existent patient\" AS description,\n    \"DocRef ref. Patient - non-exist\" AS short_description,\n    \"DocumentReference\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DocumentReference.date\" AS metric_date_field,\n    \"Document reference date\" AS metric_date_description,\n    \"document_status\" AS dimension_a,\n    \"The document reference status  (current | superseded | entered-in-error)\" AS dimension_a_description,\n    \"format\" AS dimension_b,\n    \"The format of the document referenced (scanned | NULL)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_encounter_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have an encounter reference recorded\" AS description,\n    \"MedReq ref. Enc - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medication_count.sql\" AS metric_path,\n    \"medication_count\" AS metric_name,\n    \"Count of valid Medication resources\" AS description,\n    \"Medication resources\" AS short_description,\n    \"Medication\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication (active | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_encounters_midnight_census.sql\" AS metric_path,\n    \"active_encounters_midnight_census\" AS metric_name,\n    \"Count of patients that have an active inpatient encounter at midnight each day\" AS description,\n    \"Census\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'classHistory.period.start' , 'classHistory.period.end' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Encounter daily\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"episode_class\" AS dimension_a,\n    \"The class of the encounter episode\" AS dimension_a_description,\n    \"encounter_service_provider\" AS dimension_b,\n    \"The organization responsible for providing the services for this encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_reference_encounter_undefined.sql\" AS metric_path,\n    \"allergyintolerance_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of AllergyIntolerance resources that do not have an encounter reference recorded\" AS description,\n    \"Allergy ref. Enc - unrecorded\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_with_code_text.sql\" AS metric_path,\n    \"diagnosticreport_with_code_text\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that contain a non-empty code.text\" AS description,\n    \"DR with code.text\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'code.text' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"issued\" AS metric_date_field,\n    \"Diagnostic Report issued date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The report status  (preliminary | final | amended | entered-in-error +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_dosage_dose_rate.sql\" AS metric_path,\n    \"medicationrequest_dosage_dose_rate\" AS metric_name,\n    \"Proportion of medication requests with dosage dose and rate recorded\" AS description,\n    \"MedReq dose and rate recorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'dosageInstruction.doseAndRate' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_servicerequest_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_servicerequest_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent service request\" AS description,\n    \"DiagRep ref. SerReq - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'basedOn.serviceRequestId' ]\n     AS primary_fields,\n    \n    [ 'ServiceRequest' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_count.sql\" AS metric_path,\n    \"careteam_count\" AS metric_name,\n    \"Count of valid CareTeam resources\" AS description,\n    \"CareTeam resources\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_testpatient.sql\" AS metric_path,\n    \"patient_testpatient\" AS metric_name,\n    \"Proportion of patients that are flagged as test patients\" AS description,\n    \"Test patients\" AS short_description,\n    \"Patient\" AS primary_resource,\n    \n    [ 'meta.security.system' , 'meta.security.code' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_name_missing.sql\" AS metric_path,\n    \"patient_name_missing\" AS metric_name,\n    \"Proportion of patients without structured name\" AS description,\n    \"Patients missing struct name\" AS short_description,\n    \"Patient\" AS primary_resource,\n    \n    [ 'name.family' , 'name.given' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this patient record is in active use\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/person_reference_patient_unresolved.sql\" AS metric_path,\n    \"person_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of Person resources that do not contain at least one reference to an existing patient\" AS description,\n    \"Person ref. Patient - non-exist\" AS short_description,\n    \"Person\" AS primary_resource,\n    \n    [ 'link.target.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"person_active\" AS dimension_a,\n    \"The person active status  (true | false)\" AS dimension_a_description,\n    \"person_gender\" AS dimension_b,\n    \"The gender of the person (male | female | other | unknown)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_patients_with_medicationstatement.sql\" AS metric_path,\n    \"active_patients_with_medicationstatement\" AS metric_name,\n    \"Proportion of active patients with at least one medication statement recorded at any time\" AS description,\n    \"Patients with MedStatement\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Active patients with resource\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class_group\" AS dimension_a,\n    \"The latest class of the encounter grouped into ambulatory or non-ambulatory\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/questionnaire_count.sql\" AS metric_path,\n    \"questionnaire_count\" AS metric_name,\n    \"Count of valid Questionnaire resources\" AS description,\n    \"Questionnaire resources\" AS short_description,\n    \"Questionnaire\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Questionnaire.date\" AS metric_date_field,\n    \"Questionnaire date\" AS metric_date_description,\n    \"questionnaire_group.title\" AS dimension_a,\n    \"The title of the questionnaire (The Basics | Lifestyle +)\" AS dimension_a_description,\n    \"status\" AS dimension_b,\n    \"The status of the questionnaire (published | +)\" AS dimension_b_description,\n    \"version\" AS dimension_c,\n    \"The version of the questionnaire ( V2022.11.17 | v2020.09.25 +)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_reference_patient_unresolved.sql\" AS metric_path,\n    \"allergyintolerance_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of AllergyIntolerance resources that reference a non-existent patient\" AS description,\n    \"Allergy ref. Patient - non-exist\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    \n    [ 'patient.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_encounter_undefined.sql\" AS metric_path,\n    \"medicationadministration_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that do not have an encounter reference recorded\" AS description,\n    \"MedAdmin ref. Enc - unrecorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'context.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_quantity_unit.sql\" AS metric_path,\n    \"observation_quantity_unit\" AS metric_name,\n    \"Proportion of observations with a value that have a unit recorded\" AS description,\n    \"Obs value unit recorded\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'value.quantity.unit' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/practitionerrole_count.sql\" AS metric_path,\n    \"practitionerrole_count\" AS metric_name,\n    \"Count of valid PractitionerRole resources\" AS description,\n    \"PractitionerRole resources\" AS short_description,\n    \"PractitionerRole\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this practitioner role record is in active use\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_reference_encounter_unresolved.sql\" AS metric_path,\n    \"medicationstatement_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of MedicationStatement resources that reference a non-existent encounter\" AS description,\n    \"MedStat ref. Enc - non-exist\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'context.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/documentreference_distribution_type.sql\" AS metric_path,\n    \"documentreference_distribution_type\" AS metric_name,\n    \"Distribution of values for DocumentReference type\" AS description,\n    \"DocRef Type Dist\" AS short_description,\n    \"DocumentReference\" AS primary_resource,\n    \n    [ 'type.coding.system' , 'type.coding.code' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data distribution\" AS category,\n    \"COUNT\" AS calculation,\n    \"DocumentReference.date\" AS metric_date_field,\n    \"Document reference date\" AS metric_date_description,\n    \"document_status\" AS dimension_a,\n    \"The document reference status  (current | superseded | entered-in-error)\" AS dimension_a_description,\n    \"format\" AS dimension_b,\n    \"The format of the document referenced (scanned | NULL)\" AS dimension_b_description,\n    \"type\" AS dimension_c,\n    \"The kind of document (LOINC)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_binary_mimetype.sql\" AS metric_path,\n    \"composition_binary_mimetype\" AS metric_name,\n    \"Count of Composition by Binary MIME Type\" AS description,\n    \"Composition Binary MIME Type\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'Composition.section.entry' ]\n     AS primary_fields,\n    \n    [ 'Binary' ]\n     AS secondary_resources,\n    \"Data distribution\" AS category,\n    \"COUNT\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition date\" AS metric_date_description,\n    \"composition_status\" AS dimension_a,\n    \"The composition status  (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"mime_type\" AS dimension_b,\n    \"The media type of the document ({MIME types} | NULL)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_practitioner_undefined.sql\" AS metric_path,\n    \"servicerequest_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of ServiceRequest resources that do not have a practitioner reference recorded\" AS description,\n    \"SerReq ref. Prac - unrecorded\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_encounter_unresolved.sql\" AS metric_path,\n    \"servicerequest_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of ServiceRequest resources that reference a non-existent encounter\" AS description,\n    \"SerReq ref. Enc - non-exist\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_patient_undefined.sql\" AS metric_path,\n    \"careteam_reference_patient_undefined\" AS metric_name,\n    \"Proportion of CareTeam resources that do not have a patient reference recorded\" AS description,\n    \"CareTeam ref. Patient - unrecorded\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/careteam_reference_encounter_undefined.sql\" AS metric_path,\n    \"careteam_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of CareTeam resources that do not have an encounter reference recorded\" AS description,\n    \"CareTeam ref. Enc - unrecorded\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"CareTeam.period.start\" AS metric_date_field,\n    \"Start of time period covered by care team\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the care team (proposed | active | suspended | inactive | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_encounter_unresolved.sql\" AS metric_path,\n    \"observation_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of Observation resources that reference a non-existent encounter\" AS description,\n    \"Obs ref. Enc - non-exist\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_binary_undefined.sql\" AS metric_path,\n    \"composition_reference_binary_undefined\" AS metric_name,\n    \"Proportion of Composition resources that do not have a binary reference recorded\" AS description,\n    \"Comp ref. Binary - unrecorded\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'section.entry.binaryId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_reference_encounter_unresolved.sql\" AS metric_path,\n    \"condition_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of Condition resources that reference a non-existent encounter\" AS description,\n    \"Cond ref. Enc - non-exist\" AS short_description,\n    \"Condition\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_count.sql\" AS metric_path,\n    \"diagnosticreport_count\" AS metric_name,\n    \"Count of valid DiagnosticReport resources\" AS description,\n    \"DiagnosticReport resources\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_servicerequest_undefined.sql\" AS metric_path,\n    \"observation_reference_servicerequest_undefined\" AS metric_name,\n    \"Proportion of Observation resources that do not have a service request reference recorded\" AS description,\n    \"Obs ref. SerReq - unrecorded\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'encounter.encounterId' , 'basedOn.serviceRequestId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_patients_with_medicationadministration_daily.sql\" AS metric_path,\n    \"active_patients_with_medicationadministration_daily\" AS metric_name,\n    \"Proportion of active patients with at least one medication administration that day\" AS description,\n    \"Patients with MedAdmin\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'subject.patientId' , 'context.encounterId' , 'effective.period.start' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Active patients with resource\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class_group\" AS dimension_a,\n    \"The latest class of the encounter grouped into ambulatory or non-ambulatory\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"composition_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of Composition resources that reference a non-existent practitioner\" AS description,\n    \"Comp ref. Prac - non-exist\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'author.practitionerId' ]\n     AS primary_fields,\n    \n    [ 'Practitioner' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_patient_unresolved.sql\" AS metric_path,\n    \"medicationadministration_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that reference a non-existent patient\" AS description,\n    \"MedAdmin ref. Patient - non-exist\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_observation_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_observation_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have an observation reference recorded\" AS description,\n    \"DiagRep ref. Obs - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'result.observationId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_practitioner_unresolved.sql\" AS metric_path,\n    \"procedure_reference_practitioner_unresolved\" AS metric_name,\n    \"Proportion of LDA Procedure resources that reference a non-existent practitioner\" AS description,\n    \"LDA Proc ref. Prac - non-exist\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    \n    [ 'performer.actor.practitionerId' ]\n     AS primary_fields,\n    \n    [ 'Practitioner' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/questionnaireresponse_linkid_unresolved.sql\" AS metric_path,\n    \"questionnaireresponse_linkid_unresolved\" AS metric_name,\n    \"Proportion of ServiceRequest resources that reference a non-existent encounter\" AS description,\n    \"SerReq ref. Enc - non-exist\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_encounter_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_encounter_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent encounter\" AS description,\n    \"DiagRep ref. Enc - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_count.sql\" AS metric_path,\n    \"servicerequest_count\" AS metric_name,\n    \"Count of valid ServiceRequest resources\" AS description,\n    \"ServiceRequest resources\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"intent\" AS dimension_b,\n    \"The intent of the service request (proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the service request\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_patient_undefined.sql\" AS metric_path,\n    \"composition_reference_patient_undefined\" AS metric_name,\n    \"Proportion of Composition resources that do not have a patient reference recorded\" AS description,\n    \"Comp ref. Patient - unrecorded\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_dosage_route.sql\" AS metric_path,\n    \"medicationadministration_dosage_route\" AS metric_name,\n    \"Proportion of medication administrations with dosage route recorded\" AS description,\n    \"MedAdmin route recorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'dosage.route' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/documentreference_count.sql\" AS metric_path,\n    \"documentreference_count\" AS metric_name,\n    \"Count of valid DocumentReference resources\" AS description,\n    \"DocumentReference resources\" AS short_description,\n    \"DocumentReference\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"DocumentReference.date\" AS metric_date_field,\n    \"Document reference date\" AS metric_date_description,\n    \"document_status\" AS dimension_a,\n    \"The document reference status  (current | superseded | entered-in-error)\" AS dimension_a_description,\n    \"format\" AS dimension_b,\n    \"The format of the document referenced (scanned | NULL)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_dosage_route.sql\" AS metric_path,\n    \"medicationstatement_dosage_route\" AS metric_name,\n    \"Proportion of medication statements with dosage route recorded\" AS description,\n    \"MedState route recorded\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'dosageInstruction.route' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_medication_unresolved.sql\" AS metric_path,\n    \"medicationadministration_reference_medication_unresolved\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that reference a non-existent medication\" AS description,\n    \"MedAdmin ref. Med - non-exist\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'context.encounterId' , 'medication.reference.medicationId' ]\n     AS primary_fields,\n    \n    [ 'Medication' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/composition_reference_practitioner_undefined.sql\" AS metric_path,\n    \"composition_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of Composition resources that do not have a practitioner reference recorded\" AS description,\n    \"Comp ref. Prac - unrecorded\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'author.practitionerId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Composition.date\" AS metric_date_field,\n    \"Composition latest edit date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the composition (preliminary | final | amended | entered-in-error)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_dosage_dose_rate.sql\" AS metric_path,\n    \"medicationstatement_dosage_dose_rate\" AS metric_name,\n    \"Proportion of medication statements with dosage dose and rate recorded\" AS description,\n    \"MedState dose and rate recorded\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'dosageInstruction.doseAndRate' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_patient_undefined.sql\" AS metric_path,\n    \"diagnosticreport_reference_patient_undefined\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that do not have a patient reference recorded\" AS description,\n    \"DiagRep ref. Patient - unrecorded\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_patient_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_patient_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have a patient reference recorded\" AS description,\n    \"MedReq ref. Patient - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_observation_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_observation_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent observation\" AS description,\n    \"DiagRep ref. Obs - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'result.observationId' ]\n     AS primary_fields,\n    \n    [ 'Observation' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_dosage_route.sql\" AS metric_path,\n    \"medicationrequest_dosage_route\" AS metric_name,\n    \"Proportion of medication requests with dosage route recorded\" AS description,\n    \"MedReq route recorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'dosageInstruction.route' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationdispense_dosage_route.sql\" AS metric_path,\n    \"medicationdispense_dosage_route\" AS metric_name,\n    \"Proportion of medication dispenses with dosage route recorded\" AS description,\n    \"MedDisp route recorded\" AS short_description,\n    \"MedicationDispense\" AS primary_resource,\n    \n    [ 'dosageInstruction.route' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationDispense.whenPrepared\" AS metric_date_field,\n    \"Date when the dispensed medication was packaged and reviewed\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_servicerequest_unresolved.sql\" AS metric_path,\n    \"observation_reference_servicerequest_unresolved\" AS metric_name,\n    \"Proportion of Observation resources that reference a non-existent service request\" AS description,\n    \"Obs ref. SerReq - non-exist\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'encounter.encounterId' , 'basedOn.serviceRequestId' ]\n     AS primary_fields,\n    \n    [ 'ServiceRequest' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_with_conclusion.sql\" AS metric_path,\n    \"diagnosticreport_with_conclusion\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that contain a non-empty conclusion\" AS description,\n    \"DR with conclusion\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'conclusion' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"issued\" AS metric_date_field,\n    \"DiagnosticReport issued date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The report status  (preliminary | final | amended | entered-in-error +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_dosage_instruction.sql\" AS metric_path,\n    \"medicationstatement_dosage_instruction\" AS metric_name,\n    \"Proportion of medication statements with dosage instruction text recorded\" AS description,\n    \"MedState instruction recorded\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'dosageInstruction.patientInstruction' , 'dosageInstruction.text' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_encounter_undefined.sql\" AS metric_path,\n    \"procedure_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of LDA Procedure resources that do not have an encounter reference recorded\" AS description,\n    \"LDA Proc ref. Enc - unrecorded\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_reference_encounter_undefined.sql\" AS metric_path,\n    \"condition_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of Condition resources that do not have an encounter reference recorded\" AS description,\n    \"Cond ref. Enc - unrecorded\" AS short_description,\n    \"Condition\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_patient_unresolved.sql\" AS metric_path,\n    \"observation_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of Observation resources that reference a non-existent patient\" AS description,\n    \"Obs ref. Patient - non-exist\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_reference_encounter_undefined.sql\" AS metric_path,\n    \"observation_reference_encounter_undefined\" AS metric_name,\n    \"Proportion of Observation resources that do not have an encounter reference recorded\" AS description,\n    \"Obs ref. Enc - unrecorded\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'encounter.encounterId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_patients_with_careteam_daily.sql\" AS metric_path,\n    \"active_patients_with_careteam_daily\" AS metric_name,\n    \"Proportion of active patients with at least one assigned care team that day\" AS description,\n    \"Patients with CareTeam\" AS short_description,\n    \"CareTeam\" AS primary_resource,\n    \n    [ 'subject.patientId' , 'encounter.encounterId' , 'period.start' , 'period.end' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Active patients with resource\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class_group\" AS dimension_a,\n    \"The latest class of the encounter grouped into ambulatory or non-ambulatory\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationstatement_count.sql\" AS metric_path,\n    \"medicationstatement_count\" AS metric_name,\n    \"Count of valid MedicationStatement resources\" AS description,\n    \"MedicationStatement resources\" AS short_description,\n    \"MedicationStatement\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"MedicationStatement.dateAsserted\" AS metric_date_field,\n    \"Medication statement asserted date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication statement (active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_patient_unresolved.sql\" AS metric_path,\n    \"servicerequest_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of ServiceRequest resources that reference a non-existent patient\" AS description,\n    \"SerReq ref. Patient - non-exist\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/procedure_reference_practitioner_undefined.sql\" AS metric_path,\n    \"procedure_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of LDA Procedure resources that do not have a practitioner reference recorded\" AS description,\n    \"LDA Proc ref. Prac - unrecorded\" AS short_description,\n    \"Procedure\" AS primary_resource,\n    \n    [ 'performer.actor.practitionerId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(Procedure.performed.period.start, Procedure.performed.dateTime)\" AS metric_date_field,\n    \"Procedure performed period start date (if absent, procedure performed date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the procedure (preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_medication_undefined.sql\" AS metric_path,\n    \"medicationadministration_reference_medication_undefined\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that do not have an medication reference recorded\" AS description,\n    \"MedAdmin ref. Med - unrecorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'context.encounterId' , 'medication.reference.medicationId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/documentreference_mimetype.sql\" AS metric_path,\n    \"documentreference_mimetype\" AS metric_name,\n    \"Count of DocumentReference by MIME Type\" AS description,\n    \"DocRef MIME Type\" AS short_description,\n    \"DocumentReference\" AS primary_resource,\n    \n    [ 'content' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data distribution\" AS category,\n    \"COUNT\" AS calculation,\n    \"DocumentReference.date\" AS metric_date_field,\n    \"Document reference date\" AS metric_date_description,\n    \"document_status\" AS dimension_a,\n    \"The document reference status  (current | superseded | entered-in-error)\" AS dimension_a_description,\n    \"mime_type\" AS dimension_b,\n    \"The media type of the binary (text/html | plain/text | application/rtf)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_patient_unresolved.sql\" AS metric_path,\n    \"medicationrequest_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of MedicationRequest resources that reference a non-existent patient\" AS description,\n    \"MedReq ref. Patient - non-exist\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/person_count.sql\" AS metric_path,\n    \"person_count\" AS metric_name,\n    \"Count of valid Person resources\" AS description,\n    \"Person resources\" AS short_description,\n    \"Person\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date of person's earliest clinical encounter\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"Whether this person's record is in active use\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_count.sql\" AS metric_path,\n    \"condition_count\" AS metric_name,\n    \"Count of valid Condition resources\" AS description,\n    \"Condition resources\" AS short_description,\n    \"Condition\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationdispense_dosage_instruction.sql\" AS metric_path,\n    \"medicationdispense_dosage_instruction\" AS metric_name,\n    \"Proportion of medication dispenses with dosage instruction text recorded\" AS description,\n    \"MedDisp instruction recorded\" AS short_description,\n    \"MedicationDispense\" AS primary_resource,\n    \n    [ 'dosageInstruction.patientInstruction' , 'dosageInstruction.text' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationDispense.whenPrepared\" AS metric_date_field,\n    \"Date when the dispensed medication was packaged and reviewed\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_reference_patient_undefined.sql\" AS metric_path,\n    \"condition_reference_patient_undefined\" AS metric_name,\n    \"Proportion of Condition resources that do not have a patient reference recorded\" AS description,\n    \"Cond ref. Patient - unrecorded\" AS short_description,\n    \"Condition\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/active_patients_with_composition_daily.sql\" AS metric_path,\n    \"active_patients_with_composition_daily\" AS metric_name,\n    \"Proportion of active patients with at least one composition that day\" AS description,\n    \"Patients with Composition\" AS short_description,\n    \"Composition\" AS primary_resource,\n    \n    [ 'subject.patientId' , 'encounter.encounterId' , 'date' ]\n     AS primary_fields,\n    \n    [ 'Encounter' ]\n     AS secondary_resources,\n    \"Active patients with resource\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"encounter_class_group\" AS dimension_a,\n    \"The latest class of the encounter grouped into ambulatory or non-ambulatory\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/diagnosticreport_reference_patient_unresolved.sql\" AS metric_path,\n    \"diagnosticreport_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of DiagnosticReport resources that reference a non-existent patient\" AS description,\n    \"DiagRep ref. Patient - non-exist\" AS short_description,\n    \"DiagnosticReport\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DiagnosticReport.issued\" AS metric_date_field,\n    \"Diagnostic report latest version issue date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the diagnostic report (registered | partial | preliminary | final +)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The service category of the diagnostic report\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_count.sql\" AS metric_path,\n    \"observation_count\" AS metric_name,\n    \"Count of valid Observation resources\" AS description,\n    \"Observation resources\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the observation (registered | preliminary | final | amended +)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_count.sql\" AS metric_path,\n    \"medicationrequest_count\" AS metric_name,\n    \"Count of valid MedicationRequest resources\" AS description,\n    \"MedicationRequest resources\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"intent\" AS dimension_b,\n    \"The intent (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_count_by_start_date.sql\" AS metric_path,\n    \"encounter_count_by_start_date\" AS metric_name,\n    \"Count of encounters starting each day\" AS description,\n    \"Admitted encounters\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'period.start' , 'classHistory' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Encounter daily\" AS category,\n    \"COUNT\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"initial_encounter_class\" AS dimension_a,\n    \"The initial class recorded for the encounter, ignoring pre-admission class (PRENC)\" AS dimension_a_description,\n    \"encounter_service_provider\" AS dimension_b,\n    \"The organization responsible for providing the services for this encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/documentreference_reference_practitioner_undefined.sql\" AS metric_path,\n    \"documentreference_reference_practitioner_undefined\" AS metric_name,\n    \"Proportion of DocumentReference resources that do not have a practitioner reference recorded\" AS description,\n    \"DocRef ref. Prac - unrecorded\" AS short_description,\n    \"DocumentReference\" AS primary_resource,\n    \n    [ 'author.practitionerId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"DocumentReference.date\" AS metric_date_field,\n    \"Document reference date\" AS metric_date_description,\n    \"document_status\" AS dimension_a,\n    \"The document reference status  (current | superseded | entered-in-error)\" AS dimension_a_description,\n    \"format\" AS dimension_b,\n    \"The format of the document referenced (scanned | NULL)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/allergyintolerance_count.sql\" AS metric_path,\n    \"allergyintolerance_count\" AS metric_name,\n    \"Count of valid AllergyIntolerance resources\" AS description,\n    \"AllergyIntolerance resources\" AS short_description,\n    \"AllergyIntolerance\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"AllergyIntolerance.recordedDate\" AS metric_date_field,\n    \"Allergy or intolerance recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the allergy/intollerance (active | inactive | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the allergy/intollerance (unconfirmed | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationrequest_reference_medication_undefined.sql\" AS metric_path,\n    \"medicationrequest_reference_medication_undefined\" AS metric_name,\n    \"Proportion of MedicationRequest resources that do not have an medication reference recorded\" AS description,\n    \"MedReq ref. Med - unrecorded\" AS short_description,\n    \"MedicationRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' , 'medication.reference.medicationId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"MedicationRequest.authoredOn\" AS metric_date_field,\n    \"Medication request initial authored date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication request (active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the medication request (inpatient | outpatient | community | discharge)\" AS dimension_b_description,\n    \"intent\" AS dimension_c,\n    \"The intent of the medication request (proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/encounter_count.sql\" AS metric_path,\n    \"encounter_count\" AS metric_name,\n    \"Count of valid Encounter resources\" AS description,\n    \"Encounter resources\" AS short_description,\n    \"Encounter\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"Encounter.period.start\" AS metric_date_field,\n    \"Encounter start date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the encounter (planned | arrived | triaged | in-progress | onleave | finished | cancelled +)\" AS dimension_a_description,\n    \"latest_encounter_class\" AS dimension_b,\n    \"The latest class of the encounter\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_patient_undefined.sql\" AS metric_path,\n    \"servicerequest_reference_patient_undefined\" AS metric_name,\n    \"Proportion of ServiceRequest resources that do not have a patient reference recorded\" AS description,\n    \"SerReq ref. Patient - unrecorded\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/servicerequest_reference_servicerequest_undefined.sql\" AS metric_path,\n    \"servicerequest_reference_servicerequest_undefined\" AS metric_name,\n    \"Proportion of ServiceRequest resources that do not have a service request reference recorded\" AS description,\n    \"SerReq ref. SerReq - unrecorded\" AS short_description,\n    \"ServiceRequest\" AS primary_resource,\n    \n    [ 'requester.practitionerId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"ServiceRequest.authoredOn\" AS metric_date_field,\n    \"Service request signed date\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the service request (draft | active | on-hold | revoked | completed | entered-in-error | unknown)\" AS dimension_a_description,\n    \"category\" AS dimension_b,\n    \"The category of the service request\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/observation_quantity_value.sql\" AS metric_path,\n    \"observation_quantity_value\" AS metric_name,\n    \"Proportion of observations with a value recorded\" AS description,\n    \"Obs value recorded\" AS short_description,\n    \"Observation\" AS primary_resource,\n    \n    [ 'value.quantity.value' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Observation.effective.dateTime\" AS metric_date_field,\n    \"Observation effective date\" AS metric_date_description,\n    \"\" AS dimension_a,\n    \"\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/questionnaireresponse_count.sql\" AS metric_path,\n    \"questionnaireresponse_count\" AS metric_name,\n    \"Count of valid QuestionnaireResponse resources\" AS description,\n    \"QuestionnaireResponse resources\" AS short_description,\n    \"QuestionnaireResponse\" AS primary_resource,\n    \n    [ 'id' ]\n     AS primary_fields,\n    \n    [ 'Questionnaire' ]\n     AS secondary_resources,\n    \"Resource count\" AS category,\n    \"COUNT\" AS calculation,\n    \"QuestionnaireResponse.authored\" AS metric_date_field,\n    \"QuestionnaireResponse authored\" AS metric_date_description,\n    \"questionnaire_group.title\" AS dimension_a,\n    \"The title of the questionnaire (The Basics | Lifestyle +)\" AS dimension_a_description,\n    \"status\" AS dimension_b,\n    \"The status of the questionnaire response (completed | +)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/patient_missing_mrn.sql\" AS metric_path,\n    \"patient_missing_mrn\" AS metric_name,\n    \"Proportion of patients that have missing MRN\" AS description,\n    \"Patients missing MRN\" AS short_description,\n    \"Patient\" AS primary_resource,\n    \n    [ 'identifier.value' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Data completeness\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"\" AS metric_date_field,\n    \"\" AS metric_date_description,\n    \"active\" AS dimension_a,\n    \"The patient active status  (true | false)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/medicationadministration_reference_medicationrequest_undefined.sql\" AS metric_path,\n    \"medicationadministration_reference_medicationrequest_undefined\" AS metric_name,\n    \"Proportion of MedicationAdministration resources that do not have an medication request reference recorded\" AS description,\n    \"MedAdmin ref. MedReq - unrecorded\" AS short_description,\n    \"MedicationAdministration\" AS primary_resource,\n    \n    [ 'context.encounterId' , 'request.medicationRequestId' ]\n     AS primary_fields,\n    NULL AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"COALESCE(MedicationAdministration.effective.period.start, MedicationAdministration.effective.dateTime)\" AS metric_date_field,\n    \"MedicationAdministration effective period start date (if absent, MedicationAdministration effective date)\" AS metric_date_description,\n    \"status\" AS dimension_a,\n    \"The status of the medication administration (in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown)\" AS dimension_a_description,\n    \"\" AS dimension_b,\n    \"\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/condition_reference_patient_unresolved.sql\" AS metric_path,\n    \"condition_reference_patient_unresolved\" AS metric_name,\n    \"Proportion of Condition resources that reference a non-existent patient\" AS description,\n    \"Cond ref. Patient - non-exist\" AS short_description,\n    \"Condition\" AS primary_resource,\n    \n    [ 'subject.patientId' ]\n     AS primary_fields,\n    \n    [ 'Patient' ]\n     AS secondary_resources,\n    \"Referential integrity\" AS category,\n    \"PROPORTION\" AS calculation,\n    \"Condition.recordedDate\" AS metric_date_field,\n    \"Condition recorded date\" AS metric_date_description,\n    \"clinical_status\" AS dimension_a,\n    \"The clinical status of the condition (active | recurrence | relapse | inactive | remission | resolved)\" AS dimension_a_description,\n    \"verification_status\" AS dimension_b,\n    \"The verification status of the condition (unconfirmed | provisional | differential | confirmed | refuted | entered-in-error)\" AS dimension_b_description,\n    \"category\" AS dimension_c,\n    \"The category of the condition (problem-list-item | encounter-diagnosis)\" AS dimension_c_description\nUNION ALL\nSELECT\n    \"metrics/data_quality/documentreference_binary_mimetype.sql\" AS metric_path,\n    \"documentreference_binary_mimetype\" AS metric_name,\n    \"Count of DocumentReference by Binary MIME Type\" AS description,\n    \"DocRef Binary MIME Type\" AS short_description,\n    \"DocumentReference\" AS primary_resource,\n    \n    [ 'content' ]\n     AS primary_fields,\n    \n    [ 'Binary' ]\n     AS secondary_resources,\n    \"Data distribution\" AS category,\n    \"COUNT\" AS calculation,\n    \"DocumentReference.date\" AS metric_date_field,\n    \"Document reference date\" AS metric_date_description,\n    \"document_status\" AS dimension_a,\n    \"The document reference status  (current | superseded | entered-in-error)\" AS dimension_a_description,\n    \"mime_type\" AS dimension_b,\n    \"The media type of the document (binary | image/png | NULL)\" AS dimension_b_description,\n    \"\" AS dimension_c,\n    \"\" AS dimension_c_description\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.unioned_thresholds": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "unioned_thresholds", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metadata/unioned_thresholds.sql", "original_file_path": "models/metadata/unioned_thresholds.sql", "unique_id": "model.fhir_dbt_analytics.unioned_thresholds", "fqn": ["fhir_dbt_analytics", "metadata", "unioned_thresholds"], "alias": "unioned_thresholds", "checksum": {"name": "sha256", "checksum": "87c4787d4067cd233f941fe1482081432ac9d133fb4e721201ab090607be00d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1691506479.8887072, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`unioned_thresholds`", "raw_code": "{#\n/* Copyright 2022 Google LLC\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n{{ config(\n    materialized='view'\n) -}}\n{%- set models_dict = get_dbt_objects('seed') -%}\n{%- set threshold_relations = [] -%}\n{%- for name, path in models_dict.items()\n  if name[:10] == 'thresholds'\n-%}\n  {%- set relation = adapter.get_relation(\n    database = target.project,\n    schema = target.schema,\n    identifier = name\n  ) %}\n  {%- do threshold_relations.append(relation) if relation is not none %}\n{%- endfor -%}\n{{ dbt_utils.union_relations(\n    relations = threshold_relations,\n    source_column_name = \"thresholds_source\",\n    column_override = {\n      \"metric_name\": \"STRING\",\n      \"threshold_low\": type_double(),\n      \"threshold_high\": type_double(),\n      \"time_grain\": \"STRING\",\n      \"dimension\": \"STRING\",\n      \"validation_feature\": \"STRING\",\n      \"severity\": \"STRING\"\n    }\n) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_dbt_objects", "macro.fhir_dbt_analytics.type_double", "macro.dbt_utils.union_relations"], "nodes": []}, "compiled_path": "target/compiled/fhir_dbt_analytics/models/metadata/unioned_thresholds.sql", "compiled": true, "compiled_code": "\n\n\n        (\n            select\n                cast('`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`thresholds`' as STRING) as thresholds_source,\n\n                \n                    cast(`metric_name` as STRING) as `metric_name` ,\n                    cast(`threshold_low` as FLOAT64) as `threshold_low` ,\n                    cast(`threshold_high` as FLOAT64) as `threshold_high` ,\n                    cast(`time_grain` as STRING) as `time_grain` ,\n                    cast(`dimension` as STRING) as `dimension` ,\n                    cast(`validation_feature` as STRING) as `validation_feature` ,\n                    cast(`severity` as STRING) as `severity` \n\n            from `aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`thresholds`\n\n            \n        )\n\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_by_year_dimensions": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_by_year_dimensions", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metric_views/metric_by_year_dimensions.sql", "original_file_path": "models/metric_views/metric_by_year_dimensions.sql", "unique_id": "model.fhir_dbt_analytics.metric_by_year_dimensions", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_by_year_dimensions"], "alias": "metric_by_year_dimensions", "checksum": {"name": "sha256", "checksum": "4f93eb89280e61fa993972e86dd01f32af6508e5789ddec47438767183a4230d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`), and groups by source system, metric year and all slices.\n\nEach row in this view is one metric calculation for a single source system, unique combination\nof slice values and year.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1691506480.0742788, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_by_year_dimensions`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = 'YEAR',\n  segment_by_dimensions = ['dimension_a', 'dimension_b', 'dimension_c']\n) }}", "language": "sql", "refs": [{"name": "metric_definition", "package": null, "version": null}, {"name": "metric", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_by_year": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_by_year", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metric_views/metric_by_year.sql", "original_file_path": "models/metric_views/metric_by_year.sql", "unique_id": "model.fhir_dbt_analytics.metric_by_year", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_by_year"], "alias": "metric_by_year", "checksum": {"name": "sha256", "checksum": "d26bd4c40eec0df422490d4178ef482e77516d4a86c5fbf0813cea2bff8da396"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`), and groups by by source system and metric year.\n\nEach row in this view is one metric calculation for a single source system and year.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1691506480.074523, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_by_year`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = 'YEAR',\n  segment_by_dimensions = None\n) }}", "language": "sql", "refs": [{"name": "metric_definition", "package": null, "version": null}, {"name": "metric", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_by_day_dimensions": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_by_day_dimensions", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metric_views/metric_by_day_dimensions.sql", "original_file_path": "models/metric_views/metric_by_day_dimensions.sql", "unique_id": "model.fhir_dbt_analytics.metric_by_day_dimensions", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_by_day_dimensions"], "alias": "metric_by_day_dimensions", "checksum": {"name": "sha256", "checksum": "b4bd81969151b51190c97b445b6f1cac94d241c94e8485618cb8c4dc36e6536d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`) and groups by source system, metric date and all slices.\n\nEach row is one metric calculation for a single source system, unique combination of slice\nvalues, and date.\n", "columns": {"calculation": {"name": "calculation", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numerator": {"name": "numerator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "denominator": {"name": "denominator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure": {"name": "measure", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1691506480.07377, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_by_day_dimensions`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = 'DAY',\n  segment_by_dimensions = ['dimension_a', 'dimension_b', 'dimension_c']\n) }}", "language": "sql", "refs": [{"name": "metric_definition", "package": null, "version": null}, {"name": "metric", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_overall": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_overall", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metric_views/metric_overall.sql", "original_file_path": "models/metric_views/metric_overall.sql", "unique_id": "model.fhir_dbt_analytics.metric_overall", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_overall"], "alias": "metric_overall", "checksum": {"name": "sha256", "checksum": "884aa34fb7dd32c5e8743b3cc770b40ef153133d1e0214a99ef75662325743b1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`), and groups by source system only.\n\nEach row in this view is one metric calculation for a single source system over the entire\nanalysis period.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1691506480.074772, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_overall`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = None,\n  segment_by_dimensions = None\n) }}", "language": "sql", "refs": [{"name": "metric_definition", "package": null, "version": null}, {"name": "metric", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_analytics.metric_by_day": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_by_day", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "metric_views/metric_by_day.sql", "original_file_path": "models/metric_views/metric_by_day.sql", "unique_id": "model.fhir_dbt_analytics.metric_by_day", "fqn": ["fhir_dbt_analytics", "metric_views", "metric_by_day"], "alias": "metric_by_day", "checksum": {"name": "sha256", "checksum": "dba4f53e2abb3bda7b01fefe320a1749954bce94c3c3d7ced2c3cbb820e9228b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Creates a SQL view that joins the latest metric outputs (`metric`) with metric metadata\n(`metric_definition`), and groups by source system and metric date.\n\nEach row in this view is one metric calculation for a single source system and date.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/metric_views/metric_views_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1691506480.074031, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_by_day`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    materialized='view'\n) -}}\n\n{{ create_metric_view(\n  segment_by_date = 'DAY',\n  segment_by_dimensions = None\n) }}", "language": "sql", "refs": [{"name": "metric_definition", "package": null, "version": null}, {"name": "metric", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_analytics.create_metric_view"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.fhir_dbt_analytics.thresholds": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "thresholds", "resource_type": "seed", "package_name": "fhir_dbt_analytics", "path": "thresholds.csv", "original_file_path": "seeds/thresholds.csv", "unique_id": "seed.fhir_dbt_analytics.thresholds", "fqn": ["fhir_dbt_analytics", "thresholds"], "alias": "thresholds", "checksum": {"name": "sha256", "checksum": "2415cd313c10e5cca61458071b4c425c2a1e8c1d0ba628e1d21725c38834bc23"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"metric_name": "string", "threshold_low": "decimal", "threshold_high": "decimal", "time_grain": "string", "dimension": "string", "validation_feature": "string", "severity": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Metric thresholds.", "columns": {"metric_name": {"name": "metric_name", "description": "Name of metric", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "threshold_low": {"name": "threshold_low", "description": "The lowest value that the measure can take and pass this validation test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "threshold_high": {"name": "threshold_high", "description": "The highest value that the measure can take and pass this validation test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_grain": {"name": "time_grain", "description": "Optional date grain (YEAR, MONTH, WEEK, QUARTER, DAY). Blank => Whole time period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dimension": {"name": "dimension", "description": "Metric dimension (a, b or c). Leave blank to set thresholds for the metric calculated at the overall level without segmenting by dimensions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "validation_feature": {"name": "validation_feature", "description": "E.g Care Studio Notes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "severity": {"name": "severity", "description": "Error, Warn", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://seeds/seeds_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"metric_name": "string", "threshold_low": "decimal", "threshold_high": "decimal", "time_grain": "string", "dimension": "string", "validation_feature": "string", "severity": "string"}}, "created_at": 1691506480.118567, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`thresholds`", "raw_code": "", "root_path": "/Users/mv2451/code/fhir-dbt-analytics", "depends_on": {"macros": []}}, "seed.fhir_dbt_analytics.clinical_code_groups": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "clinical_code_groups", "resource_type": "seed", "package_name": "fhir_dbt_analytics", "path": "clinical_code_groups.csv", "original_file_path": "seeds/clinical_code_groups.csv", "unique_id": "seed.fhir_dbt_analytics.clinical_code_groups", "fqn": ["fhir_dbt_analytics", "clinical_code_groups"], "alias": "clinical_code_groups", "checksum": {"name": "sha256", "checksum": "07e950b929a76c5e65154f354fdef13c9db4993c15bc7e4b5fa24fa6de896103"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"group_type": "string", "group": "string", "code": "string", "display": "string", "system": "string", "match_type": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Reference table mapping clinical codes to broader clinical groups.", "columns": {"group_type": {"name": "group_type", "description": "Clinical category that this group belongs to (e.g. Condition, Procedure, Observation).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group": {"name": "group", "description": "Name of the clinical group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "Clinical code that is mapped to the clinical group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display": {"name": "display", "description": "Display name for the clinical code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "system": {"name": "system", "description": "Coding system from which this clinical code is defined (e.g. http://snomed.info/sct).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "match_type": {"name": "match_type", "description": "Type of string match needed to use the code string (e.g. 'exact' (exact match), start (starts with), end (ends with)).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://seeds/seeds_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"group_type": "string", "group": "string", "code": "string", "display": "string", "system": "string", "match_type": "string"}}, "created_at": 1691506480.115922, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`clinical_code_groups`", "raw_code": "", "root_path": "/Users/mv2451/code/fhir-dbt-analytics", "depends_on": {"macros": []}}, "seed.fhir_dbt_analytics.site_timezones": {"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "site_timezones", "resource_type": "seed", "package_name": "fhir_dbt_analytics", "path": "site_timezones.csv", "original_file_path": "seeds/site_timezones.csv", "unique_id": "seed.fhir_dbt_analytics.site_timezones", "fqn": ["fhir_dbt_analytics", "site_timezones"], "alias": "site_timezones", "checksum": {"name": "sha256", "checksum": "564275a1dc7c52f380990a1040d44a5c5600805f722964ba698d201b102ba23d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Mapping from site in meta.sourceIdentifier.system to timezone for that site.", "columns": {"site": {"name": "site", "description": "Name of site as stored in meta.sourceIdentifier.system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bq_timezone": {"name": "bq_timezone", "description": "BigQuery-valid timezone, see [list of valid tz database entries](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://seeds/seeds_config.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1691506480.113327, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`site_timezones`", "raw_code": "", "root_path": "/Users/mv2451/code/fhir-dbt-analytics", "depends_on": {"macros": []}}, "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('metric_definition')", "field": "metric_name", "column_name": "metric_name", "model": "{{ get_where_subquery(ref('metric_latest_execution')) }}"}, "namespace": null}, "database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001_dbt_test__audit", "name": "relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_", "resource_type": "test", "package_name": "fhir_dbt_analytics", "path": "relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea.sql", "original_file_path": "models/post_processing/post_processing_config.yml", "unique_id": "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef", "fqn": ["fhir_dbt_analytics", "post_processing", "relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_"], "alias": "relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea"}, "created_at": 1691506480.0215511, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_metric_latest_ex_c831648f794616a2461cd8a848e13aea\") }}", "language": "sql", "refs": [{"name": "metric_definition", "package": null, "version": null}, {"name": "metric_latest_execution", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_latest_execution"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "metric_name", "file_key_name": "models.metric_latest_execution", "attached_node": "model.fhir_dbt_analytics.metric_latest_execution"}, "test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["COUNT", "PROPORTION", "RATIO", "DISTRIBUTION"], "column_name": "calculation", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": null}, "database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001_dbt_test__audit", "name": "accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION", "resource_type": "test", "package_name": "fhir_dbt_analytics", "path": "accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "unique_id": "test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd", "fqn": ["fhir_dbt_analytics", "metric_views", "accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION"], "alias": "accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb"}, "created_at": 1691506480.07531, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_metric_by_day__abf3f09690fdbb30b125d3c6ffe2c2fb\") }}", "language": "sql", "refs": [{"name": "metric_by_day_dimensions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "calculation", "file_key_name": "models.metric_by_day_dimensions", "attached_node": "model.fhir_dbt_analytics.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781": {"test_metadata": {"name": "expect_column_values_to_be_null", "kwargs": {"row_condition": "calculation = 'COUNT'", "column_name": "numerator", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001_dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_", "resource_type": "test", "package_name": "fhir_dbt_analytics", "path": "dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_"], "alias": "dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68"}, "created_at": 1691506480.081418, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c1e46c9df0cc15674db04c0aa3d1ef68\") }}", "language": "sql", "refs": [{"name": "metric_by_day_dimensions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "numerator", "file_key_name": "models.metric_by_day_dimensions", "attached_node": "model.fhir_dbt_analytics.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1": {"test_metadata": {"name": "expect_column_values_to_not_be_null", "kwargs": {"row_condition": "calculation IN ('PROPORTION', 'RATIO')", "column_name": "numerator", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001_dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_", "resource_type": "test", "package_name": "fhir_dbt_analytics", "path": "dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_"], "alias": "dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9"}, "created_at": 1691506480.090008, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e2ce9aa0259f15733137a236dc6866c9\") }}", "language": "sql", "refs": [{"name": "metric_by_day_dimensions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "numerator", "file_key_name": "models.metric_by_day_dimensions", "attached_node": "model.fhir_dbt_analytics.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e": {"test_metadata": {"name": "expect_column_values_to_be_null", "kwargs": {"row_condition": "calculation = 'COUNT'", "column_name": "denominator", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001_dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_", "resource_type": "test", "package_name": "fhir_dbt_analytics", "path": "dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_"], "alias": "dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591"}, "created_at": 1691506480.094486, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_164ae71b28abc9302e0ca7de35086591\") }}", "language": "sql", "refs": [{"name": "metric_by_day_dimensions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "denominator", "file_key_name": "models.metric_by_day_dimensions", "attached_node": "model.fhir_dbt_analytics.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885": {"test_metadata": {"name": "expect_column_values_to_not_be_null", "kwargs": {"row_condition": "calculation IN ('PROPORTION', 'RATIO')", "column_name": "denominator", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001_dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_", "resource_type": "test", "package_name": "fhir_dbt_analytics", "path": "dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_"], "alias": "dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9"}, "created_at": 1691506480.0974772, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_69dc29d89af989809a415411b5b0f6b9\") }}", "language": "sql", "refs": [{"name": "metric_by_day_dimensions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "denominator", "file_key_name": "models.metric_by_day_dimensions", "attached_node": "model.fhir_dbt_analytics.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3": {"test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 1, "row_condition": "calculation IN ('PROPORTION', 'RATIO')", "column_name": "measure", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_expectations"}, "database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001_dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_", "resource_type": "test", "package_name": "fhir_dbt_analytics", "path": "dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "unique_id": "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_"], "alias": "dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1"}, "created_at": 1691506480.100425, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2bd8294656badb54880fd8ab63a8b9b1\") }}", "language": "sql", "refs": [{"name": "metric_by_day_dimensions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "measure", "file_key_name": "models.metric_by_day_dimensions", "attached_node": "model.fhir_dbt_analytics.metric_by_day_dimensions"}, "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions__safe_divide_numerator_denominator_measure.154d11b42e": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "{{ safe_divide('numerator', 'denominator') }} = measure", "model": "{{ get_where_subquery(ref('metric_by_day_dimensions')) }}"}, "namespace": "dbt_utils"}, "database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001_dbt_test__audit", "name": "dbt_utils_expression_is_true_metric_by_day_dimensions__safe_divide_numerator_denominator_measure", "resource_type": "test", "package_name": "fhir_dbt_analytics", "path": "dbt_utils_expression_is_true_m_bb8ed65c7016526618d71542dda722e7.sql", "original_file_path": "models/metric_views/metric_views_config.yml", "unique_id": "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions__safe_divide_numerator_denominator_measure.154d11b42e", "fqn": ["fhir_dbt_analytics", "metric_views", "dbt_utils_expression_is_true_metric_by_day_dimensions__safe_divide_numerator_denominator_measure"], "alias": "dbt_utils_expression_is_true_m_bb8ed65c7016526618d71542dda722e7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_m_bb8ed65c7016526618d71542dda722e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "calculation IN ('PROPORTION', 'RATIO')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"where": "calculation IN ('PROPORTION', 'RATIO')", "alias": "dbt_utils_expression_is_true_m_bb8ed65c7016526618d71542dda722e7"}, "created_at": 1691506480.107411, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"calculation IN ('PROPORTION', 'RATIO')\",alias=\"dbt_utils_expression_is_true_m_bb8ed65c7016526618d71542dda722e7\") }}", "language": "sql", "refs": [{"name": "metric_by_day_dimensions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.fhir_dbt_analytics.metric_by_day_dimensions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.metric_by_day_dimensions", "attached_node": "model.fhir_dbt_analytics.metric_by_day_dimensions"}}, "sources": {"source.fhir_dbt_analytics.fhir.Patient": {"database": "aou-datawarehouse-sandbox", "schema": "ppi_001", "name": "Patient", "resource_type": "source", "package_name": "fhir_dbt_analytics", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "unique_id": "source.fhir_dbt_analytics.fhir.Patient", "fqn": ["fhir_dbt_analytics", "fhir", "Patient"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Patient", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`aou-datawarehouse-sandbox`.`ppi_001`.`Patient`", "created_at": 1691506480.1559381}, "source.fhir_dbt_analytics.fhir.Questionnaire": {"database": "aou-datawarehouse-sandbox", "schema": "ppi_001", "name": "Questionnaire", "resource_type": "source", "package_name": "fhir_dbt_analytics", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "unique_id": "source.fhir_dbt_analytics.fhir.Questionnaire", "fqn": ["fhir_dbt_analytics", "fhir", "Questionnaire"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Questionnaire", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`aou-datawarehouse-sandbox`.`ppi_001`.`Questionnaire`", "created_at": 1691506480.1560802}, "source.fhir_dbt_analytics.fhir.QuestionnaireResponse": {"database": "aou-datawarehouse-sandbox", "schema": "ppi_001", "name": "QuestionnaireResponse", "resource_type": "source", "package_name": "fhir_dbt_analytics", "path": "models/fhir_sources.yml", "original_file_path": "models/fhir_sources.yml", "unique_id": "source.fhir_dbt_analytics.fhir.QuestionnaireResponse", "fqn": ["fhir_dbt_analytics", "fhir", "QuestionnaireResponse"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "QuestionnaireResponse", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`aou-datawarehouse-sandbox`.`ppi_001`.`QuestionnaireResponse`", "created_at": 1691506480.156184}}, "macros": {"macro.fhir_dbt_analytics.snake_case_to_proper_case": {"name": "snake_case_to_proper_case", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/string_macros/snake_case_to_proper_case.sql", "original_file_path": "macros/string_macros/snake_case_to_proper_case.sql", "unique_id": "macro.fhir_dbt_analytics.snake_case_to_proper_case", "macro_sql": "{%- macro snake_case_to_proper_case(snake_case_column) -%}\nREPLACE(INITCAP({{ snake_case_column }}), '_', ' ')\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Converts a snake_case column (e.g. encounter_class) to Proper Case (e.g Encounter Class).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "snake_case_column", "type": "string", "description": "Column with snake_case value to be converted to Proper Case.\n"}], "created_at": 1691506480.145472, "supported_languages": null}, "macro.fhir_dbt_analytics.quote_array": {"name": "quote_array", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/string_macros/quote_array.sql", "original_file_path": "macros/string_macros/quote_array.sql", "unique_id": "macro.fhir_dbt_analytics.quote_array", "macro_sql": "{% macro quote_array(x) %}\n  {% set result=[] %}\n  {% for i in x %}\n    {{ result.append(\"'\" ~ dbt.escape_single_quotes(i) ~ \"'\") }}\n  {% endfor %}\n  {% do return (result) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes"]}, "description": "Returns an array with each string wrapped in single quotes.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "x", "type": "list of strings", "description": "List of strings to be quoted.\n"}], "created_at": 1691506480.144574, "supported_languages": null}, "macro.fhir_dbt_analytics.find_first_of": {"name": "find_first_of", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/string_macros/find_first_of.sql", "original_file_path": "macros/string_macros/find_first_of.sql", "unique_id": "macro.fhir_dbt_analytics.find_first_of", "macro_sql": "{% macro find_first_of(haystack, letters) %}\n  {% for i in range(0, haystack|length)\n     if haystack[i] in letters %}\n    {{ return (i) }}\n  {% endfor %}\n\n  {{ return(-1) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Finds first of a given list of letters in a string.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "haystack", "type": "string", "description": "String to search through"}, {"name": "letters", "type": "string", "description": "Letters to search for"}], "created_at": 1691506480.14383, "supported_languages": null}, "macro.fhir_dbt_analytics.snake_case": {"name": "snake_case", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/string_macros/snake_case.sql", "original_file_path": "macros/string_macros/snake_case.sql", "unique_id": "macro.fhir_dbt_analytics.snake_case", "macro_sql": "{% macro snake_case(str) %}\n    {#- Add underscore before capital letters which follow lowercase letters -#}\n    {% set str = modules.re.sub(\"([a-z])([A-Z])\", \"\\\\1_\\\\2\", str) %}\n    {#- Lower case the string -#}\n    {{ return(str | lower) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Returns a snake_case version of a CamelCase string.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "str", "type": "string", "description": "String in CamelCase to be converted to snake_case.\n"}], "created_at": 1691506480.145026, "supported_languages": null}, "macro.fhir_dbt_analytics.date": {"name": "date", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/date.sql", "original_file_path": "macros/cross_db_macros/date.sql", "unique_id": "macro.fhir_dbt_analytics.date", "macro_sql": "{% macro date(expression, timezone=None) -%}\n  {{ return(adapter.dispatch('date', 'fhir_dbt_analytics') (expression, timezone)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.245462, "supported_languages": null}, "macro.fhir_dbt_analytics.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/date.sql", "original_file_path": "macros/cross_db_macros/date.sql", "unique_id": "macro.fhir_dbt_analytics.default__date", "macro_sql": "{% macro default__date(expression, timezone) -%}\n  DATE({{ expression }}, {{ timezone }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.245624, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__date": {"name": "spark__date", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/date.sql", "original_file_path": "macros/cross_db_macros/date.sql", "unique_id": "macro.fhir_dbt_analytics.spark__date", "macro_sql": "{% macro spark__date(expression, timezone) -%}\n  DATE({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.245761, "supported_languages": null}, "macro.fhir_dbt_analytics.error": {"name": "error", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/error.sql", "original_file_path": "macros/cross_db_macros/error.sql", "unique_id": "macro.fhir_dbt_analytics.error", "macro_sql": "{% macro error(expression) -%}\n  {{ return(adapter.dispatch('error', 'fhir_dbt_analytics') (expression)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__error"]}, "description": "Returns the SQL to fail the query with an error.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "expression", "type": null, "description": "Error message."}], "created_at": 1691506480.150243, "supported_languages": null}, "macro.fhir_dbt_analytics.default__error": {"name": "default__error", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/error.sql", "original_file_path": "macros/cross_db_macros/error.sql", "unique_id": "macro.fhir_dbt_analytics.default__error", "macro_sql": "{% macro default__error(expression) -%}\n  ERROR(\"{{ expression }}\")\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.246218, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__error": {"name": "spark__error", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/error.sql", "original_file_path": "macros/cross_db_macros/error.sql", "unique_id": "macro.fhir_dbt_analytics.spark__error", "macro_sql": "{% macro spark__error(expression) -%}\n  raise_error(\"{{ expression }}\")\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.246343, "supported_languages": null}, "macro.fhir_dbt_analytics.table_ref": {"name": "table_ref", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/table_ref.sql", "original_file_path": "macros/cross_db_macros/table_ref.sql", "unique_id": "macro.fhir_dbt_analytics.table_ref", "macro_sql": "{% macro table_ref(database, schema, table) -%}\n  {{ return(adapter.dispatch('table_ref', 'fhir_dbt_analytics') (database, schema, table)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__table_ref"]}, "description": "Constructs a table reference. Useful e.g. when `ref` macro can't be used.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "database", "type": null, "description": ""}, {"name": "schema", "type": null, "description": ""}, {"name": "table", "type": null, "description": ""}], "created_at": 1691506480.151447, "supported_languages": null}, "macro.fhir_dbt_analytics.default__table_ref": {"name": "default__table_ref", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/table_ref.sql", "original_file_path": "macros/cross_db_macros/table_ref.sql", "unique_id": "macro.fhir_dbt_analytics.default__table_ref", "macro_sql": "{% macro default__table_ref(database, schema, table) -%}\n  {{ return(\"`\"~database~\"`.`\"~schema~\"`.`\"~table~\"`\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.246964, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__table_ref": {"name": "spark__table_ref", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/table_ref.sql", "original_file_path": "macros/cross_db_macros/table_ref.sql", "unique_id": "macro.fhir_dbt_analytics.spark__table_ref", "macro_sql": "{% macro spark__table_ref(database, schema, table) -%}\n  {{ return(schema~\".\"~table) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2471418, "supported_languages": null}, "macro.fhir_dbt_analytics.array_join": {"name": "array_join", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/array_join.sql", "original_file_path": "macros/cross_db_macros/array_join.sql", "unique_id": "macro.fhir_dbt_analytics.array_join", "macro_sql": "{% macro array_join(array, delimiter) -%}\n  {{ return(adapter.dispatch('array_join', 'fhir_dbt_analytics') (array, delimiter)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__array_join"]}, "description": "Creates a string by joining the `array` values by the `delimiter`.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "array", "type": null, "description": ""}, {"name": "delimiter", "type": null, "description": ""}], "created_at": 1691506480.150837, "supported_languages": null}, "macro.fhir_dbt_analytics.default__array_join": {"name": "default__array_join", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/array_join.sql", "original_file_path": "macros/cross_db_macros/array_join.sql", "unique_id": "macro.fhir_dbt_analytics.default__array_join", "macro_sql": "{% macro default__array_join(array, delimiter) -%}\n  ARRAY_TO_STRING({{ array }}, \"{{ delimiter }}\")\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.247672, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__array_join": {"name": "spark__array_join", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/array_join.sql", "original_file_path": "macros/cross_db_macros/array_join.sql", "unique_id": "macro.fhir_dbt_analytics.spark__array_join", "macro_sql": "{% macro spark__array_join(array, delimiter) -%}\n  array_join({{ array }}, \"{{ delimiter }}\")\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.247823, "supported_languages": null}, "macro.fhir_dbt_analytics.select_from_unnest": {"name": "select_from_unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/select_from_unnest.sql", "original_file_path": "macros/cross_db_macros/select_from_unnest.sql", "unique_id": "macro.fhir_dbt_analytics.select_from_unnest", "macro_sql": "{% macro select_from_unnest(select, unnested, where=\"1=1\", order_by=\"1\") -%}\n  {{ return (adapter.dispatch('select_from_unnest', 'fhir_dbt_analytics') (select, unnested, where, order_by)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__select_from_unnest"]}, "description": "Prints SQL which selects the first value from unnested arrays.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "select", "type": "string", "description": "The field to select."}, {"name": "unnested", "type": "number", "description": "The unnested arrays, perhaps a result of the `unnest` or `unnest_multiple` macros.\n"}, {"name": "where", "type": "string", "description": "The WHERE clause, can use the alias of the unnested array values.\n"}, {"name": "order_by", "type": "string", "description": "The ORDER BY clause, important because we select the first value.\n"}], "created_at": 1691506480.154289, "supported_languages": null}, "macro.fhir_dbt_analytics.default__select_from_unnest": {"name": "default__select_from_unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/select_from_unnest.sql", "original_file_path": "macros/cross_db_macros/select_from_unnest.sql", "unique_id": "macro.fhir_dbt_analytics.default__select_from_unnest", "macro_sql": "{% macro default__select_from_unnest(select, unnested, where, order_by) -%}\nSELECT {{ select }} FROM {{ unnested }} WHERE {{ where }} ORDER BY {{ order_by }} LIMIT 1\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.248578, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__select_from_unnest": {"name": "spark__select_from_unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/select_from_unnest.sql", "original_file_path": "macros/cross_db_macros/select_from_unnest.sql", "unique_id": "macro.fhir_dbt_analytics.spark__select_from_unnest", "macro_sql": "{% macro spark__select_from_unnest(select, unnested, where, order_by) -%}\nSELECT ELEMENT_AT(COLLECT_LIST({{ select }}), 1) FROM (\n  SELECT * FROM ({{ unnested }})\n  WHERE {{ where }}\n  ORDER BY {{ order_by }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2488918, "supported_languages": null}, "macro.fhir_dbt_analytics.unnest_multiple": {"name": "unnest_multiple", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/unnest_multiple.sql", "original_file_path": "macros/cross_db_macros/unnest_multiple.sql", "unique_id": "macro.fhir_dbt_analytics.unnest_multiple", "macro_sql": "{% macro unnest_multiple(arrays) -%}\n  {{ return (adapter.dispatch('unnest_multiple', 'fhir_dbt_analytics') (arrays)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__unnest_multiple"]}, "description": "Prints SQL which unnests a nested array.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "arrays", "type": "list", "description": "Configurations of the arrays to be unnested, each ideally created using the `array_config`\nmacro.\n"}], "created_at": 1691506480.152352, "supported_languages": null}, "macro.fhir_dbt_analytics.array_config": {"name": "array_config", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/unnest_multiple.sql", "original_file_path": "macros/cross_db_macros/unnest_multiple.sql", "unique_id": "macro.fhir_dbt_analytics.array_config", "macro_sql": "{% macro array_config(field, unnested_alias = 'unused') %}\n  {{ return ({ \"field\": field, \"unnested_alias\": unnested_alias}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Creates array config for the `unnest_config` macro.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "field", "type": "string", "description": "The array field to unnest."}, {"name": "unnested_alias", "type": "string", "description": "The alias for the unnested array values."}], "created_at": 1691506480.1531231, "supported_languages": null}, "macro.fhir_dbt_analytics.default__unnest_multiple": {"name": "default__unnest_multiple", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/unnest_multiple.sql", "original_file_path": "macros/cross_db_macros/unnest_multiple.sql", "unique_id": "macro.fhir_dbt_analytics.default__unnest_multiple", "macro_sql": "{% macro default__unnest_multiple(arrays) -%}\n  {% for array in arrays -%}\n    UNNEST({{ array.field }}) {{ array.unnested_alias }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.249953, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__unnest_multiple": {"name": "spark__unnest_multiple", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/unnest_multiple.sql", "original_file_path": "macros/cross_db_macros/unnest_multiple.sql", "unique_id": "macro.fhir_dbt_analytics.spark__unnest_multiple", "macro_sql": "{% macro spark__unnest_multiple(arrays) -%}\n  {# Select the field as `ac`: this \"cheeky select\" trick allows us to write the unnest as one\n      statement. #}\n  {%- set array0 = arrays[0] -%}\n    SELECT * FROM (SELECT EXPLODE(ac) AS {{ array0.unnested_alias }} FROM (SELECT {{ array0.field }} AS ac))\n  {%- for array in arrays[1:] %}\n    LATERAL VIEW OUTER explode ({{ array.field }}) AS {{ array.unnested_alias }}\n  {%- endfor -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.250357, "supported_languages": null}, "macro.fhir_dbt_analytics.current_datetime": {"name": "current_datetime", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/current_datetime.sql", "original_file_path": "macros/cross_db_macros/current_datetime.sql", "unique_id": "macro.fhir_dbt_analytics.current_datetime", "macro_sql": "{% macro current_datetime() -%}\n  {{ return(adapter.dispatch('current_datetime', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__current_datetime"]}, "description": "Returns the current date and time. No arguments.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.1496, "supported_languages": null}, "macro.fhir_dbt_analytics.default__current_datetime": {"name": "default__current_datetime", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/current_datetime.sql", "original_file_path": "macros/cross_db_macros/current_datetime.sql", "unique_id": "macro.fhir_dbt_analytics.default__current_datetime", "macro_sql": "{% macro default__current_datetime() -%}\n  CURRENT_DATETIME()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.250734, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__current_datetime": {"name": "spark__current_datetime", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/current_datetime.sql", "original_file_path": "macros/cross_db_macros/current_datetime.sql", "unique_id": "macro.fhir_dbt_analytics.spark__current_datetime", "macro_sql": "{% macro spark__current_datetime() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.250818, "supported_languages": null}, "macro.fhir_dbt_analytics.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/safe_divide.sql", "original_file_path": "macros/cross_db_macros/safe_divide.sql", "unique_id": "macro.fhir_dbt_analytics.safe_divide", "macro_sql": "{%- macro safe_divide(x, y) -%}\nIF(({{ y }}) != 0, ({{ x }}) / ({{ y }}), NULL)\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Return NULL if dividing by zero.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "x", "type": "string", "description": "The numerator."}, {"name": "y", "type": "string", "description": "The denominator."}], "created_at": 1691506480.147965, "supported_languages": null}, "macro.fhir_dbt_analytics.type_double": {"name": "type_double", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/type_double.sql", "original_file_path": "macros/cross_db_macros/type_double.sql", "unique_id": "macro.fhir_dbt_analytics.type_double", "macro_sql": "{% macro type_double() -%}\n  {{ return(adapter.dispatch('type_double', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.bigquery__type_double"]}, "description": "Database specific type name for 64-bit rational number. No arguments.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.148192, "supported_languages": null}, "macro.fhir_dbt_analytics.default__type_double": {"name": "default__type_double", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/type_double.sql", "original_file_path": "macros/cross_db_macros/type_double.sql", "unique_id": "macro.fhir_dbt_analytics.default__type_double", "macro_sql": "{% macro default__type_double() -%}\n  DOUBLE\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.251401, "supported_languages": null}, "macro.fhir_dbt_analytics.bigquery__type_double": {"name": "bigquery__type_double", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/type_double.sql", "original_file_path": "macros/cross_db_macros/type_double.sql", "unique_id": "macro.fhir_dbt_analytics.bigquery__type_double", "macro_sql": "{% macro bigquery__type_double() -%}\n  FLOAT64\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.251488, "supported_languages": null}, "macro.fhir_dbt_analytics.type_long": {"name": "type_long", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/type_long.sql", "original_file_path": "macros/cross_db_macros/type_long.sql", "unique_id": "macro.fhir_dbt_analytics.type_long", "macro_sql": "{% macro type_long() -%}\n  {{ return(adapter.dispatch('type_long', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.bigquery__type_long"]}, "description": "Database specific type name for 64-bit integer. No arguments.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.148416, "supported_languages": null}, "macro.fhir_dbt_analytics.default__type_long": {"name": "default__type_long", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/type_long.sql", "original_file_path": "macros/cross_db_macros/type_long.sql", "unique_id": "macro.fhir_dbt_analytics.default__type_long", "macro_sql": "{% macro default__type_long() -%}\n  LONG\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2518451, "supported_languages": null}, "macro.fhir_dbt_analytics.bigquery__type_long": {"name": "bigquery__type_long", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/type_long.sql", "original_file_path": "macros/cross_db_macros/type_long.sql", "unique_id": "macro.fhir_dbt_analytics.bigquery__type_long", "macro_sql": "{% macro bigquery__type_long() -%}\n  INT64\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.251925, "supported_languages": null}, "macro.fhir_dbt_analytics.flatten_column": {"name": "flatten_column", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/flatten_column.sql", "original_file_path": "macros/cross_db_macros/flatten_column.sql", "unique_id": "macro.fhir_dbt_analytics.flatten_column", "macro_sql": "{% macro flatten_column(column) -%}\n  {{ return(adapter.dispatch('flatten_column', 'fhir_dbt_analytics') (column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__flatten_column"]}, "description": "Parses the data type and returns a list of sub-columns as structs with `name` and `data_type`\nfields. Recursively finds all sub-columns in a nested data type.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "column", "type": "struct with `name` and `data_type` fields", "description": "Column definition, including a structured `data_type`.\n"}], "created_at": 1691506480.146713, "supported_languages": null}, "macro.fhir_dbt_analytics.default__flatten_column": {"name": "default__flatten_column", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/flatten_column.sql", "original_file_path": "macros/cross_db_macros/flatten_column.sql", "unique_id": "macro.fhir_dbt_analytics.default__flatten_column", "macro_sql": "{% macro default__flatten_column(column) -%}\n  {{ return (column.flatten()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.255392, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__flatten_column": {"name": "spark__flatten_column", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/flatten_column.sql", "original_file_path": "macros/cross_db_macros/flatten_column.sql", "unique_id": "macro.fhir_dbt_analytics.spark__flatten_column", "macro_sql": "{% macro spark__flatten_column(column) -%}\n  {% set EXPECT_DATA_TYPE = \"EXPECT_DATA_TYPE\" %}\n  {% set EXPECT_COLUMN_NAME = \"EXPECT_COLUMN_NAME\" %}\n  {% set EXPECT_COMMA_OR_GREATER_THAN = \"EXPECT_COMMA_OR_GREATER_THAN\" %}\n  {% set EXPECT_COLON = \"EXPECT_COLON\" %}\n\n  {% if not \"<\" in column.data_type %}\n    {{ return ([]) }}\n  {% endif %}\n\n  {% set tokens = _tokenize(column.data_type) %}\n  {% set vars = { \"state\": EXPECT_DATA_TYPE } %}\n  {% set path = [column.name + \".\"] %}\n  {% set flat_columns = [] %}\n\n  {% for token in tokens %}\n\n    {% if vars.state == EXPECT_COMMA_OR_GREATER_THAN %}\n      {% if token == \",\" %}\n          {{ vars.update({ \"state\": EXPECT_COLUMN_NAME }) }}\n      {% else %}\n          {{ path.pop() }}\n      {% endif %}\n\n    {% elif vars.state == EXPECT_COLUMN_NAME %}\n      {% if token in KEYWORDS %}\n        {{ exceptions.raise_compiler_error(\"Expected column name, not '\" ~ token ~ \"'\") }}\n      {% endif %}\n      {{ path.append(token + \".\") }}\n      {{ vars.update({ \"state\": EXPECT_COLON }) }}\n\n    {% elif vars.state == EXPECT_COLON %}\n      {% if token != \":\" %}\n        {{ exceptions.raise_compiler_error(\"Expected colon, not '\" ~ token ~ \"'\") }}\n      {%  endif %}\n      {{ vars.update({ \"state\": EXPECT_DATA_TYPE }) }}\n\n    {% elif vars.state == EXPECT_DATA_TYPE %}\n\n      {% if token == \"struct<\" %}\n        {% set data_type = \"STRUCT\" %}\n        {{ vars.update({ \"state\": EXPECT_COLUMN_NAME }) }}\n\n      {% elif token == \"array<\" %}\n        {% set data_type = \"ARRAY\" %}\n        # Append empty string so that it does not appear in column name\n        # but we have something to pop when the array definition ends.\n        {{ path.append(\"\") }}\n        {{ vars.update({ \"state\": EXPECT_DATA_TYPE }) }}\n\n      {% else %}\n        {% set data_type = token %}\n        {{ vars.update({ \"state\": EXPECT_COMMA_OR_GREATER_THAN }) }}\n      {% endif %}\n\n      {% set full_name = (\"\".join(path))[:-1] %}\n      {% if (flat_columns|length > 0\n          and flat_columns[-1][\"name\"] == full_name\n          and flat_columns[-1][\"data_type\"].startswith(\"ARRAY\")) %}\n        # Let's replace the data type for the array.\n        # TODO(jakuba): For nested arrays, the data type will still have just one ARRAY.\n        {{ flat_columns.pop() }}\n        {% set data_type = \"ARRAY<\" + data_type + \">\" %}\n      {% endif %}\n\n      {{ flat_columns.append({\n          \"name\": full_name,\n          \"data_type\": data_type}) }}\n\n      {% if data_type == token %}\n        {{ path.pop() }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(flat_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics._tokenize"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.258702, "supported_languages": null}, "macro.fhir_dbt_analytics._tokenize": {"name": "_tokenize", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/flatten_column.sql", "original_file_path": "macros/cross_db_macros/flatten_column.sql", "unique_id": "macro.fhir_dbt_analytics._tokenize", "macro_sql": "{% macro _tokenize(dtype) %}\n  {% set KEYWORDS = [\n      \"struct<\",\n      \"array<\",\n      ',',\n      ':',\n      '>']\n  %}\n\n  {% set tokens = [] %}\n  # In order to keep variables in a `for` cycle, we need to put them in a dictionary.\n  {% set vars = { \"rest\": dtype } %}\n\n  {% for unused in range(0, dtype|length)\n     if vars.rest|length > 0 %}\n    {% set rest = vars.rest %}\n    {{ vars.update({ \"token\": rest[: find_first_of(rest, \",:>\")] }) }}\n    {% for keyword in KEYWORDS %}\n      {% if rest.startswith(keyword) %}\n        {{ vars.update({ \"token\": keyword }) }}\n      {% endif %}\n    {% endfor %}\n    {{ tokens.append(vars.token) }}\n    {{ vars.update({ \"rest\": rest[vars.token|length:] }) }}\n  {% endfor %}\n\n  {{ return (tokens) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.find_first_of"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2599308, "supported_languages": null}, "macro.fhir_dbt_analytics.spark_parenthesis": {"name": "spark_parenthesis", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/spark_parenthesis.sql", "original_file_path": "macros/cross_db_macros/spark_parenthesis.sql", "unique_id": "macro.fhir_dbt_analytics.spark_parenthesis", "macro_sql": "{% macro spark_parenthesis(s) -%}\n  {{ return (adapter.dispatch('spark_parenthesis', 'fhir_dbt_analytics') (s)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__spark_parenthesis"]}, "description": "Surrounds `s` by parenthesis on Spark, leaves as is on BigQuery.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "s", "type": "string", "description": ""}], "created_at": 1691506480.154728, "supported_languages": null}, "macro.fhir_dbt_analytics.default__spark_parenthesis": {"name": "default__spark_parenthesis", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/spark_parenthesis.sql", "original_file_path": "macros/cross_db_macros/spark_parenthesis.sql", "unique_id": "macro.fhir_dbt_analytics.default__spark_parenthesis", "macro_sql": "{% macro default__spark_parenthesis(s) -%}\n  {{ s }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2603672, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__spark_parenthesis": {"name": "spark__spark_parenthesis", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/spark_parenthesis.sql", "original_file_path": "macros/cross_db_macros/spark_parenthesis.sql", "unique_id": "macro.fhir_dbt_analytics.spark__spark_parenthesis", "macro_sql": "{% macro spark__spark_parenthesis(s) -%}\n  ({{ s }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.260486, "supported_languages": null}, "macro.fhir_dbt_analytics.unnest": {"name": "unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/unnest.sql", "original_file_path": "macros/cross_db_macros/unnest.sql", "unique_id": "macro.fhir_dbt_analytics.unnest", "macro_sql": "{% macro unnest(array, alias = \"\") -%}\n  {{ return (adapter.dispatch('unnest', 'fhir_dbt_analytics') (array, alias)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__unnest"]}, "description": "Prints SQL which unnests an array.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "array", "type": "string", "description": "The array to unnest."}, {"name": "alias", "type": "string", "description": "The alias for the unnested values."}], "created_at": 1691506480.151916, "supported_languages": null}, "macro.fhir_dbt_analytics.default__unnest": {"name": "default__unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/unnest.sql", "original_file_path": "macros/cross_db_macros/unnest.sql", "unique_id": "macro.fhir_dbt_analytics.default__unnest", "macro_sql": "{% macro default__unnest(array, alias) -%}\n  UNNEST({{ array }}){% if alias|length > 0 %} {{ alias }}{% endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2611232, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__unnest": {"name": "spark__unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/unnest.sql", "original_file_path": "macros/cross_db_macros/unnest.sql", "unique_id": "macro.fhir_dbt_analytics.spark__unnest", "macro_sql": "{% macro spark__unnest(array, alias) -%}\n  SELECT EXPLODE(ac){% if alias|length > 0 %} AS {{ alias }}{% endif %} FROM (SELECT {{ array }} AS ac)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.261353, "supported_languages": null}, "macro.fhir_dbt_analytics.safe_cast_as_date": {"name": "safe_cast_as_date", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/safe_cast_as_date.sql", "original_file_path": "macros/cross_db_macros/safe_cast_as_date.sql", "unique_id": "macro.fhir_dbt_analytics.safe_cast_as_date", "macro_sql": "{%- macro safe_cast_as_date(x) -%}\n    {{ dbt.safe_cast(x, api.Column.translate_type(\"date\")) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.safe_cast"]}, "description": "Convenience function to safe_cast as date.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "x", "type": "string", "description": "Expression to be cast as date."}], "created_at": 1691506480.14721, "supported_languages": null}, "macro.fhir_dbt_analytics.uuid": {"name": "uuid", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/uuid.sql", "original_file_path": "macros/cross_db_macros/uuid.sql", "unique_id": "macro.fhir_dbt_analytics.uuid", "macro_sql": "{% macro uuid() -%}\n  {{ return(adapter.dispatch('uuid', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.bigquery__uuid"]}, "description": "Returns the SQL for UUID.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.149819, "supported_languages": null}, "macro.fhir_dbt_analytics.default__uuid": {"name": "default__uuid", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/uuid.sql", "original_file_path": "macros/cross_db_macros/uuid.sql", "unique_id": "macro.fhir_dbt_analytics.default__uuid", "macro_sql": "{% macro default__uuid() -%}\n  UUID()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.261953, "supported_languages": null}, "macro.fhir_dbt_analytics.bigquery__uuid": {"name": "bigquery__uuid", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/uuid.sql", "original_file_path": "macros/cross_db_macros/uuid.sql", "unique_id": "macro.fhir_dbt_analytics.bigquery__uuid", "macro_sql": "{% macro bigquery__uuid() -%}\n  GENERATE_UUID()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.262037, "supported_languages": null}, "macro.fhir_dbt_analytics.safe_offset": {"name": "safe_offset", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/safe_offset.sql", "original_file_path": "macros/cross_db_macros/safe_offset.sql", "unique_id": "macro.fhir_dbt_analytics.safe_offset", "macro_sql": "{% macro safe_offset(array, index) -%}\n  {{ return(adapter.dispatch('safe_offset', 'fhir_dbt_analytics') (array, index)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__safe_offset"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.262391, "supported_languages": null}, "macro.fhir_dbt_analytics.default__safe_offset": {"name": "default__safe_offset", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/safe_offset.sql", "original_file_path": "macros/cross_db_macros/safe_offset.sql", "unique_id": "macro.fhir_dbt_analytics.default__safe_offset", "macro_sql": "{% macro default__safe_offset(array, index) -%}\n  {{ array }}[SAFE_OFFSET({{ index }})]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.262538, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__safe_offset": {"name": "spark__safe_offset", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/safe_offset.sql", "original_file_path": "macros/cross_db_macros/safe_offset.sql", "unique_id": "macro.fhir_dbt_analytics.spark__safe_offset", "macro_sql": "{% macro spark__safe_offset(array, index) -%}\n  element_at({{ array }}, {{ index + 1 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.262701, "supported_languages": null}, "macro.fhir_dbt_analytics.timestamp_trunc": {"name": "timestamp_trunc", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/timestamp_trunc.sql", "original_file_path": "macros/cross_db_macros/timestamp_trunc.sql", "unique_id": "macro.fhir_dbt_analytics.timestamp_trunc", "macro_sql": "{% macro timestamp_trunc(datepart, date, timezone=None) -%}\n  {{ return(adapter.dispatch('timestamp_trunc', 'fhir_dbt_analytics') (datepart, date, timezone)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.bigquery__timestamp_trunc"]}, "description": "Re-implement dbt.date_trunc for BigQuery, in order to allow entering timezone.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "datepart", "type": "string", "description": "E.g. \"hour\"."}, {"name": "date", "type": "string", "description": "The date expression."}, {"name": "timezone", "type": "string", "description": "The timezone."}], "created_at": 1691506480.1493702, "supported_languages": null}, "macro.fhir_dbt_analytics.bigquery__timestamp_trunc": {"name": "bigquery__timestamp_trunc", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/timestamp_trunc.sql", "original_file_path": "macros/cross_db_macros/timestamp_trunc.sql", "unique_id": "macro.fhir_dbt_analytics.bigquery__timestamp_trunc", "macro_sql": "{% macro bigquery__timestamp_trunc(datepart, date, timezone) -%}\n  TIMESTAMP_TRUNC({{ date }}, {{ datepart }}, {{ timezone }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.263295, "supported_languages": null}, "macro.fhir_dbt_analytics.default__timestamp_trunc": {"name": "default__timestamp_trunc", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/timestamp_trunc.sql", "original_file_path": "macros/cross_db_macros/timestamp_trunc.sql", "unique_id": "macro.fhir_dbt_analytics.default__timestamp_trunc", "macro_sql": "{% macro default__timestamp_trunc(datepart, date, timezone) -%}\n  {{ dbt.date_trunc(datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2634728, "supported_languages": null}, "macro.fhir_dbt_analytics.date_add_days": {"name": "date_add_days", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/date_add_days.sql", "original_file_path": "macros/cross_db_macros/date_add_days.sql", "unique_id": "macro.fhir_dbt_analytics.date_add_days", "macro_sql": "{% macro date_add_days(expression, days) -%}\n  {{ return(adapter.dispatch('date_add_days', 'fhir_dbt_analytics') (expression, days)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__date_add_days"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.263836, "supported_languages": null}, "macro.fhir_dbt_analytics.default__date_add_days": {"name": "default__date_add_days", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/date_add_days.sql", "original_file_path": "macros/cross_db_macros/date_add_days.sql", "unique_id": "macro.fhir_dbt_analytics.default__date_add_days", "macro_sql": "{% macro default__date_add_days(expression, days) -%}\n  DATE_ADD({{ expression }}, INTERVAL {{ days }} DAY)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.263996, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__date_add_days": {"name": "spark__date_add_days", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/date_add_days.sql", "original_file_path": "macros/cross_db_macros/date_add_days.sql", "unique_id": "macro.fhir_dbt_analytics.spark__date_add_days", "macro_sql": "{% macro spark__date_add_days(expression, days) -%}\n  DATE_ADD({{ expression }}, {{ days }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2641401, "supported_languages": null}, "macro.fhir_dbt_analytics.is_spark": {"name": "is_spark", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/is_spark.sql", "original_file_path": "macros/cross_db_macros/is_spark.sql", "unique_id": "macro.fhir_dbt_analytics.is_spark", "macro_sql": "{% macro is_spark() -%}\n  {{ return(adapter.dispatch('is_spark', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__is_spark"]}, "description": "Returns `true` if the target database is Apache Spark SQL. No arguments.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.146935, "supported_languages": null}, "macro.fhir_dbt_analytics.default__is_spark": {"name": "default__is_spark", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/is_spark.sql", "original_file_path": "macros/cross_db_macros/is_spark.sql", "unique_id": "macro.fhir_dbt_analytics.default__is_spark", "macro_sql": "{% macro default__is_spark() -%}\n  {{ return (False) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.264551, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__is_spark": {"name": "spark__is_spark", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/is_spark.sql", "original_file_path": "macros/cross_db_macros/is_spark.sql", "unique_id": "macro.fhir_dbt_analytics.spark__is_spark", "macro_sql": "{% macro spark__is_spark() -%}\n  {{ return (True) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.264669, "supported_languages": null}, "macro.fhir_dbt_analytics.safe_cast_as_timestamp": {"name": "safe_cast_as_timestamp", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cross_db_macros/safe_cast_as_timestamp.sql", "original_file_path": "macros/cross_db_macros/safe_cast_as_timestamp.sql", "unique_id": "macro.fhir_dbt_analytics.safe_cast_as_timestamp", "macro_sql": "{%- macro safe_cast_as_timestamp(x) -%}\n    {{ dbt.safe_cast(x, api.Column.translate_type(\"timestamp\")) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.safe_cast"]}, "description": "Convenience function to safe_cast as timestamp.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "x", "type": "string", "description": "Expression to be cast as timestamp."}], "created_at": 1691506480.147491, "supported_languages": null}, "macro.fhir_dbt_analytics.union_metric_tables": {"name": "union_metric_tables", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/union_metric_tables.sql", "original_file_path": "macros/metric_processing_macros/union_metric_tables.sql", "unique_id": "macro.fhir_dbt_analytics.union_metric_tables", "macro_sql": "{% macro union_metric_tables() -%}\n  {%- if execute -%}\n    {%- for metric_table in get_metric_tables().values() %}\n      SELECT * FROM {{ metric_table }}\n      {% if not loop.last -%}UNION ALL{% endif %}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_metric_tables"]}, "description": "Prints SQL that unions all metric output tables that have been materialized.\n\nIt is used for unioning all metric outputs and writing to the `metric` table during metric\npost-processing.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.141685, "supported_languages": null}, "macro.fhir_dbt_analytics.create_metric_view": {"name": "create_metric_view", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/create_metric_view.sql", "original_file_path": "macros/metric_processing_macros/create_metric_view.sql", "unique_id": "macro.fhir_dbt_analytics.create_metric_view", "macro_sql": "{% macro create_metric_view(\n  segment_by_date=None,\n  segment_by_dimensions=None\n) -%}\n\n{%- if segment_by_dimensions == None -%}\n  {%- set segment_by_dimensions = [] -%}\n{%- endif -%}\n\n{%- set group_by_count = 11 -%}\n\nSELECT\n\n{#- base segments, present in all views #}\n  D.metric_name,\n  D.description,\n  D.short_description,\n  D.primary_resource,\n  {{ array_join(\"D.primary_fields\", \",\") }} AS primary_fields,\n  {{ array_join(\"D.secondary_resources\", \",\") }} AS secondary_resources,\n  D.category,\n  D.calculation,\n  M.source_system,\n  M.site,\n  M.fhir_mapping,\n\n\n{#- date segments -#}\n{%- if segment_by_date %}\n  {%- set group_by_count = group_by_count + 2 %}\n  D.metric_date_field,\n  D.metric_date_description,\n{%- endif -%}\n\n{%- if segment_by_date == 'YEAR' %}\n  {%- set group_by_count = group_by_count + 1 %}\n  EXTRACT(YEAR FROM M.metric_date) AS metric_year,\n{%- endif -%}\n\n{%- if segment_by_date == 'DAY' %}\n  {%- set group_by_count = group_by_count + 2 %}\n  EXTRACT(YEAR FROM M.metric_date) AS metric_year,\n  M.metric_date,\n{%- endif -%}\n\n\n{#- dimension segments -#}\n{%- if 'dimension_a' in segment_by_dimensions %}\n  {%- set group_by_count = group_by_count + 3 %}\n  {{ snake_case_to_proper_case('D.dimension_a') }} AS dimension_a_name,\n  D.dimension_a_description,\n  M.dimension_a,\n{%- endif -%}\n\n{%- if 'dimension_b' in segment_by_dimensions %}\n  {%- set group_by_count = group_by_count + 3 %}\n  {{ snake_case_to_proper_case('D.dimension_b') }} AS dimension_b_name,\n  D.dimension_b_description,\n  M.dimension_b,\n{%- endif -%}\n\n{%- if 'dimension_c' in segment_by_dimensions %}\n  {%- set group_by_count = group_by_count + 3 %}\n  {{ snake_case_to_proper_case('D.dimension_c') }} AS dimension_c_name,\n  D.dimension_c_description,\n  M.dimension_c,\n{%- endif -%}\n\n\n{#- measure calculation #}\n  SUM(M.numerator) AS numerator,\n  SUM(M.denominator) AS denominator,\n  {{ calculate_measure() }} AS measure\n\nFROM {{ ref('metric_definition') }} AS D\nJOIN {{ ref('metric') }} AS M USING(metric_name)\n\n{{ dbt_utils.group_by(group_by_count)|upper }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.array_join", "macro.fhir_dbt_analytics.snake_case_to_proper_case", "macro.fhir_dbt_analytics.calculate_measure", "macro.dbt_utils.group_by"]}, "description": "Prints SQL which creates a table joining the metric and metric definition tables.\n\nUsed for views, configurable to include or exclude dimensions & date aggregation.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "segment_by_date", "type": "string", "description": "Specify the time-period granularity to segement the metrics by.\n\nSupported values: 'DAY', 'YEAR'.\n\nIf no value is provided then the view will not segment by any time-period.\n"}, {"name": "segment_by_dimensions", "type": "list", "description": "Specify the metric-specific dimensions to segment the metrics by.\n\nSupported values: 'dimension_a', 'dimension_b', 'dimension_c'.\n\nIf no value is provided then the view will not segment by any metric-specific dimensions.\n"}], "created_at": 1691506480.1431859, "supported_languages": null}, "macro.fhir_dbt_analytics.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/get_tables.sql", "original_file_path": "macros/metric_processing_macros/get_tables.sql", "unique_id": "macro.fhir_dbt_analytics.get_tables", "macro_sql": "{% macro get_tables(table_name_wildcard=\"%\") %}\n  SELECT\n    T.table_name,\n    CONCAT('`', T.table_catalog, '`.`', T.table_schema, '`.`', T.table_name, '`') AS fully_qualified_bq_table\n  FROM {{target.project}}.{{target.dataset}}.INFORMATION_SCHEMA.TABLES AS T\n  WHERE T.table_name LIKE '{{ table_name_wildcard }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Prints SQL for selecting the table_name and fully qualified table name from\nBigQuery INFORMATION_SCHEMA.TABLES. By default, all tables from the target\nproject and dataset are returned. These can be filtered using the\ntable_name_wildcard argument.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "table_name_wildcard", "type": "string", "description": "Filter the tables returned using SQL wilcards e.g. 'A%' returns all tables\nwhere table_name LIKE 'A%'.\nDefault value '%' returns all tables.\n"}], "created_at": 1691506480.141453, "supported_languages": null}, "macro.fhir_dbt_analytics.maybe_drop_metric_tables": {"name": "maybe_drop_metric_tables", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/maybe_drop_metric_tables.sql", "original_file_path": "macros/metric_processing_macros/maybe_drop_metric_tables.sql", "unique_id": "macro.fhir_dbt_analytics.maybe_drop_metric_tables", "macro_sql": "{% macro maybe_drop_metric_tables() %}\n    {%- if not var('drop_metric_tables') or not execute -%}\n       {% do return('') %}\n    {%- endif -%}\n\n    {%- for metric_table in get_metric_tables().values() %}\n       {{ run_query(\"DROP TABLE \"~metric_table) }}\n    {%- endfor -%}\n\n    {{ return(\"\") }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_metric_tables", "macro.dbt.run_query"]}, "description": "Optionally prints SQL which drops individual metric output tables.\n\nIt is used to drop these tables after the outputs have been written to the `metric` table\nduring metric post-processing.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.141917, "supported_languages": null}, "macro.fhir_dbt_analytics.calculate_measure": {"name": "calculate_measure", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/calculate_measure.sql", "original_file_path": "macros/metric_processing_macros/calculate_measure.sql", "unique_id": "macro.fhir_dbt_analytics.calculate_measure", "macro_sql": "{% macro calculate_measure(metric_definition_alias=\"D\", metric_alias=\"M\") -%}\n   CASE\n    WHEN {{metric_definition_alias}}.calculation = 'COUNT'\n    THEN SUM({{metric_alias}}.measure)\n    WHEN {{metric_definition_alias}}.calculation IN ('PROPORTION', 'RATIO')\n    THEN SUM({{metric_alias}}.numerator)/NULLIF(SUM({{metric_alias}}.denominator),0)\n    WHEN {{metric_definition_alias}}.calculation = 'DISTRIBUTION'\n    THEN NULL\n    ELSE {{ error(concat([\"'Unknown calculation:'\", metric_definition_alias~\".calculation\"])) }}\n   END\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.error", "macro.dbt.concat"]}, "description": "Prints SQL which formats the measure metric correctly.\n\nIt is used to aggregate metric measures depending on calculation type.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "metric_definition_alias", "type": "string", "description": "Alias of the table that contains metric definitions, defaults to \"D\".\n"}, {"name": "metric_alias", "type": "string", "description": "Alias of the table that contains metric values, defaults to \"M\".\n"}], "created_at": 1691506480.142548, "supported_languages": null}, "macro.fhir_dbt_analytics.metric_output": {"name": "metric_output", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/metric_output.sql", "original_file_path": "macros/metric_processing_macros/metric_output.sql", "unique_id": "macro.fhir_dbt_analytics.metric_output", "macro_sql": "{% macro metric_output(numerator=None, denominator=None, measure=None) %}\n\n  {%- set dimension_a = model_metadata('dimension_a', value_if_missing='NULL') -%}\n  {%- set dimension_b = model_metadata('dimension_b', value_if_missing='NULL') -%}\n  {%- set dimension_c = model_metadata('dimension_c', value_if_missing='NULL') -%}\n\n  {%- if model_metadata(meta_key='calculation') == 'COUNT' -%}\n    {%- set numerator = 'CAST(NULL AS ' ~ type_long() ~ ')' -%}\n    {%- set denominator = 'CAST(NULL AS ' ~ type_long() ~ ')' -%}\n    {%- if measure == None -%}\n      {%- set measure = 'CAST(COUNT(DISTINCT id) AS ' ~ type_double() ~ ')' -%}\n    {%- endif -%}\n  {%- endif -%}\n  {%- if model_metadata(meta_key='calculation') in ['PROPORTION', 'RATIO'] -%}\n    {%- if measure == None -%}\n      {%- set measure = 'CAST(' ~ safe_divide(numerator, denominator) ~ ' AS ' ~ type_double() ~ ')' -%}\n    {%- endif -%}\n  {%- endif -%}\nSELECT\n  {{ current_datetime() }} as execution_datetime,\n  '{{this.name}}' AS metric_name,\n  {{- metric_common_dimensions() }}\n  CAST({{ dimension_a }} AS STRING) AS dimension_a,\n  CAST({{ dimension_b }} AS STRING) AS dimension_b,\n  CAST({{ dimension_c }} AS STRING) AS dimension_c,\n  {{ numerator }} AS numerator,\n  {{ denominator }} AS denominator,\n  {{ measure }} AS measure\nFROM A\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.type_double", "macro.fhir_dbt_analytics.safe_divide", "macro.fhir_dbt_analytics.current_datetime", "macro.fhir_dbt_analytics.metric_common_dimensions"]}, "description": "Prints a SQL query that calculates a metric over a structured input table (\"A\") to produce an\noutput consistent with the project's data model.\n\nThe macro extracts values from the metric metadata to populate the dimension fields and\ncalculate the measure field according to the metric calculation type.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "numerator", "type": "string", "description": "SQL to calculate the numerator value for proportion or ratio metrics. Not required for\ncount metrics.\n"}, {"name": "denominator", "type": "string", "description": "SQL to calculate the denominator value for proportion or ratio calculations. Not required\nfor count metrics.\n"}], "created_at": 1691506480.140779, "supported_languages": null}, "macro.fhir_dbt_analytics.calculate_metric": {"name": "calculate_metric", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/calculate_metric.sql", "original_file_path": "macros/metric_processing_macros/calculate_metric.sql", "unique_id": "macro.fhir_dbt_analytics.calculate_metric", "macro_sql": "{%- macro calculate_metric(inner_sql, numerator=None, denominator=None, measure=None) -%}\n\n{% if _are_inputs_available() %}\nWITH\n  A AS (\n    {{ inner_sql }}\n  )\n{{ metric_output(numerator, denominator, measure) }}\n{%- else %}\n{{- empty_metric_output() -}}\n{%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.fhir_dbt_analytics._are_inputs_available", "macro.fhir_dbt_analytics.metric_output", "macro.fhir_dbt_analytics.empty_metric_output"]}, "description": "Prints a SQL query that caculates a metric given the inner query which calls into\n`metric_common_dimensions` and adds any specific columns.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "numerator", "type": "string", "description": "SQL to calculate the numerator value for proportion or ratio metrics. Not required for\ncount metrics.\n"}, {"name": "denominator", "type": "string", "description": "SQL to calculate the denominator value for proportion or ratio calculations. Not required\nfor count metrics.\n"}], "created_at": 1691506480.1404731, "supported_languages": null}, "macro.fhir_dbt_analytics._are_inputs_available": {"name": "_are_inputs_available", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/calculate_metric.sql", "original_file_path": "macros/metric_processing_macros/calculate_metric.sql", "unique_id": "macro.fhir_dbt_analytics._are_inputs_available", "macro_sql": "{% macro _are_inputs_available() %}\n  {% if not fhir_resource_exists(model_metadata('primary_resource')) %}\n    {{ _print_why(\"primary resource \" ~ model_metadata('primary_resource')) }}\n    {% do return(False) %}\n  {% endif %}\n  {% for secondary_resource in model_metadata('secondary_resources', value_if_missing=[])\n      if not fhir_resource_exists(secondary_resource) %}\n    {{ _print_why(\"secondary resource \" ~ secondary_resource) }}\n    {% do return(False) %}\n  {% endfor %}\n  {% for primary_field in model_metadata('primary_fields', value_if_missing=[])\n      if not column_exists(primary_field) %}\n    {{ _print_why(\"primary field \" ~ primary_field) }}\n    {% do return(False) %}\n  {% endfor %}\n\n  {% do return(True) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.fhir_resource_exists", "macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics._print_why", "macro.fhir_dbt_analytics.column_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2725298, "supported_languages": null}, "macro.fhir_dbt_analytics._print_why": {"name": "_print_why", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/calculate_metric.sql", "original_file_path": "macros/metric_processing_macros/calculate_metric.sql", "unique_id": "macro.fhir_dbt_analytics._print_why", "macro_sql": "{% macro _print_why(what_is_missing) %}\n  {% if var('print_why_metric_empty') and execute %}\n    {{ print(this.name ~ \" empty because \" ~ what_is_missing ~ \" is not available\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.272825, "supported_languages": null}, "macro.fhir_dbt_analytics.get_metric_tables": {"name": "get_metric_tables", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/get_metric_tables.sql", "original_file_path": "macros/metric_processing_macros/get_metric_tables.sql", "unique_id": "macro.fhir_dbt_analytics.get_metric_tables", "macro_sql": "{% macro get_metric_tables() %}\n  {{ return(adapter.dispatch('get_metric_tables', 'fhir_dbt_analytics') ()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.bigquery__get_metric_tables"]}, "description": "Returns dictionary of metric name -> fully specified metric table for metrics that have been\nmaterialized.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.141006, "supported_languages": null}, "macro.fhir_dbt_analytics.bigquery__get_metric_tables": {"name": "bigquery__get_metric_tables", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/get_metric_tables.sql", "original_file_path": "macros/metric_processing_macros/get_metric_tables.sql", "unique_id": "macro.fhir_dbt_analytics.bigquery__get_metric_tables", "macro_sql": "{% macro bigquery__get_metric_tables() %}\n  {% set metric_tables %}\n  SELECT T.table_name\n  FROM {{target.project}}.{{target.dataset}}.INFORMATION_SCHEMA.TABLES AS T\n  JOIN {{ ref('metric_all_definitions') }} AS D ON T.table_name = D.metric_name\n  {% endset %}\n\n  {% set metric_names = run_query(metric_tables).columns[0].values() %}\n  {% set metric_dict = {} %}\n  {% for metric in metric_names %}\n    {{ metric_dict.update({ metric : table_ref(target.project, target.schema, metric) } )}}\n  {% endfor %}\n\n  {{ return(metric_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fhir_dbt_analytics.table_ref"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.27441, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__get_metric_tables": {"name": "spark__get_metric_tables", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/get_metric_tables.sql", "original_file_path": "macros/metric_processing_macros/get_metric_tables.sql", "unique_id": "macro.fhir_dbt_analytics.spark__get_metric_tables", "macro_sql": "{% macro spark__get_metric_tables() %}\n  {% if not execute %}\n    {{ return (None) }}\n  {% endif %}\n  {% set show_tables %}\n    SHOW TABLES IN {{target.schema}}\n  {% endset %}\n  {% set metrics = run_query(show_tables).columns[1].values() %}\n  {% set metric_dict = {} %}\n  {% for node in graph.nodes.values()\n     if node.resource_type == 'model'\n     and node.path.startswith('metrics/')\n     and node.name in metrics %}\n     {{ metric_dict.update({ node.name : table_ref(\"\", target.schema, node.name) }) }}\n  {% endfor %}\n  {{ return (metric_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fhir_dbt_analytics.table_ref"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.275296, "supported_languages": null}, "macro.fhir_dbt_analytics.metric_common_dimensions": {"name": "metric_common_dimensions", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/metric_processing_macros/metric_common_dimensions.sql", "original_file_path": "macros/metric_processing_macros/metric_common_dimensions.sql", "unique_id": "macro.fhir_dbt_analytics.metric_common_dimensions", "macro_sql": "{%- macro metric_common_dimensions(table_alias=None, exclude_col=None) -%}\n\n{%- set exclude_cols = [exclude_col] -%}\n{%- set common_dimensions = [\n  'fhir_mapping',\n  'source_system',\n  'data_transfer_type',\n  'metric_date',\n  'site'\n] -%}\n{%- set columns = common_dimensions | reject('in', exclude_cols) -%}\n\n{%- if table_alias != None -%}\n  {%- set prefix = table_alias ~ '.' -%}\n{%- else -%}\n  {%- set prefix = '' -%}\n{%- endif -%}\n\n{%- for col in columns %}\n  {{ prefix ~ col }},\n{%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Prints the field names of the common dimensions that all metrics are segmented by.\n\nIt is used when scripting metrics to save writing out these fields in each query.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "table_alias", "type": "string", "description": "Alias assigned to the table in which the dimension columns are located. Only required if\ndisambiguation of columns is needed in the query join.\n"}, {"name": "exclude_cols", "type": "string", "description": "Columns to exclude from the returned SQL. Required if this column is to be calculated\nwithin the query itself.\n"}], "created_at": 1691506480.1401541, "supported_languages": null}, "macro.fhir_dbt_analytics.has_procedure": {"name": "has_procedure", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cohort_macros/has_procedure.sql", "original_file_path": "macros/cohort_macros/has_procedure.sql", "unique_id": "macro.fhir_dbt_analytics.has_procedure", "macro_sql": "{% macro has_procedure(procedure, code_system=None, lookback=None,  patient_join_key= None) -%}\n EXISTS (\n  SELECT cc.code\n  FROM {{ ref('Procedure_view') }} AS Pr, UNNEST(code.coding) AS cc\n  JOIN {{ ref('clinical_code_groups') }} AS L\n    ON L.group = '{{procedure}}'\n    {%- if code_system != None %}\n    AND L.system {{ sql_comparison_expression(code_system) }}\n    {%- endif %}\n    AND cc.system = L.system\n    AND cc.code = L.code\n    {%- if lookback != None %}\n    AND DATE(COALESCE(Pr.performed.dateTime, Pr.performed.period.start)) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n    {%- endif %}\n  {%- if patient_join_key != None %}\n  WHERE \n    patient_join_key = E.subject.patientId\n  {%- endif %}\n)\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.sql_comparison_expression", "macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Evaluates whether a patient had a procedure based on codes defined in\n`clinical_code_groups.csv`.\n\nBy default the evaluation will be based on today's date and therefore include procedure codes\nrecorded up to today. If a date is specified by the `cohort_snapshot_date` project variable,\nthen the macro will ignore codes recorded after this snapshot date to determine whether the\npatient had the procedure prior to that time.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "procedure", "type": "string", "description": "Name of the procedure as defined in the `group` field within `clinical_code_groups.csv`.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for a procedure to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}, {"name": "code_system", "type": "string", "description": "Restrict the search for a procedure to only codes from this `code_system` in\n`clinical_code_groups.csv`.\n"}], "created_at": 1691506480.122977, "supported_languages": null}, "macro.fhir_dbt_analytics.has_encounter": {"name": "has_encounter", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cohort_macros/has_encounter.sql", "original_file_path": "macros/cohort_macros/has_encounter.sql", "unique_id": "macro.fhir_dbt_analytics.has_encounter", "macro_sql": "{% macro has_encounter(class=None, status=None, lookback=None, patient_join_key=None, return_all= FALSE) -%}\n{%- if return_all == TRUE %}\n(SELECT\n  (SELECT AS STRUCT\n    E.id,\n    E.subject.patientid,\n    ({{ code_from_codeableconcept('e.hospitalization.dischargeDisposition', 'http://terminology.hl7.org/CodeSystem/discharge-disposition') }}) AS discharge_disposition,\n    {{ metric_date(['period.start']) }} AS start_date,\n    {{ metric_date(['period.end']) }} AS end_date,\n    e.status,\n    e.class.code AS class,\n    {%- if column_exists('serviceType') %}\n    e.serviceType.text AS service,\n    {%- else %}\n    CAST(NULL AS STRING) AS service,\n    {%- endif %}\n    {%- if column_exists('classHistory') %}\n    IF('EMER' IN (SELECT class.code FROM UNNEST(classHistory)) OR class.code = 'EMER', TRUE, FALSE)\n    AS  emergency_adm_flag,\n    {%- else %}\n    IF(class.code = 'EMER', TRUE, FALSE) AS  emergency_adm_flag,\n    {%- endif %}\n    IF( e.period.end IS NOT NULL\n        AND {{ metric_date(['period.end']) }} < {{ get_snapshot_date() }}\n        AND e.period.end <> '',\n        DATE_DIFF(\n          {{ metric_date(['period.end']) }},\n          {{ metric_date(['period.start']) }},\n          DAY), NULL\n    ) AS LOS\n  ) AS encounter\n    {%- else -%}\n  EXISTS (\n    SELECT\n      E.subject.patientId\n  {%- endif %}\n  FROM {{ ref('Encounter_view') }} AS E\n  \n  WHERE 0=0\n  {%- if patient_join_key != None %}\n  AND patient_join_key = E.subject.patientId\n  {%- endif %}\n  {%- if status != None %}\n  AND E.status {{ sql_comparison_expression(status) }}\n  {%- endif %}\n  AND e.period.start IS NOT NULL\n  AND e.period.start <> ''\n  {%- if class != None %}\n  AND class.code {{ sql_comparison_expression(class) }}\n  {%- endif %}\n  {%- if cohort_snapshot_date != None %}\n  AND DATE(E.period.start) <= {{ get_snapshot_date() }}\n  {%- if lookback != None %}\n  AND DATE(E.period.start) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n  {%- endif %}\n  {%- endif %}\n)\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.code_from_codeableconcept", "macro.fhir_dbt_analytics.metric_date", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.get_snapshot_date", "macro.fhir_dbt_analytics.sql_comparison_expression"]}, "description": "Evaluates whether a patient had an encounter in the past.\n\nBy default the evaluation will be based on today's date, looking back. If a date is specified\nby the `cohort_snapshot_date` project variable, then the macro will only look for encounters\nprior to that date.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "class", "type": "list", "description": "Restrict the search to a list of specified encounter types as per HL7\n[ActEncounterCode](http://terminology.hl7.org/ValueSet/v3-ActEncounterCode) value set,\nnoting case-sensitivity.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for an encounter to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}], "created_at": 1691506480.12155, "supported_languages": null}, "macro.fhir_dbt_analytics.has_condition": {"name": "has_condition", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cohort_macros/has_condition.sql", "original_file_path": "macros/cohort_macros/has_condition.sql", "unique_id": "macro.fhir_dbt_analytics.has_condition", "macro_sql": "{% macro has_condition(condition, code_system=None, lookback=None, patient_join_key= None, return_all= FALSE) -%}\n  {%- if return_all == TRUE %}\n  (SELECT\n  (SELECT AS STRUCT\n      C.subject.patientid AS patient_id, \n      LOWER('{{condition}}') AS condition,\n      cc.code AS code,\n      {{ metric_date(['recordedDate']) }} AS recorded_date,\n      {%- if column_exists('onset.dateTime') %}\n      {{ metric_date(['onset.dateTime']) }} AS onset_date\n      {%- else -%}\n      (NULL) AS onset_date\n      {%- endif %}   \n  ) AS condition\n  {%- else -%}\n  EXISTS (\n    SELECT\n      C.subject.patientId\n  {%- endif %}\n  FROM {{ ref('Condition_view') }} AS C, UNNEST(code.coding) AS cc\n  JOIN {{ ref('clinical_code_groups') }} AS L\n    ON L.group = '{{condition}}'\n    {%- if code_system != None %}\n    AND L.system {{ sql_comparison_expression(code_system) }}\n    {%- endif %}\n    AND cc.system = L.system\n    AND IF(L.match_type = 'start',\n           CONCAT('\\\"',REPLACE(cc.code,'.',''),'\\\"') LIKE CONCAT('\\\"', L.code, '%\\\"'),\n           REPLACE(cc.code,'.','') = L.code)\n  \n  WHERE 0=0\n  {%- if patient_join_key != None %}\n    AND patient_join_key = C.subject.patientId\n    {%- endif %}\n  {%- if lookback != None %}\n    AND DATE(C.recordedDate) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n    {%- endif %}\n    AND C.verificationStatus IS NULL\n        OR\n          {{ code_from_codeableconcept(\n          'verificationStatus',\n          'http://terminology.hl7.org/CodeSystem/condition-ver-status',\n          index=0\n          ) }} NOT IN ('entered-in-error')\n  )\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_date", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.sql_comparison_expression", "macro.fhir_dbt_analytics.get_snapshot_date", "macro.fhir_dbt_analytics.code_from_codeableconcept"]}, "description": "Evaluates whether a patient has a condition based on codes defined in\n`clinical_code_groups.csv`.\n\nBy default the evaluation will be based on today's date and therefore include condition codes\nrecorded up to today. If a date is specified by the `cohort_snapshot_date` project variable,\nthen the macro will ignore codes recorded after this snapshot date to determine whether the\npatient had the condition at that time.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "condition", "type": "string", "description": "Name of the condition as defined in the `group` field within `clinical_code_groups.csv`.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for a condition to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}, {"name": "code_system", "type": "string", "description": "Restrict the search for a condition to only codes from this `code_system` in\n`clinical_code_groups.csv`.\n"}], "created_at": 1691506480.122435, "supported_languages": null}, "macro.fhir_dbt_analytics.age": {"name": "age", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cohort_macros/age.sql", "original_file_path": "macros/cohort_macros/age.sql", "unique_id": "macro.fhir_dbt_analytics.age", "macro_sql": "{% macro age(date_of_birth='birthDate') -%}\n DATE_DIFF({{get_snapshot_date()}}, DATE({{date_of_birth}}), YEAR) - IF(EXTRACT(DAYOFYEAR FROM DATE({{date_of_birth}})) > EXTRACT(DAYOFYEAR FROM DATE({{get_snapshot_date()}})), 1, 0)\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Calculates a patient's age on a given date from their date of birth.\n\nBy default this macro will calculate the patient's age as of today's date. If a date is\nspecified by the `cohort_snapshot_date` project variable, then the macro will calculate the\npatient's age on that date.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "date_of_birth", "type": "string", "description": "Patient's date of birth. Default argument is the `birthDate` field from the Patient FHIR\nresource.\n"}], "created_at": 1691506480.1207192, "supported_languages": null}, "macro.fhir_dbt_analytics.has_medication_request": {"name": "has_medication_request", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cohort_macros/has_medication_request.sql", "original_file_path": "macros/cohort_macros/has_medication_request.sql", "unique_id": "macro.fhir_dbt_analytics.has_medication_request", "macro_sql": "{% macro has_medication_request(medication, code_system=None, lookback=None, patient_join_key= None) -%}\n{%- set snapshot_date = get_snapshot_date() -%}\n EXISTS (\n  SELECT cc.code\n  FROM {{ ref('MedicationRequest_view') }} AS M, UNNEST(medication.codeableConcept.coding) AS cc\n  JOIN {{ ref('clinical_code_groups') }} AS L\n    ON L.group = '{{medication}}'\n    {%- if code_system != None %}\n    AND L.system {{ sql_comparison_expression(code_system) }}\n    {%- endif %}\n    AND cc.system = L.system\n    AND cc.code = L.code\n    {%- if lookback != None %}\n    AND DATE(M.authoredOn) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n    {%- endif %}\n  {%- if patient_join_key != None %}\n  WHERE \n    patient_join_key = E.subject.patientId\n  {%- endif %}\n   \n  \n  P.id = M.subject.patientId\n)\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date", "macro.fhir_dbt_analytics.sql_comparison_expression"]}, "description": "Evaluates whether a patient had a medication request based on codes defined in\n`clinical_code_groups.csv`.\n\nBy default the evaluation will be based on today's date and therefore include medication\nrequests recorded up to today. If a date is specified by the `cohort_snapshot_date` project\nvariable, then the macro will ignore medication requests recorded after this snapshot date to\ndetermine whether the patient had medication requested prior to that time.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "medication", "type": "string", "description": "Name of the medication as defined in the `group` field within `clinical_code_groups.csv`.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for a medication request to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}, {"name": "code_system", "type": "string", "description": "Restrict the search for a medication to only codes from this `code_system` in\n`clinical_code_groups.csv`.\n"}], "created_at": 1691506480.124565, "supported_languages": null}, "macro.fhir_dbt_analytics.alive": {"name": "alive", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cohort_macros/alive.sql", "original_file_path": "macros/cohort_macros/alive.sql", "unique_id": "macro.fhir_dbt_analytics.alive", "macro_sql": "{% macro alive() -%}\n (P.deceased.dateTime IS NULL OR DATE(P.deceased.dateTime) > {{get_snapshot_date()}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Evaluates whether a patient was alive on a given date.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.12021, "supported_languages": null}, "macro.fhir_dbt_analytics.has_observation": {"name": "has_observation", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cohort_macros/has_observation.sql", "original_file_path": "macros/cohort_macros/has_observation.sql", "unique_id": "macro.fhir_dbt_analytics.has_observation", "macro_sql": "{% macro has_observation(observation, code_system=None, value_greater_than=None, value_less_than=None, lookback=None, patient_join_key= None) -%}\nEXISTS (\n  SELECT cc.code\n  FROM {{ ref('Observation_view') }} AS O, UNNEST(code.coding) AS cc\n  JOIN {{ ref('clinical_code_groups') }} AS L\n    ON L.group = '{{observation}}'\n    {%- if code_system != None %}\n    AND L.system {{ sql_comparison_expression(code_system) }}\n    {%- endif %}\n    AND cc.system = L.system\n    AND cc.code = L.code\n    {%- if lookback != None %}\n    AND DATE(O.effective.dateTime) >= {{ get_snapshot_date() }} - INTERVAL {{ lookback }}\n    {%- endif %}\n    {%- if value_greater_than != None %}\n    AND O.value.quantity.value > {{ value_greater_than }}\n    {%- endif %}\n    {%- if value_less_than != None %}\n    AND O.value.quantity.value < {{ value_less_than }}\n    {%- endif %}\n  {%- if patient_join_key != None %}\n  WHERE \n    patient_join_key = E.subject.patientId\n  {%- endif %}\n)\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.sql_comparison_expression", "macro.fhir_dbt_analytics.get_snapshot_date"]}, "description": "Evaluates whether a patient had an observation based on codes defined in\n`clinical_code_groups.csv`.\n\nThis search can be further refined by evaluating whether the value for that observation was\nabove or below a specified value.\n\nBy default the evaluation will be based on today's date and therefore include observation\ncodes recorded up to today. If a date is specified by the `cohort_snapshot_date` project\nvariable, then the macro will ignore codes recorded after this snapshot date to determine\nwhether the patient had the observation prior to that time.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "observation", "type": "string", "description": "Name of the observation as defined in the `group` field within `clinical_code_groups.csv`\n"}, {"name": "value_less_than", "type": "float", "description": "The observation value (`Observation.value.quantity.value`) must be less than this value.\n"}, {"name": "value_greater_than", "type": "float", "description": "The observation value (`Observation.value.quantity.value`) must be greater than this\nvalue.\n"}, {"name": "lookback", "type": "string", "description": "Restrict the search for an observation to this time interval back from the\n`cohort_snapshot_date`. Value must be in the format \"int64 date_part\", using one of the\nfollowing supported date_part: DAY; WEEK; MONTH; QUARTER; YEAR (e.g. \"3 MONTH)\".\n"}, {"name": "code_system", "type": "string", "description": "Restrict the search for a observation to only codes from this `code_system` in\n`clinical_code_groups.csv`.\n"}], "created_at": 1691506480.1240451, "supported_languages": null}, "macro.fhir_dbt_analytics.get_snapshot_date": {"name": "get_snapshot_date", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/cohort_macros/get_snapshot_date.sql", "original_file_path": "macros/cohort_macros/get_snapshot_date.sql", "unique_id": "macro.fhir_dbt_analytics.get_snapshot_date", "macro_sql": "{% macro get_snapshot_date()-%}\n  {%- if var('cohort_snapshot_date') == 'today' -%}\n    {%- do return('CURRENT_DATE()') -%}\n  {%- else -%}\n    {%- do return(\"'\" ~ var('cohort_snapshot_date') ~ \"'\") -%}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Returns the snapshot date declared by the `cohort_snapshot_date` variable.\n\nIf cohort_snapshot_date = 'today', then CURRENT_DATE is returned.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.119939, "supported_languages": null}, "macro.fhir_dbt_analytics.run_unit_tests": {"name": "run_unit_tests", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/run_unit_tests.sql", "original_file_path": "macros/tests/run_unit_tests.sql", "unique_id": "macro.fhir_dbt_analytics.run_unit_tests", "macro_sql": "{% macro run_unit_tests() %}\n    {% do test_quote_array() %}\n    {% do test_snake_case() %}\n    {% do test_sql_comparison_expression() %}\n    {% do test_flatten_column() %}\n    {% do test_unnest() %}\n    {% do test_unnest_multiple() %}\n    {% do test_select_from_unnest() %}\n    {% do test_code_from_codeableconcept() %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.test_quote_array", "macro.fhir_dbt_analytics.test_snake_case", "macro.fhir_dbt_analytics.test_sql_comparison_expression", "macro.fhir_dbt_analytics.test_flatten_column", "macro.fhir_dbt_analytics.test_unnest", "macro.fhir_dbt_analytics.test_unnest_multiple", "macro.fhir_dbt_analytics.test_select_from_unnest", "macro.fhir_dbt_analytics.test_code_from_codeableconcept"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.284545, "supported_languages": null}, "macro.fhir_dbt_analytics.test_quote_array": {"name": "test_quote_array", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/string_macros/test_quote_array.sql", "original_file_path": "macros/tests/string_macros/test_quote_array.sql", "unique_id": "macro.fhir_dbt_analytics.test_quote_array", "macro_sql": "{% macro test_quote_array() -%}\n  {{ dbt_unittest.assert_equals(quote_array([]), []) }}\n  {{ dbt_unittest.assert_equals(quote_array([\"foo\"]), [\"'foo'\"]) }}\n  {{ dbt_unittest.assert_equals(quote_array([\"foo\", \"bar\"]), [\"'foo'\", \"'bar'\"]) }}\n\n  {{ return(adapter.dispatch('test_quote_array', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_analytics.quote_array", "macro.fhir_dbt_analytics.default__test_quote_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.285287, "supported_languages": null}, "macro.fhir_dbt_analytics.default__test_quote_array": {"name": "default__test_quote_array", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/string_macros/test_quote_array.sql", "original_file_path": "macros/tests/string_macros/test_quote_array.sql", "unique_id": "macro.fhir_dbt_analytics.default__test_quote_array", "macro_sql": "{% macro default__test_quote_array() -%}\n  {{ dbt_unittest.assert_equals(quote_array([\"f'o'o\"]), [\"'f\\\\'o\\\\'o'\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_analytics.quote_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.285491, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__test_quote_array": {"name": "spark__test_quote_array", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/string_macros/test_quote_array.sql", "original_file_path": "macros/tests/string_macros/test_quote_array.sql", "unique_id": "macro.fhir_dbt_analytics.spark__test_quote_array", "macro_sql": "{% macro spark__test_quote_array() -%}\n  {{ dbt_unittest.assert_equals(quote_array([\"f'o'o\"]), [\"'f''o''o'\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_analytics.quote_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.285686, "supported_languages": null}, "macro.fhir_dbt_analytics.test_snake_case": {"name": "test_snake_case", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/string_macros/test_snake_case.sql", "original_file_path": "macros/tests/string_macros/test_snake_case.sql", "unique_id": "macro.fhir_dbt_analytics.test_snake_case", "macro_sql": "{% macro test_snake_case() %}\n\n    {{ dbt_unittest.assert_equals(snake_case(\"abc\"), \"abc\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"Abc\"), \"abc\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"AbC\"), \"ab_c\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"foo_bar\"), \"foo_bar\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"FooBar\"), \"foo_bar\") }}\n    {{ dbt_unittest.assert_equals(snake_case(\"FoObAr\"), \"fo_ob_ar\") }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_analytics.snake_case"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.286467, "supported_languages": null}, "macro.fhir_dbt_analytics.test_flatten_column": {"name": "test_flatten_column", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_flatten_column.sql", "original_file_path": "macros/tests/cross_db_macros/test_flatten_column.sql", "unique_id": "macro.fhir_dbt_analytics.test_flatten_column", "macro_sql": "{% macro test_flatten_column() %}\n\n  {{ dbt_unittest.assert_equals(\n    spark__flatten_column({\"name\": \"col\", \"data_type\": \"boolean\"}),\n    []) }}\n  {{ dbt_unittest.assert_equals(\n    spark__flatten_column({\"name\": \"col\", \"data_type\": \"struct<foo:string>\"}), [\n      {'name': 'col', 'data_type': 'STRUCT'},\n      {'name': 'col.foo', 'data_type': 'string'}\n    ]) }}\n  {{ dbt_unittest.assert_equals(\n    spark__flatten_column({\"name\": \"col\",\n      \"data_type\": \"struct<foo:string,col2:struct<bar:int64,baz:string>>\"}), [\n      {'name': 'col', 'data_type': 'STRUCT'},\n      {'name': 'col.foo', 'data_type': 'string'},\n      {'name': 'col.col2', 'data_type': 'STRUCT'},\n      {'name': 'col.col2.bar', 'data_type': 'int64'},\n      {'name': 'col.col2.baz', 'data_type': 'string'},\n    ]) }}\n  {{ dbt_unittest.assert_equals(\n    spark__flatten_column({\"name\": \"col\",\n      \"data_type\": \"struct<col2:struct<bar:date(8),baz:string>>\"}), [\n        {'name': 'col', 'data_type': 'STRUCT'},\n        {'name': 'col.col2', 'data_type': 'STRUCT'},\n        {'name': 'col.col2.bar', 'data_type': 'date(8)'},\n        {'name': 'col.col2.baz', 'data_type': 'string'},\n    ]) }}\n  {{ dbt_unittest.assert_equals(\n    spark__flatten_column({\"name\": \"col\",\n      \"data_type\": \"struct<col2:struct<ba'r:string,baz:string>,foo:string>\"}), [\n        {'name': 'col', 'data_type': 'STRUCT'},\n        {'name': 'col.col2', 'data_type': 'STRUCT'},\n        {'name': 'col.col2.ba\\'r', 'data_type': 'string'},\n        {'name': 'col.col2.baz', 'data_type': 'string'},\n        {'name': 'col.foo', 'data_type': 'string'},\n    ]) }}\n  {{ dbt_unittest.assert_equals(\n    spark__flatten_column({\"name\": \"col\",\n      \"data_type\": 'struct<foo:string,fruit:array<struct<name:string>>>'}), [\n        {'name': 'col', 'data_type': 'STRUCT'},\n        {'name': 'col.foo', 'data_type': 'string'},\n        {'name': 'col.fruit', 'data_type': 'ARRAY<STRUCT>'},\n        {'name': 'col.fruit.name', 'data_type': 'string'},\n    ]) }}\n  {{ dbt_unittest.assert_equals(\n    spark__flatten_column({\"name\": \"col\",\n      \"data_type\": 'struct<foo:string,fruit:array<array<struct<name:string>>>>'}), [\n        {'name': 'col', 'data_type': 'STRUCT'},\n        {'name': 'col.foo', 'data_type': 'string'},\n        {'name': 'col.fruit', 'data_type': 'ARRAY<STRUCT>'},\n        {'name': 'col.fruit.name', 'data_type': 'string'},\n    ]) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_analytics.spark__flatten_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.290852, "supported_languages": null}, "macro.fhir_dbt_analytics.test_select_from_unnest": {"name": "test_select_from_unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_select_from_unnest.sql", "original_file_path": "macros/tests/cross_db_macros/test_select_from_unnest.sql", "unique_id": "macro.fhir_dbt_analytics.test_select_from_unnest", "macro_sql": "{% macro test_select_from_unnest() -%}\n  {{ return(adapter.dispatch('test_select_from_unnest', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__test_select_from_unnest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.291327, "supported_languages": null}, "macro.fhir_dbt_analytics.default__test_select_from_unnest": {"name": "default__test_select_from_unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_select_from_unnest.sql", "original_file_path": "macros/tests/cross_db_macros/test_select_from_unnest.sql", "unique_id": "macro.fhir_dbt_analytics.default__test_select_from_unnest", "macro_sql": "{% macro default__test_select_from_unnest() -%}\n  {{ assert_string_equals(\n      select_from_unnest(\"c.code\", \"UNNEST(my_array) c\", where=\"c.value > 1\", order_by=\"c.key\"),\n      \"SELECT c.code FROM UNNEST(my_array) c WHERE c.value > 1 ORDER BY c.key LIMIT 1\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.assert_string_equals", "macro.fhir_dbt_analytics.select_from_unnest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2915578, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__test_select_from_unnest": {"name": "spark__test_select_from_unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_select_from_unnest.sql", "original_file_path": "macros/tests/cross_db_macros/test_select_from_unnest.sql", "unique_id": "macro.fhir_dbt_analytics.spark__test_select_from_unnest", "macro_sql": "{% macro spark__test_select_from_unnest() -%}\n  {{ assert_string_equals(\n      spark__select_from_unnest(\n        \"c.code\",\n        \"SELECT EXPLODE(ac) AS c FROM (SELECT my_array AS ac)\",\n        where=\"c.value > 1\",\n        order_by=\"c.key\"),\n  \"SELECT ELEMENT_AT(COLLECT_LIST(c.code), 1) FROM (\n  SELECT * FROM (SELECT EXPLODE(ac) AS c FROM (SELECT my_array AS ac))\n  WHERE c.value > 1\n  ORDER BY c.key)\") }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.assert_string_equals", "macro.fhir_dbt_analytics.spark__select_from_unnest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.29179, "supported_languages": null}, "macro.fhir_dbt_analytics.test_code_from_codeableconcept": {"name": "test_code_from_codeableconcept", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_code_from_codeable_concept.sql", "original_file_path": "macros/tests/cross_db_macros/test_code_from_codeable_concept.sql", "unique_id": "macro.fhir_dbt_analytics.test_code_from_codeableconcept", "macro_sql": "{% macro test_code_from_codeableconcept() -%}\n  {{ return(adapter.dispatch('test_code_from_codeableconcept', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__test_code_from_codeableconcept"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.292454, "supported_languages": null}, "macro.fhir_dbt_analytics.default__test_code_from_codeableconcept": {"name": "default__test_code_from_codeableconcept", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_code_from_codeable_concept.sql", "original_file_path": "macros/tests/cross_db_macros/test_code_from_codeable_concept.sql", "unique_id": "macro.fhir_dbt_analytics.default__test_code_from_codeableconcept", "macro_sql": "{% macro default__test_code_from_codeableconcept() -%}\n  {{ assert_string_equals(\n    _code_from_codeableconcept(\n        field_name=\"value\",\n        code_system=\"code_system_foo\",\n        field_is_array=False,\n        null_values=[''],\n        return_field=\"code\"),\n    \"(SELECT c.code FROM UNNEST(value.coding) c WHERE c.system = 'code_system_foo' ORDER BY c.code LIMIT 1)\") }}\n\n  {{ assert_string_equals(\n    _code_from_codeableconcept(\n        field_name=\"value\",\n        code_system=\"code_system_foo\",\n        field_is_array=True,\n        null_values=[''],\n        return_field=\"code\"),\n    \"(SELECT c.code FROM UNNEST(value) f, UNNEST(f.coding) c WHERE c.system = 'code_system_foo' ORDER BY c.code LIMIT 1)\") }}\n\n  {{ assert_string_equals(\n    _code_from_codeableconcept(\n        field_name=\"value\",\n        code_system=\"code_system_foo\",\n        field_is_array=True,\n        null_values=[''],\n        return_field=\"code\",\n        return_int=True),\n    \"(\n        SELECT SIGN(COUNT(*))\n        FROM UNNEST(value) f, UNNEST(f.coding) c\n        WHERE c.system = 'code_system_foo'\n        AND c.code IS NOT NULL\n        AND c.code NOT IN ('')\n      )\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.assert_string_equals", "macro.fhir_dbt_analytics._code_from_codeableconcept"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.293152, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__test_code_from_codeableconcept": {"name": "spark__test_code_from_codeableconcept", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_code_from_codeable_concept.sql", "original_file_path": "macros/tests/cross_db_macros/test_code_from_codeable_concept.sql", "unique_id": "macro.fhir_dbt_analytics.spark__test_code_from_codeableconcept", "macro_sql": "{% macro spark__test_code_from_codeableconcept() -%}\n  {# Consider adding Spark tests. But maybe lower priority, because the individual pieces are\n     tested already #}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2932448, "supported_languages": null}, "macro.fhir_dbt_analytics.test_unnest_multiple": {"name": "test_unnest_multiple", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_unnest_multiple.sql", "original_file_path": "macros/tests/cross_db_macros/test_unnest_multiple.sql", "unique_id": "macro.fhir_dbt_analytics.test_unnest_multiple", "macro_sql": "{% macro test_unnest_multiple() -%}\n  {{ return(adapter.dispatch('test_unnest_multiple', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__test_unnest_multiple"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2938619, "supported_languages": null}, "macro.fhir_dbt_analytics.default__test_unnest_multiple": {"name": "default__test_unnest_multiple", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_unnest_multiple.sql", "original_file_path": "macros/tests/cross_db_macros/test_unnest_multiple.sql", "unique_id": "macro.fhir_dbt_analytics.default__test_unnest_multiple", "macro_sql": "{% macro default__test_unnest_multiple() -%}\n  {{ assert_string_equals(\n      unnest_multiple(\n        [array_config( field = 'my_array', unnested_alias = 'c' )],\n      ),\n  \"UNNEST(my_array) c\") }}\n\n  {{ assert_string_equals(\n      unnest_multiple(\n        [array_config( field = 'my_array_2', unnested_alias = 'm' ),\n         array_config( field = 'm.foos', unnested_alias = 'd' )],\n      ),\n  \"UNNEST(my_array_2) m, UNNEST(m.foos) d\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.assert_string_equals", "macro.fhir_dbt_analytics.unnest_multiple", "macro.fhir_dbt_analytics.array_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2943318, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__test_unnest_multiple": {"name": "spark__test_unnest_multiple", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_unnest_multiple.sql", "original_file_path": "macros/tests/cross_db_macros/test_unnest_multiple.sql", "unique_id": "macro.fhir_dbt_analytics.spark__test_unnest_multiple", "macro_sql": "{% macro spark__test_unnest_multiple() -%}\n  {{ assert_string_equals(\n      spark__unnest_multiple(\n        arrays = [array_config( field = 'my_array', unnested_alias = 'c' )],\n      ),\n  \"SELECT * FROM (SELECT EXPLODE(ac) AS c FROM (SELECT my_array AS ac))\") }}\n\n  {{ assert_string_equals(\n      spark__unnest_multiple(\n        arrays = [\n          array_config( field = 'my_array_2', unnested_alias = 'm' ),\n          array_config( field = 'm.foos', unnested_alias = 'd' )],\n      ),\n  \"SELECT * FROM (SELECT EXPLODE(ac) AS m FROM (SELECT my_array_2 AS ac))\n    LATERAL VIEW OUTER explode (m.foos) AS d\n  )\") }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.assert_string_equals", "macro.fhir_dbt_analytics.spark__unnest_multiple", "macro.fhir_dbt_analytics.array_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.294833, "supported_languages": null}, "macro.fhir_dbt_analytics.test_unnest": {"name": "test_unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_unnest.sql", "original_file_path": "macros/tests/cross_db_macros/test_unnest.sql", "unique_id": "macro.fhir_dbt_analytics.test_unnest", "macro_sql": "{% macro test_unnest() -%}\n  {{ return(adapter.dispatch('test_unnest', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__test_unnest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.295268, "supported_languages": null}, "macro.fhir_dbt_analytics.default__test_unnest": {"name": "default__test_unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_unnest.sql", "original_file_path": "macros/tests/cross_db_macros/test_unnest.sql", "unique_id": "macro.fhir_dbt_analytics.default__test_unnest", "macro_sql": "{% macro default__test_unnest() -%}\n  {{ assert_string_equals(\n      unnest('my_array', 'c' ),\n      \"UNNEST(my_array) c\") }}\n\n  {{ assert_string_equals(\n      unnest('my_array' ),\n      \"UNNEST(my_array)\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.assert_string_equals", "macro.fhir_dbt_analytics.unnest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.295529, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__test_unnest": {"name": "spark__test_unnest", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/cross_db_macros/test_unnest.sql", "original_file_path": "macros/tests/cross_db_macros/test_unnest.sql", "unique_id": "macro.fhir_dbt_analytics.spark__test_unnest", "macro_sql": "{% macro spark__test_unnest() -%}\n  {{ assert_string_equals(\n        spark__unnest('my_array', 'c' ),\n        \"SELECT EXPLODE(ac) AS c FROM (SELECT my_array AS ac)\") }}\n  {{ assert_string_equals(\n        spark__unnest('my_array'),\n        \"SELECT EXPLODE(ac) FROM (SELECT my_array AS ac)\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.assert_string_equals", "macro.fhir_dbt_analytics.spark__unnest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.2957828, "supported_languages": null}, "macro.fhir_dbt_analytics.test_sql_comparison_expression": {"name": "test_sql_comparison_expression", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/tests/fhir_analysis_macros/test_sql_comparison_expression.sql", "original_file_path": "macros/tests/fhir_analysis_macros/test_sql_comparison_expression.sql", "unique_id": "macro.fhir_dbt_analytics.test_sql_comparison_expression", "macro_sql": "{% macro test_sql_comparison_expression() %}\n\n    {{ dbt_unittest.assert_equals(\n      sql_comparison_expression(\"abc\"),\n      \"= 'abc'\") }}\n\n    {{ dbt_unittest.assert_equals(\n      sql_comparison_expression([\"abc\", \"foo\"]),\n      \"IN ('abc', 'foo')\") }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_analytics.sql_comparison_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.296164, "supported_languages": null}, "macro.fhir_dbt_analytics.cap_encounter_end_date": {"name": "cap_encounter_end_date", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/cap_encounter_end_date.sql", "original_file_path": "macros/fhir_analysis_macros/cap_encounter_end_date.sql", "unique_id": "macro.fhir_dbt_analytics.cap_encounter_end_date", "macro_sql": "{%- macro cap_encounter_end_date(\n  period_start='period_start',\n  period_end='period_end',\n  encounter_class='encounter_class',\n  length_of_stay_cap=None\n) -%}\n{%- if length_of_stay_cap == None -%}\n{%- set length_of_stay_cap = var('length_of_stay_cap') -%}\n{%- endif -%}\nLEAST(\n  IFNULL({{period_end}}, CURRENT_DATE()),\n  {{ date_add_days(period_start, length_of_stay_cap) }},\n  IF({{encounter_class}} = 'AMB', {{period_start}}, CURRENT_DATE())\n)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.date_add_days"]}, "description": "Prints SQL for returning a capped encounter end date.\n\nIt is used to limit the effect of long stay encounters on metrics, which may be due to missing\nor incorrect recording of the encounter end date.\n\nIt takes the provided encounter end date (`period_end`) and converts this date to an earlier\ndate if criteria are met.\n\nFor ambulatory encounters, the encounter end date is set to the encounter start date.\n\nFor non-ambulatory encounters, the encounter end date is set to n days after the encounter\nstart date if this is earlier than the recorded encounter end date. The value for n is\ndetermined by the `cap_length_of_stay` argument.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "period_start", "type": "string", "description": "The column name containing the encounter start date. Default: `period_start`.\n"}, {"name": "period_end", "type": "string", "description": "The column name containing the encounter end date. Default: `period_end`.\n"}, {"name": "encounter_class", "type": "string", "description": "The column name containing the encounter class. Default: `encounter_class`.\n"}, {"name": "length_of_stay_cap", "type": "int", "description": "The number of days to cap non-ambulatory encounter length of stay. Default:\n`length_of_stay_cap` project variable.\n"}], "created_at": 1691506480.133326, "supported_languages": null}, "macro.fhir_dbt_analytics.code_from_codeableconcept": {"name": "code_from_codeableconcept", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/code_from_codeableconcept.sql", "original_file_path": "macros/fhir_analysis_macros/code_from_codeableconcept.sql", "unique_id": "macro.fhir_dbt_analytics.code_from_codeableconcept", "macro_sql": "{% macro code_from_codeableconcept(\n  field_name,\n  code_system,\n  fhir_resource=None,\n  index=None,\n  null_values=var('null_values'),\n  return_field='code',\n  return_int=False\n) %}\n\n{% if execute and fhir_resource == None %}\n  {% set fhir_resource = model_metadata(meta_key='primary_resource') %}\n{% endif %}\n\n{% set column_dict = get_column_datatype_dict(fhir_resource) %}\n\n{% if execute and (\n      field_name~'.coding.code' not in column_dict or\n      field_name~'.coding.system' not in column_dict\n    )\n%}\n  {{ return(0) if return_int else return(\"'missing_or_invalid_codeableconcept_field \"~field_name~\"'\") }}\n{% endif %}\n\n{% set field_is_array =\n      execute\n      and field_name in column_dict\n      and column_dict[field_name].startswith('ARRAY')\n%}\n\n{% if index != None %}\n  {% set field_name = safe_offset(field_name, index) %}\n{% endif %}\n\n{{ return(_code_from_codeableconcept(\n  field_name=field_name,\n  code_system=code_system,\n  null_values=null_values,\n  return_field=return_field,\n  return_int=return_int,\n  field_is_array=field_is_array and index==None)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.get_column_datatype_dict", "macro.fhir_dbt_analytics.safe_offset", "macro.fhir_dbt_analytics._code_from_codeableconcept"]}, "description": "Attempts to extract a code for a specified code system from a FHIR codeableConcept field.\n\nIf coding.code is not informative, then can return coding.display instead by setting the\nreturn_field argument to 'display'.\n\nTo return an integer flag for whether a code exists, set return_int to True.\n\nIf the field specified does not exist in the table, then \"missing_field\" or 0 is returned,\ndepending on the return_int agument.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "field_name", "type": "string", "description": "FHIR field that is of type codeableConcept. If this field in an array, then the macro will\nunnest this field.\n"}, {"name": "code_system", "type": "string", "description": "Coding system to filter the search of the codeableConcept field.\n"}, {"name": "fhir_resource", "type": "string", "description": "The FHIR resource to check whether the specified `field_name` exists. If not specified,\nthe macro will default to using the `primary_resource` for the metric.\n"}, {"name": "index", "type": "int", "description": "For codeableConcept fields that are repeatable, return the field specified by this index\nvalue.\n"}, {"name": "null_values", "type": "list", "description": "List of string values considered as NULL. If the extracted code matches any of these\nvalues, the macro will return a 0. Default: `null_values` project variable.\n"}, {"name": "return_field", "type": "string", "description": "If set to 'display', the macro will return the coding.display field from the\ncodeableConcept. By default, coding.code will be returned.\n"}, {"name": "return_int", "type": "boolean", "description": "If set to True, the macro will return an integer flag for whether a code exists, rather\nthan the code or display value itself.\n"}], "created_at": 1691506480.12727, "supported_languages": null}, "macro.fhir_dbt_analytics._code_from_codeableconcept": {"name": "_code_from_codeableconcept", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/code_from_codeableconcept.sql", "original_file_path": "macros/fhir_analysis_macros/code_from_codeableconcept.sql", "unique_id": "macro.fhir_dbt_analytics._code_from_codeableconcept", "macro_sql": "{% macro _code_from_codeableconcept(\n  field_name,\n  code_system,\n  field_is_array,\n  null_values,\n  return_field,\n  return_int\n) %}\n{%- set alias = \"c\" %}\n{%- if field_is_array %}\n  {%- set arrays=[\n    array_config(field = field_name, unnested_alias = \"f\"),\n    array_config(field = \"f.coding\", unnested_alias = alias)] %}\n{%- else %}\n  {%- set arrays=[array_config(field = field_name~\".coding\", unnested_alias = alias)] %}\n{%- endif %}\n\n{%- if return_int -%}\n      (\n        SELECT SIGN(COUNT(*))\n        FROM {{ unnest_multiple(arrays) }}\n        WHERE {{alias}}.system = '{{code_system}}'\n        AND {{alias}}.code IS NOT NULL\n        {%- if null_values|length > 0 %}\n        AND {{alias}}.code NOT IN ('{{null_values|join(\"', '\")}}')\n        {%- endif %}\n      )\n{%- else -%}\n  ({{ select_from_unnest(\n      select = alias~\".\"~return_field,\n      unnested = unnest_multiple(arrays),\n      where = alias~\".system = '\"~code_system~\"'\",\n      order_by = alias~\".code\") }})\n{%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.array_config", "macro.fhir_dbt_analytics.unnest_multiple", "macro.fhir_dbt_analytics.select_from_unnest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.299857, "supported_languages": null}, "macro.fhir_dbt_analytics.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/date_spine.sql", "original_file_path": "macros/fhir_analysis_macros/date_spine.sql", "unique_id": "macro.fhir_dbt_analytics.date_spine", "macro_sql": "{% macro date_spine() -%}\n  {{ return(adapter.dispatch('date_spine2', 'fhir_dbt_analytics') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.bigquery__date_spine2"]}, "description": "Prints SQL for generating a list of consecutive dates.\n\nIf the `static_dataset` project variable is `TRUE` then it generates all dates between\n`earliest_date` and `latest_date` inclusive.\n\nOtherwise it generates dates up to and including the current date, going back the\nnumber of months defined by the `months_history` project variable.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.13124, "supported_languages": null}, "macro.fhir_dbt_analytics.default__date_spine2": {"name": "default__date_spine2", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/date_spine.sql", "original_file_path": "macros/fhir_analysis_macros/date_spine.sql", "unique_id": "macro.fhir_dbt_analytics.default__date_spine2", "macro_sql": "{% macro default__date_spine2() -%}\n\n{%- if var('static_dataset') -%}\n  {% set start_date=\"cast('\" ~ var('earliest_date') ~ \"' as date)\" %}\n  {% set end_date=\"cast('\" ~ var('latest_date') ~ \"' as date)\" %}\n{%- else -%}\n  {% set start_date=dbt_date.n_months_ago(var('months_history'), tz=data_timezone()) %}\n  {% set end_date=dbt_date.today(tz=data_timezone()) %}\n{%- endif -%}\n\n-- ---------------------- start of date_spine -----------------------\nwith date_spine as (\n  {{ dbt_utils.date_spine(datepart=\"day\", start_date=start_date, end_date=end_date) }}\n)\n{# dbt_utils cast to datetime, but we want date #}\nselect cast(date_day as date) as date_day from date_spine\n-- ---------------------- end of date_spine -------------------------\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago", "macro.fhir_dbt_analytics.data_timezone", "macro.dbt_date.today", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.301101, "supported_languages": null}, "macro.fhir_dbt_analytics.bigquery__date_spine2": {"name": "bigquery__date_spine2", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/date_spine.sql", "original_file_path": "macros/fhir_analysis_macros/date_spine.sql", "unique_id": "macro.fhir_dbt_analytics.bigquery__date_spine2", "macro_sql": "{% macro bigquery__date_spine2() -%}\nSELECT * FROM UNNEST(GENERATE_DATE_ARRAY(\n{%- if var('static_dataset') %}\n  \"{{ var('earliest_date') }}\", \"{{ var('latest_date') }}\"\n{%- else %}\n  DATE_SUB(CURRENT_DATE(), INTERVAL {{ var('months_history') }} MONTH),\n  CURRENT_DATE()\n{%- endif %}\n)) AS date_day\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.301426, "supported_languages": null}, "macro.fhir_dbt_analytics.metric_hour": {"name": "metric_hour", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/metric_hour.sql", "original_file_path": "macros/fhir_analysis_macros/metric_hour.sql", "unique_id": "macro.fhir_dbt_analytics.metric_hour", "macro_sql": "{%- macro metric_hour(metric_date_columns, date_column_data_type) -%}\n{%- if metric_date_columns == None %}\n    CAST(NULL AS TIMESTAMP)\n{%- else -%}\n    {%- if metric_date_columns | length > 1 -%}\n      {%- set date_column = \"COALESCE(\" + metric_date_columns|join(\", \") + \")\" -%}\n    {%- else %}\n      {%- set date_column = metric_date_columns[0] -%}\n    {%- endif -%}\n    {{ local_hour(date_column, date_column_data_type) }}\n{%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.local_hour"]}, "description": "Prints SQL for returining the local hour from an ordered list of FHIR fields.\n\nIt is used for returning the most clinically-relevant local hour for a given FHIR resource.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "metric_date_columns", "type": "list", "description": "Ordered list of columns to use to derive the metric date.\n"}, {"name": "date_column_data_type", "type": "string", "description": "The datatype of `metric_date_columns`.\n"}], "created_at": 1691506480.131011, "supported_languages": null}, "macro.fhir_dbt_analytics.encounter_class_group": {"name": "encounter_class_group", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/encounter_class_group.sql", "original_file_path": "macros/fhir_analysis_macros/encounter_class_group.sql", "unique_id": "macro.fhir_dbt_analytics.encounter_class_group", "macro_sql": "{%- macro encounter_class_group(class_code) -%}\nCASE\n  WHEN UPPER({{class_code}}) = 'AMB' THEN 'Ambulatory'\n  WHEN UPPER({{class_code}}) IN ('IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER') THEN 'Non-Ambulatory'\n  ELSE 'Other' END\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Aggregates encounter class codes into two broader groups (Ambulatory and\nNon-Ambulatory).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "class_code", "type": "string", "description": "Encounter class code from\n[ActEncounterCode](http://terminology.hl7.org/ValueSet/v3-ActEncounterCode)\n"}], "created_at": 1691506480.133766, "supported_languages": null}, "macro.fhir_dbt_analytics.sql_comparison_expression": {"name": "sql_comparison_expression", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/sql_comparison_expression.sql", "original_file_path": "macros/fhir_analysis_macros/sql_comparison_expression.sql", "unique_id": "macro.fhir_dbt_analytics.sql_comparison_expression", "macro_sql": "{% macro sql_comparison_expression(code_string_or_list) -%}\n {%- if code_string_or_list is string -%}\n  = '{{ code_string_or_list }}'\n  {%- elif code_string_or_list is iterable -%}\n  IN ('{{ code_string_or_list|join(\"', '\") }}')\n  {%- else -%}\n  {{ exceptions.raise_compiler_error(\"Invalid argument \" ~ code_string_or_list) }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Converts a string or list of codes into a format compatible with a SQL comparison expression.\n\nIf the input is a string then format as a sql equality expression. Example: column = 'string'\n\nIf the input is a list then format as a sql \"IN\" expression with comma-separated values\nenclosed within parentheses. Example: column IN ('list_item_1', 'list_item_2')\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "code_string_or_list", "type": "string or list", "description": "String or list of strings to evaluate field against.\n"}], "created_at": 1691506480.129199, "supported_languages": null}, "macro.fhir_dbt_analytics.active_encounters": {"name": "active_encounters", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/active_encounters.sql", "original_file_path": "macros/fhir_analysis_macros/active_encounters.sql", "unique_id": "macro.fhir_dbt_analytics.active_encounters", "macro_sql": "{%- macro active_encounters(encounter_classes=['IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER', 'AMB']) %}\n      WITH\n        Enc AS (\n          SELECT\n            id,\n            subject.patientId AS patientId,\n            {{ metric_date(['period.start'])|indent(2) }} AS period_start,\n            {{ metric_date(['period.end'])|indent(2) }} AS period_end,\n            {{- metric_common_dimensions(exclude_col='metric_date')|indent }}\n            CASE WHEN UPPER(class.code) IN ('IMP', 'ACUTE', 'NONAC') THEN 'IMP/ACUTE/NONAC' ELSE class.code END AS encounter_class,\n            {{ encounter_class_group('class.code')|indent(6) }} AS encounter_class_group,\n            {{ get_column_or_default('serviceProvider.organizationId', 'Encounter') }} AS encounter_service_provider\n          FROM {{ ref('Encounter') }}\n          WHERE\n            UPPER(class.code) {{ sql_comparison_expression(encounter_classes) }}\n            AND status IN ('in-progress', 'finished')\n            AND period.start IS NOT NULL\n            AND period.start <> ''\n        ),\n        DS AS (\n          {{ date_spine()|indent }}\n        )\n\n        SELECT\n          Enc.*,\n          DS.date_day AS metric_date\n        FROM Enc JOIN DS\n          ON DS.date_day BETWEEN Enc.period_start\n            AND {{ cap_encounter_end_date()|indent }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.metric_date", "macro.fhir_dbt_analytics.metric_common_dimensions", "macro.fhir_dbt_analytics.encounter_class_group", "macro.fhir_dbt_analytics.get_column_or_default", "macro.fhir_dbt_analytics.sql_comparison_expression", "macro.fhir_dbt_analytics.date_spine", "macro.fhir_dbt_analytics.cap_encounter_end_date"]}, "description": "Prints SQL for extracting active encounters per day over a set period of time.\n\nThe output is one row per date per patient with an active encounter that spans (at least\npartially) that date.\n\nAmbulatory encounters are joined on matching period.start only.\n\nNon-ambulatory encounters are capped at 90 days to reduce the impact of encounters that are\ncomplete but period.end is missing or recorded incorrectly.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "encounter_classes", "type": "list", "description": "List of encounter class code from\n[ActEncounterCode](http://terminology.hl7.org/ValueSet/v3-ActEncounterCode) to restrict\nthe list of active encounters to.\n\nIf not specified, the macro will default to including encounters with the following codes:\n'IMP', 'ACUTE', 'NONAC', 'SS', 'OBSENC', 'EMER', 'AMB'.\n"}], "created_at": 1691506480.132298, "supported_languages": null}, "macro.fhir_dbt_analytics.local_date": {"name": "local_date", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/local_date.sql", "original_file_path": "macros/fhir_analysis_macros/local_date.sql", "unique_id": "macro.fhir_dbt_analytics.local_date", "macro_sql": "{% macro local_date(date_column, date_column_data_type) -%}\n{%- if date_column_data_type == 'TIMESTAMP' -%}\n    {{ date(\n      date_column,\n      data_timezone())|indent(6) }}\n{%- else -%}\n    IF(\n      CHAR_LENGTH({{ date_column }}) = 10,\n      {{ safe_cast_as_date(date_column) }},\n      {{ date(\n        safe_cast_as_timestamp(date_column),\n        data_timezone())|indent(8) }}\n    )\n{%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.date", "macro.fhir_dbt_analytics.data_timezone", "macro.fhir_dbt_analytics.safe_cast_as_date", "macro.fhir_dbt_analytics.safe_cast_as_timestamp"]}, "description": "Prints SQL for returning the local date from a specified date, datetime or timestamp column.\n\nLocal date is the date where the clinical event took place.\n\nThe macro uses the `timezone_default` project variable.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "date_column", "type": "String, date, datetime or timestamp", "description": "String, date, datetime or timestamp column from which to derive the local date.\n"}, {"name": "date_column_data_type", "type": "string", "description": "The datatype of `date_column`.\n"}], "created_at": 1691506480.130392, "supported_languages": null}, "macro.fhir_dbt_analytics.data_timezone": {"name": "data_timezone", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/data_timezone.sql", "original_file_path": "macros/fhir_analysis_macros/data_timezone.sql", "unique_id": "macro.fhir_dbt_analytics.data_timezone", "macro_sql": "{%- macro data_timezone() -%}\n'{{ var('timezone_default') }}'\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Extracts the timezone code from which the FHIR data queried originates.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.129579, "supported_languages": null}, "macro.fhir_dbt_analytics.site": {"name": "site", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/site.sql", "original_file_path": "macros/fhir_analysis_macros/site.sql", "unique_id": "macro.fhir_dbt_analytics.site", "macro_sql": "{% macro site() -%}\n        '{{ var('site_default') }}'\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Extracts the provider code from which the FHIR data queried originates.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.1293042, "supported_languages": null}, "macro.fhir_dbt_analytics.has_reference_value": {"name": "has_reference_value", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/has_reference_value.sql", "original_file_path": "macros/fhir_analysis_macros/has_reference_value.sql", "unique_id": "macro.fhir_dbt_analytics.has_reference_value", "macro_sql": "{% macro has_reference_value(\n  reference_column,\n  reference_resource\n) %}\n\n{%- set reference_paths = get_reference_paths(reference_column, reference_resource) -%}\n{%- set direct_reference = reference_paths['direct_reference'] -%}\n{%- set direct_reference_path = reference_paths['direct_reference_path'] -%}\n{%- set indirect_reference_path = reference_paths['indirect_reference_path'] -%}\n{%- set reference_column_is_array = reference_paths['reference_column_is_array']-%}\n\n{%- if reference_column_is_array -%}\n\n  {%- if column_exists(direct_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM {{ spark_parenthesis(unnest(reference_column, \"RC\")) }} WHERE {{has_value(\"RC.\"~direct_reference)}})\n  {%- elif column_exists(indirect_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM {{ spark_parenthesis(unnest(reference_column, \"RC\")) }} WHERE RC.type = '{{reference_resource}}' AND {{has_value('RC.reference')}})\n  {%- else -%}\n    0\n  {%- endif -%}\n\n{%- else -%}\n\n  {%- if column_exists(direct_reference_path) -%}\n    IF({{has_value(direct_reference_path)}}, 1, 0)\n  {%- elif column_exists(indirect_reference_path) -%}\n    IF({{reference_column}}.type = '{{reference_resource}}' AND {{has_value(indirect_reference_path)}}, 1, 0)\n  {%- else -%}\n    0\n  {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_reference_paths", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics.has_value"]}, "description": "Prints SQL for evaluating whether a reference field has a value recorded, returning TRUE if so\nand FALSE if not.\n\nA field is evaluated as not recorded if it is NULL or contains a value matching any value\nwithin the `null_values` list argument.\n\nMacro will preferentially use direct resource references (e.g. 'subject.patientId') defined by\nthe [SQL-on-FHIR](https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md#references)\nprojections. If this field does not exist in the FHIR resource, then the standard FHIR\nresource references are used (e.g. 'subject.reference' and 'subject.type').\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "reference_column", "type": "string", "description": "FHIR reference field to evaluate. Only include the top-level reference field.\nFor example,'subject' rather than 'subject.patientId'\n"}, {"name": "reference_resource", "type": "string", "description": "FHIR resource for which this reference value refers to (e.g. 'Patient).\n"}], "created_at": 1691506480.128278, "supported_languages": null}, "macro.fhir_dbt_analytics.reference_resolves": {"name": "reference_resolves", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/reference_resolves.sql", "original_file_path": "macros/fhir_analysis_macros/reference_resolves.sql", "unique_id": "macro.fhir_dbt_analytics.reference_resolves", "macro_sql": "{% macro reference_resolves(\n  reference_column,\n  reference_resource\n) -%}\n\n{%- set reference_paths = get_reference_paths(reference_column, reference_resource) -%}\n{%- set direct_reference = reference_paths['direct_reference'] -%}\n{%- set direct_reference_path = reference_paths['direct_reference_path'] -%}\n{%- set indirect_reference_path = reference_paths['indirect_reference_path'] -%}\n{%- set reference_column_is_array = reference_paths['reference_column_is_array']-%}\n\n{%- if reference_column_is_array -%}\n\n  {%- if column_exists(direct_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM {{ spark_parenthesis(unnest(reference_column, \"RC\")) }} JOIN {{ref(reference_resource)}} AS RR ON RC.{{direct_reference}} = RR.id)\n  {%- elif column_exists(indirect_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM {{ spark_parenthesis(unnest(reference_column, \"RC\")) }} JOIN {{ref(reference_resource)}} AS RR ON RC.reference = RR.id AND RC.type = '{{reference_resource}}')\n  {%- else -%}\n    0\n  {%- endif -%}\n\n{%- else -%}\n\n  {{ _reference_resolves(direct_reference_path, indirect_reference_path, reference_resource, reference_column) }}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_reference_paths", "macro.fhir_dbt_analytics.column_exists", "macro.fhir_dbt_analytics.spark_parenthesis", "macro.fhir_dbt_analytics.unnest", "macro.fhir_dbt_analytics._reference_resolves"]}, "description": "Prints SQL for evaluating whether a reference field value exists within the refererred FHIR\nresource, returning an integer flag of 1 if so and 0 if not.\n\nMacro will preferentially use direct resource references (e.g. 'subject.patientId') defined by\nthe [SQL-on-FHIR](https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md#references)\nprojections. If this field does not exist in the FHIR resource, then the standard FHIR\nresource references are used (e.g. 'subject.reference' and 'subject.type').\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "reference_column", "type": "string", "description": "FHIR reference field to evaluate. Only include the top-level reference field.\nFor example,'subject' rather than 'subject.patientId'\n"}, {"name": "reference_resource", "type": "string", "description": "FHIR resource to to check for the presence of the reference field value (e.g. 'Patient).\n"}], "created_at": 1691506480.128593, "supported_languages": null}, "macro.fhir_dbt_analytics._reference_resolves": {"name": "_reference_resolves", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/reference_resolves.sql", "original_file_path": "macros/fhir_analysis_macros/reference_resolves.sql", "unique_id": "macro.fhir_dbt_analytics._reference_resolves", "macro_sql": "{% macro _reference_resolves(direct_reference_path, indirect_reference_path, reference_resource, reference_column) -%}\n  {{ return(adapter.dispatch('_reference_resolves', 'fhir_dbt_analytics')\n       (direct_reference_path, indirect_reference_path, reference_resource, reference_column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default___reference_resolves"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.308962, "supported_languages": null}, "macro.fhir_dbt_analytics.default___reference_resolves": {"name": "default___reference_resolves", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/reference_resolves.sql", "original_file_path": "macros/fhir_analysis_macros/reference_resolves.sql", "unique_id": "macro.fhir_dbt_analytics.default___reference_resolves", "macro_sql": "{% macro default___reference_resolves(direct_reference_path, indirect_reference_path, reference_resource, reference_column) -%}\n  {%- if column_exists(direct_reference_path) -%}\n    IF({{direct_reference_path}} IN (SELECT id FROM {{ ref(reference_resource) }}), 1, 0)\n  {%- elif column_exists(indirect_reference_path) -%}\n    IF({{reference_column}}.type = '{{reference_resource}}' AND {{indirect_reference_path}} IN (SELECT id FROM {{ref(reference_resource)}}), 1, 0)\n  {%- else -%}\n    0\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.column_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.30939, "supported_languages": null}, "macro.fhir_dbt_analytics.spark___reference_resolves": {"name": "spark___reference_resolves", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/reference_resolves.sql", "original_file_path": "macros/fhir_analysis_macros/reference_resolves.sql", "unique_id": "macro.fhir_dbt_analytics.spark___reference_resolves", "macro_sql": "{% macro spark___reference_resolves(direct_reference_path, indirect_reference_path, reference_resource, reference_column) -%}\n  {%- if column_exists(direct_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM {{ ref(reference_resource) }} WHERE id = {{direct_reference_path}})\n  {%- elif column_exists(indirect_reference_path) -%}\n    (SELECT SIGN(COUNT(*)) FROM {{ ref(reference_resource) }} WHERE id = {{indirect_reference_path}} AND {{reference_column}}.type = '{{reference_resource}}')\n  {%- else -%}\n    0\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.column_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3098218, "supported_languages": null}, "macro.fhir_dbt_analytics.has_value": {"name": "has_value", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/has_value.sql", "original_file_path": "macros/fhir_analysis_macros/has_value.sql", "unique_id": "macro.fhir_dbt_analytics.has_value", "macro_sql": "{% macro has_value(field_name, null_values=var('null_values')) -%}\n\n{{field_name}} IS NOT NULL {%- if null_values|length > 0 %} AND {{field_name}} NOT IN ('{{null_values|join(\"', '\")}}') {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Prints SQL for evaluating whether a field has a value recorded, returning TRUE if so and\nFALSE if not.\n\nA field is evaluated as not recorded if it is NULL or contains a value matching any value\nwithin the `null_values` list argument.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "field_name", "type": "string", "description": "FHIR field to evaluate.\n"}, {"name": "null_values", "type": "list", "description": "List of string values considered as NULL. If `field_name` matches any of these values, the\nSQL will return FALSE. Default: `null_values` project variable.\n"}], "created_at": 1691506480.127611, "supported_languages": null}, "macro.fhir_dbt_analytics.get_column_or_default": {"name": "get_column_or_default", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/get_column_or_default.sql", "original_file_path": "macros/fhir_analysis_macros/get_column_or_default.sql", "unique_id": "macro.fhir_dbt_analytics.get_column_or_default", "macro_sql": "{% macro get_column_or_default(column_name, fhir_resource=None, table_alias=None) %}\n\n    {%- if execute and fhir_resource == None -%}\n        {%- set fhir_resource = model_metadata(meta_key='primary_resource') -%}\n    {%- endif -%}\n\n    {%- if column_exists(column_name, fhir_resource) -%}\n        {%- if table_alias != None -%}\n          {{ return(table_alias ~ \".\" ~ column_name) }}\n        {%- else -%}\n          {{ return(column_name) }}\n        {%- endif -%}\n    {%- else -%}\n        {{ return('NULL') }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.column_exists"]}, "description": "Returns a specified column if it exists within a resource, defaulting to NULL if it does not\nexist.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "column_name", "type": "string", "description": "Fully qualified column name to evaluate (e.g. code.coding.display).\n"}, {"name": "fhir_resource", "type": "string", "description": "The FHIR resource to check whether the specified `column_name` exists.\n\nIf not specified, the macro will default to using the `primary_resource` for the metric.\n"}, {"name": "table_alias", "type": "string", "description": "Alias assigned to the table in which `column_name` is located. Only required if\ndisambiguation of columns is needed in the query join.\n"}], "created_at": 1691506480.12523, "supported_languages": null}, "macro.fhir_dbt_analytics.local_hour": {"name": "local_hour", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/local_hour.sql", "original_file_path": "macros/fhir_analysis_macros/local_hour.sql", "unique_id": "macro.fhir_dbt_analytics.local_hour", "macro_sql": "{% macro local_hour(date_column, date_column_data_type) -%}\n{%- if date_column_data_type == 'TIMESTAMP' -%}\n    {{ timestamp_trunc(\n        \"hour\",\n        date_column,\n        data_timezone()|indent(6)) }}\n{%- else -%}\n    IF(\n      CHAR_LENGTH({{ date_column }}) = 10,\n      {{ safe_cast_as_timestamp('NULL') }},\n      {{ timestamp_trunc(\n          \"hour\",\n          safe_cast_as_timestamp(date_column),\n          data_timezone()|indent(8)) }}\n    )\n{%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.timestamp_trunc", "macro.fhir_dbt_analytics.data_timezone", "macro.fhir_dbt_analytics.safe_cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.311661, "supported_languages": null}, "macro.fhir_dbt_analytics.date_to_period": {"name": "date_to_period", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/date_to_period.sql", "original_file_path": "macros/fhir_analysis_macros/date_to_period.sql", "unique_id": "macro.fhir_dbt_analytics.date_to_period", "macro_sql": "{% macro date_to_period(date_column, date_period) -%}\n  {{ return(adapter.dispatch('date_to_period', 'fhir_dbt_analytics') (date_column, date_period)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.default__date_to_period"]}, "description": "Returns a string representation of a date truncated to a specified date period.\n\nFor example, when `date_period` is set to 'QUARTER', a date of '2023-04-15' is truncated to\n'2023 Q2'.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "date_column", "type": "string", "description": "Column containing a date to be truncated.\n"}, {"name": "date_period", "type": "string", "description": "Date granularity to truncate the date in date_column to. Available options: YEAR, QUARTER,\nMONTH.\n"}], "created_at": 1691506480.1318479, "supported_languages": null}, "macro.fhir_dbt_analytics.default__date_to_period": {"name": "default__date_to_period", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/date_to_period.sql", "original_file_path": "macros/fhir_analysis_macros/date_to_period.sql", "unique_id": "macro.fhir_dbt_analytics.default__date_to_period", "macro_sql": "{% macro default__date_to_period(date_column, date_period) -%}\n{%- if date_period == 'YEAR' -%}\n {%- set format_string = '%Y' -%}\n{%- elif date_period == 'QUARTER' -%}\n {%- set format_string  = '%Y Q%Q' -%}\n{%- elif date_period == 'MONTH' -%}\n {%- set format_string = '%Y M%m' -%}\n{%- else -%}\n {%- set format_string = '%F' -%}\n{%- endif -%}\nFORMAT_DATE('{{format_string}}', {{date_column}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.312856, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__date_to_period": {"name": "spark__date_to_period", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/date_to_period.sql", "original_file_path": "macros/fhir_analysis_macros/date_to_period.sql", "unique_id": "macro.fhir_dbt_analytics.spark__date_to_period", "macro_sql": "{% macro spark__date_to_period(date_column, date_period) -%}\n{%- if date_period == 'YEAR' -%}\n {%- set format_string = 'y' -%}\n{%- elif date_period == 'QUARTER' -%}\n {%- set format_string  = \"y qqq\" -%}\n{%- elif date_period == 'MONTH' -%}\n {%- set format_string = \"y 'M'M\" -%}\n{%- else -%}\n {%- set format_string = 'yMMdd' -%}\n{%- endif -%}\nDATE_FORMAT({{date_column}}, '{{format_string}}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3133261, "supported_languages": null}, "macro.fhir_dbt_analytics.data_transfer_type": {"name": "data_transfer_type", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/data_transfer_type.sql", "original_file_path": "macros/fhir_analysis_macros/data_transfer_type.sql", "unique_id": "macro.fhir_dbt_analytics.data_transfer_type", "macro_sql": "{% macro data_transfer_type() -%}\n        '{{ var('data_transfer_type_default') }}'\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Extracts the mechanism of data transfer from which the FHIR data queried originates.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.12935, "supported_languages": null}, "macro.fhir_dbt_analytics.source_system": {"name": "source_system", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/source_system.sql", "original_file_path": "macros/fhir_analysis_macros/source_system.sql", "unique_id": "macro.fhir_dbt_analytics.source_system", "macro_sql": "{% macro source_system() -%}\n        '{{ var('source_system_default') }}'\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Extracts the data source from which the FHIR data queried originates.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.129257, "supported_languages": null}, "macro.fhir_dbt_analytics.metric_date": {"name": "metric_date", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_analysis_macros/metric_date.sql", "original_file_path": "macros/fhir_analysis_macros/metric_date.sql", "unique_id": "macro.fhir_dbt_analytics.metric_date", "macro_sql": "{%- macro metric_date(metric_date_columns, date_column_data_type) -%}\n{%- if metric_date_columns == None %}\n    CAST(NULL AS DATE)\n{%- else -%}\n    {%- if metric_date_columns | length > 1 -%}\n      {%- set date_column = \"COALESCE(\" + metric_date_columns|join(\", \") + \")\" -%}\n    {%- else %}\n      {%- set date_column = metric_date_columns[0] -%}\n    {%- endif -%}\n      {{ local_date(date_column, date_column_data_type) }}\n{%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.local_date"]}, "description": "Prints SQL for returining the local date from an ordered list of FHIR fields.\n\nIt is used for returning the most clinically-relevant local date for a given FHIR resource.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "metric_date_columns", "type": "list", "description": "Ordered list of columns to use to derive the metric date.\n"}, {"name": "date_column_data_type", "type": "string", "description": "The datatype of `metric_date_columns`.\n"}], "created_at": 1691506480.1307032, "supported_languages": null}, "macro.fhir_dbt_analytics.metadata_cols": {"name": "metadata_cols", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_view_macros/metadata_cols.sql", "original_file_path": "macros/fhir_view_macros/metadata_cols.sql", "unique_id": "macro.fhir_dbt_analytics.metadata_cols", "macro_sql": "{% macro metadata_cols() %}\n    {{ source_system() }} AS source_system,\n    {{ site() }} AS site,\n    {{ data_transfer_type() }} AS data_transfer_type\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.source_system", "macro.fhir_dbt_analytics.site", "macro.fhir_dbt_analytics.data_transfer_type"]}, "description": "Prints SQL for metadata columns to be appended to the FHIR resource views.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.13426, "supported_languages": null}, "macro.fhir_dbt_analytics.fhir_resource_view_expression": {"name": "fhir_resource_view_expression", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_view_macros/fhir_resource_view_expression.sql", "original_file_path": "macros/fhir_view_macros/fhir_resource_view_expression.sql", "unique_id": "macro.fhir_dbt_analytics.fhir_resource_view_expression", "macro_sql": "{%- macro fhir_resource_view_expression() -%}\n\n{%- if execute -%}\n    {%- set fhir_resource = model_metadata(meta_key='fhir_resource') -%}\n{%- else %}\n    {%- set fhir_resource = 'N/A' -%}\n{%- endif -%}\n\n{%- if fhir_resource_exists(fhir_resource) -%}\n{{ query_fhir_table(fhir_resource) }}\n{%- else %}\n{{ create_dummy_table() }}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.fhir_resource_exists", "macro.fhir_dbt_analytics.query_fhir_table", "macro.fhir_dbt_analytics.create_dummy_table"]}, "description": "Prints SQL for views over a FHIR resource.\n\nIt is used by models within the `fhir_resources` folder to generate FHIR resource views\n(e.g Patient_view.sql).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.1347048, "supported_languages": null}, "macro.fhir_dbt_analytics.query_fhir_table": {"name": "query_fhir_table", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_view_macros/query_fhir_table.sql", "original_file_path": "macros/fhir_view_macros/query_fhir_table.sql", "unique_id": "macro.fhir_dbt_analytics.query_fhir_table", "macro_sql": "{%- macro query_fhir_table(fhir_resource) -%}\n    {%- set metric_date_columns = get_metric_date_columns() -%}\n    {%- set date_column_data_type = column_data_type(metric_date_columns[0], get_source_table_name(fhir_resource)) %}\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    {{- metric_date(metric_date_columns, date_column_data_type) }} AS metric_date,\n    {{- metric_hour(metric_date_columns, date_column_data_type) }} AS metric_hour,\n    {{- metadata_cols() -}}\nFROM {{ source('fhir', get_source_table_name(fhir_resource)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_metric_date_columns", "macro.fhir_dbt_analytics.column_data_type", "macro.fhir_dbt_analytics.get_source_table_name", "macro.fhir_dbt_analytics.metric_date", "macro.fhir_dbt_analytics.metric_hour", "macro.fhir_dbt_analytics.metadata_cols"]}, "description": "Prints SQL for selecting from a FHIR resource table with appended metadata columns.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "The FHIR resource to be queried.\n"}], "created_at": 1691506480.134037, "supported_languages": null}, "macro.fhir_dbt_analytics.create_dummy_table": {"name": "create_dummy_table", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_view_macros/create_dummy_table.sql", "original_file_path": "macros/fhir_view_macros/create_dummy_table.sql", "unique_id": "macro.fhir_dbt_analytics.create_dummy_table", "macro_sql": "{%- macro create_dummy_table() -%}\n\n{%- if execute -%}\n{%- set patient_reference_column = model_metadata('patient_reference_column') -%}\n{%- endif -%}\n\nSELECT\n  CAST(NULL AS STRING) AS id,\n{%- if patient_reference_column == \"link[].target\" %}\n  {{ dbt.array_construct([\"STRUCT(STRUCT('no_data' AS patientId) AS target)\"]) }} AS link,\n{%- elif patient_reference_column != None %}\n  STRUCT('no_data' AS patientId) AS {{patient_reference_column}},\n{%- endif %}\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour,\n  '{{ var('source_system_default') }}' AS source_system,\n  '{{ var('site_default') }}' AS site,\n  '{{ var('data_transfer_type_default') }}' AS data_transfer_type\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.dbt.array_construct"]}, "description": "Prints SQL to select dummy values when no tables exist for a FHIR resource.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.1344829, "supported_languages": null}, "macro.fhir_dbt_analytics.fhir_resource_table_expression": {"name": "fhir_resource_table_expression", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_view_macros/fhir_resource_table_expression.sql", "original_file_path": "macros/fhir_view_macros/fhir_resource_table_expression.sql", "unique_id": "macro.fhir_dbt_analytics.fhir_resource_table_expression", "macro_sql": "{%- macro fhir_resource_table_expression() -%}\n    {%- if execute -%}\n      {%- set fhir_resource = model_metadata(meta_key='fhir_resource') -%}\n      {%- set fhir_resource_view = fhir_resource~\"_view\" -%}\n      {%- set patient_reference_column = model_metadata(meta_key='patient_reference_column', model_name=fhir_resource_view) -%}\n        SELECT * FROM {{ ref(fhir_resource_view) }}\n    {%- else %}\n        SELECT * FROM undefined\n    {%- endif -%}\n        {%- if var('cohort') != 'all_patients' and patient_reference_column != None %}\n        WHERE EXISTS (\n          SELECT cohort.patient_id\n          FROM {{ ref(var('cohort')) }} AS cohort\n          {%- if fhir_resource == 'Patient' %}\n          WHERE id = cohort.patient_id\n          {%- elif fhir_resource == 'Person' %}\n          JOIN UNNEST(link) AS l ON l.target.patientId = cohort.patient_id\n          {%- else %}\n          WHERE {{patient_reference_column}}.patientId = cohort.patient_id\n          {%- endif %}\n        )\n        {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata"]}, "description": "Prints SQL for a common table expression for a FHIR resource.\n\nIt is used by models within the `fhir_resources` folder to generate FHIR resource common\ntable expressions (CTE) that incorporate patient cohorting.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.134929, "supported_languages": null}, "macro.fhir_dbt_analytics.spark__init_sources": {"name": "spark__init_sources", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/fhir_view_macros/spark__init_sources.sql", "original_file_path": "macros/fhir_view_macros/spark__init_sources.sql", "unique_id": "macro.fhir_dbt_analytics.spark__init_sources", "macro_sql": "{% macro spark__init_sources(fhir_resources, parquet_location) %}\n  {% set sql = \"CREATE DATABASE IF NOT EXISTS \"~var('schema') %}\n  {{ print(sql) }}\n  {{ run_query(sql) }}\n\n  {% for fhir_resource in fhir_resources.split(\",\") %}\n    {% set location = parquet_location~\"/\"~(fhir_resource|trim|lower) %}\n    {% set sql = \"CREATE TABLE IF NOT EXISTS \"~var('schema')~\".\"~(fhir_resource|trim)\n                ~\" USING PARQUET LOCATION '\"~location~\"'\" %}\n    {{ print(sql) }}\n    {{ run_query(sql) }}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "Initiates Spark sources by creating the source tables based on Parquet files stored locally.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.135152, "supported_languages": null}, "macro.fhir_dbt_analytics.linking_api_datasource": {"name": "linking_api_datasource", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/data_visualization_macros/linking_api_datasource.sql", "original_file_path": "macros/data_visualization_macros/linking_api_datasource.sql", "unique_id": "macro.fhir_dbt_analytics.linking_api_datasource", "macro_sql": "{%- macro linking_api_datasource(report_id, datasource_list) -%}\n  CONCAT(\n    'https://lookerstudio.google.com/reporting/create?',\n    'c.reportId=', '{{ report_id|urlencode }}',\n    {%- for datasource in datasource_list %}\n      {%- set alias = datasource[0] -%}\n    '&ds.{{ alias }}.type=TABLE',\n    '&ds.{{ alias }}.projectId=', '{{ this.database|urlencode }}',\n    '&ds.{{ alias }}.datasetId=', '{{ this.schema|urlencode }}',\n    '&ds.{{ alias }}.tableId=', '{{ datasource[1]|urlencode }}'\n    {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\n  )\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Returns a URL to create a Looker Studio dashboard from a template dashboard using the Looker\nStudio [Linking API](https://developers.google.com/looker-studio/integrate/linking-api).\n\nThis URL contains the bigquery project and dataset, as defined in profiles.yml, as parameters.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "report_id", "type": "string", "description": "Report ID of the Looker studio template dashboard to be cloned.\n"}, {"name": "datasource_list", "type": "list", "description": "List of Looker Studio datasources used by the template dashboard.\n"}], "created_at": 1691506480.146106, "supported_languages": null}, "macro.fhir_dbt_analytics.get_dbt_objects": {"name": "get_dbt_objects", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/get_dbt_objects.sql", "original_file_path": "macros/infrastructure_macros/get_dbt_objects.sql", "unique_id": "macro.fhir_dbt_analytics.get_dbt_objects", "macro_sql": "{% macro get_dbt_objects(resource_type=None) -%}\n{%- set models_dict = {} -%}\n{% if execute %}\n  {% if resource_type!=None %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", resource_type) %}\n      {% do models_dict.update({node.name: node.path}) %}\n    {% endfor %}\n  {% else %}\n    {% for node in graph.nodes.values() %}\n      {% do models_dict.update({node.name: node.path}) %}\n    {% endfor %}\n  {% endif %}\n{% endif %}\n{% do return(models_dict) %}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Returns a dictionary containing all objects in the dbt project as documented in the dbt graph.\nThe dictionary keys are the object names (e.g \"metric\") and the values are the paths for the\nobject in the project (e.g. \"post_processing/metric.sql\")\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "resource_type", "type": "string", "description": "Filter the dbt objects returned in the dictionary to a specific type (e.g. \"model\",\n\"macro\", \"seed\").\n\nIf not specified, the macro will return all object types.\n"}], "created_at": 1691506480.1364539, "supported_languages": null}, "macro.fhir_dbt_analytics.column_exists": {"name": "column_exists", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/column_exists.sql", "original_file_path": "macros/infrastructure_macros/column_exists.sql", "unique_id": "macro.fhir_dbt_analytics.column_exists", "macro_sql": "{% macro column_exists(column_name, fhir_resource=None) %}\n\n    {%- if not execute -%}\n        {% do return(True) %}\n    {% endif %}\n\n    {% set column_dict = get_column_datatype_dict(fhir_resource) %}\n\n    {% do return(column_name in column_dict) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.get_column_datatype_dict"]}, "description": "Returns TRUE if a specified column exists within a FHIR resource view.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "column_name", "type": "string", "description": "Column name to evaluate. Can be a top-level column (e.g. code) or nested column (e.g.\ncode.coding.display).\n"}, {"name": "fhir_resource", "type": "string", "description": "The FHIR resource to check whether the specified `column_name` exists.\n\nIf not specified, the macro will default to using the `primary_resource` for the metric.\n"}], "created_at": 1691506480.136759, "supported_languages": null}, "macro.fhir_dbt_analytics.empty_metric_output": {"name": "empty_metric_output", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/empty_metric_output.sql", "original_file_path": "macros/infrastructure_macros/empty_metric_output.sql", "unique_id": "macro.fhir_dbt_analytics.empty_metric_output", "macro_sql": "{%- macro empty_metric_output() %}\nSELECT\n  {{ current_datetime() }} as execution_datetime,\n  '{{this.name}}' AS metric_name,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  '{{var('source_system_default')}}' AS source_system,\n  '{{var('data_transfer_type_default')}}' AS data_transfer_type,\n  CAST(NULL AS DATE) AS metric_date,\n  '{{var('site_default')}}' AS site,\n  CAST(NULL AS STRING) AS dimension_a,\n  CAST(NULL AS STRING) AS dimension_b,\n  CAST(NULL AS STRING) AS dimension_c,\n  CAST(NULL AS {{ type_long() }}) AS numerator,\n  CAST(NULL AS {{ type_long() }}) AS denominator,\n  CAST(NULL AS {{ type_double() }}) AS measure\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.current_datetime", "macro.fhir_dbt_analytics.type_long", "macro.fhir_dbt_analytics.type_double"]}, "description": "Prints SQL select statement that writes a default row as the output of a metric. This is used\nwhen a metric is not evaluated because the required FHIR resources do not exist in the\ndataset.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.139561, "supported_languages": null}, "macro.fhir_dbt_analytics.get_source_specific_category_index": {"name": "get_source_specific_category_index", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/get_source_specific_category_index.sql", "original_file_path": "macros/infrastructure_macros/get_source_specific_category_index.sql", "unique_id": "macro.fhir_dbt_analytics.get_source_specific_category_index", "macro_sql": "{%- macro get_source_specific_category_index() -%}\n    {% if is_public_synthea_dataset() %}\n        {{ return(None) }}\n    {% else %}\n        {{ return(0) }}\n    {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.is_public_synthea_dataset"]}, "description": "Returns the index for category codes, with the correct value for the Synthea public BigQuery\ndataset.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.139335, "supported_languages": null}, "macro.fhir_dbt_analytics.fhir_resource_exists": {"name": "fhir_resource_exists", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/fhir_resource_exists.sql", "original_file_path": "macros/infrastructure_macros/fhir_resource_exists.sql", "unique_id": "macro.fhir_dbt_analytics.fhir_resource_exists", "macro_sql": "{%- macro fhir_resource_exists(test_fhir_resource) -%}\n\n    {# Query all available FHIR resources #}\n    {% set resource_list =\n        dbt_utils.get_column_values(table=ref('fhir_table_list'), column='fhir_resource') %}\n\n    {# Check for resource of interest #}\n    {% for resource in resource_list %}\n       {% if get_source_table_name(resource) == get_source_table_name(test_fhir_resource) %}\n          {{ return(True) }}\n       {% endif %}\n    {% endfor %}\n\n    {{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.fhir_dbt_analytics.get_source_table_name"]}, "description": "Returns TRUE if a specified FHIR resource exists within the source schema defined by the\n`database` and `schema` variables in dbt_project.yml.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "test_fhir_resource", "type": "string", "description": "FHIR resource to evaluate in Pascal case (e.g AllergyIntolerance).\n"}], "created_at": 1691506480.1356008, "supported_languages": null}, "macro.fhir_dbt_analytics.get_reference_paths": {"name": "get_reference_paths", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/get_reference_paths.sql", "original_file_path": "macros/infrastructure_macros/get_reference_paths.sql", "unique_id": "macro.fhir_dbt_analytics.get_reference_paths", "macro_sql": "{% macro get_reference_paths(\n  reference_column,\n  reference_resource\n) %}\n\n{#- For a reference_resource FooBar, direct reference is fooBarId. -#}\n{%- set direct_reference = reference_resource[:1]|lower ~ reference_resource[1:] ~ 'Id' -%}\n\n{#- For a reference_resource FooBar and reference_column foo, direct reference path is foo.fooBarId. -#}\n{%- set direct_reference_path = reference_column ~ '.' ~ direct_reference -%}\n\n{#- For a reference_column foo, indirect reference path is foo.reference. -#}\n{%- set indirect_reference_path = reference_column ~ '.reference' -%}\n\n{%- set fhir_resource = model_metadata(meta_key='fhir_resource') -%}\n{%- set column_dict = get_column_datatype_dict(fhir_resource) -%}\n\n{%- set reference_column_is_array = \n      execute \n      and reference_column in column_dict \n      and column_dict[reference_column].startswith('ARRAY')\n-%}\n\n{%- do return({\n      \"direct_reference\": direct_reference,\n      \"direct_reference_path\": direct_reference_path,\n      \"indirect_reference_path\": indirect_reference_path,\n      \"reference_column_is_array\": reference_column_is_array\n}) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.get_column_datatype_dict"]}, "description": "Get a dictionary containing direct and indirect FHIR references based in an input reference\ncolumn and reference resource.\n\nFor example, the Encounter resource contains the column \"subject\" for references to the\nPatient resource. In this example the reference_column argument would be \"subject\" and the\nreference_resource argument would be \"Patient\". The macro will return the following\ndictionary:\n\ndirect_reference_path: \"subject.patientId\"\nindirect_reference_path: \"subject.reference\"\nreference_column_is_array: False\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "reference_column", "type": "string", "description": "FHIR reference field. Only include the top-level reference field.\nFor example,'subject' rather than 'subject.patientId'\n"}, {"name": "reference_resource", "type": "string", "description": "FHIR resource for which this reference value refers to (e.g. 'Patient).\n"}], "created_at": 1691506480.1375391, "supported_languages": null}, "macro.fhir_dbt_analytics.get_column_datatype_dict": {"name": "get_column_datatype_dict", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/get_column_datatype_dict.sql", "original_file_path": "macros/infrastructure_macros/get_column_datatype_dict.sql", "unique_id": "macro.fhir_dbt_analytics.get_column_datatype_dict", "macro_sql": "{% macro get_column_datatype_dict(fhir_resource=None) %}\n\n    {%- if not execute -%}\n        {% do return({}) %}\n    {% endif %}\n\n    {%- if fhir_resource == None -%}\n        {%- set fhir_resource = model_metadata(meta_key='fhir_resource') -%}\n    {%- endif -%}\n    {%- if fhir_resource == None -%}\n        {%- set fhir_resource = model_metadata(meta_key='primary_resource') -%}\n    {%- endif -%}\n\n    {%- set relation = adapter.get_relation(\n        database = this.project,\n        schema = this.schema,\n        identifier = fhir_resource ~ \"_view\") -%}\n\n    {% if not relation %}\n        {% do return ({}) %}\n    {% endif %}\n\n    {%- set column_dict = {} -%}\n\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n    {% for top_level_column in columns %}\n        {%- do column_dict.update({top_level_column.name: top_level_column.data_type}) -%}\n        {% for column in flatten_column(top_level_column) %}\n            {%- do column_dict.update({column.name: column.data_type}) -%}\n        {% endfor %}\n    {%- endfor -%}\n\n    {%- do return(column_dict) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.flatten_column"]}, "description": "Returns a dictionary object containing all columns (keys) in a FHIR resource view and their\ndata types (values).\n\nIncluded in the dictionary are both top-level columns (e.g. code) and nested columns (e.g\ncode.coding.display).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "The FHIR resource from which to return a dictionary of columns contained in the FHIR\nresource view.\n\nIf not specified, the macro will default to using the `primary_resource` for the metric.\n"}], "created_at": 1691506480.1360152, "supported_languages": null}, "macro.fhir_dbt_analytics.model_metadata": {"name": "model_metadata", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/model_metadata.sql", "original_file_path": "macros/infrastructure_macros/model_metadata.sql", "unique_id": "macro.fhir_dbt_analytics.model_metadata", "macro_sql": "{% macro model_metadata(meta_key, model_name=this.name, value_if_missing=None) %}\n\n  {%- if execute -%}\n    {% set model_id = \"model.\" ~ project_name ~ \".\" ~ model_name %}\n    {% set meta_value = graph[\"nodes\"][model_id][\"meta\"][meta_key] %}\n  {%- endif -%}\n\n  {% do return(meta_value if meta_value else value_if_missing) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Returns the value for a specified key defined in a dbt model's metadata config.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "meta_key", "type": "string", "description": "Meta key for which to return the value (e.g. category)\n"}, {"name": "model_name", "type": "string", "description": "The dbt model from which to extract the metadata value.\n\nIf not specified, the macro will default to using the model within which this macro is\ncalled.\n"}, {"name": "value_if_missing", "type": "string", "description": "Default value to return when no value is returned for the specified key.\n"}], "created_at": 1691506480.1383722, "supported_languages": null}, "macro.fhir_dbt_analytics.column_data_type": {"name": "column_data_type", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/column_data_type.sql", "original_file_path": "macros/infrastructure_macros/column_data_type.sql", "unique_id": "macro.fhir_dbt_analytics.column_data_type", "macro_sql": "{% macro column_data_type(column_name, source_table) %}\n\n    {%- set relation = adapter.get_relation(\n          database = var('database'),\n          schema = var('schema'),\n          identifier = source_table\n        )\n    -%}\n\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n    {%- for top_level_column in columns -%}\n        {% if column_name == top_level_column.name %}\n            {% do return (top_level_column.data_type) %}\n        {% endif %}\n        {% for column in flatten_column(top_level_column) %}\n            {% if column_name == column.name %}\n                {% do return (column.data_type) %}\n            {% endif %}\n        {%- endfor -%}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.flatten_column"]}, "description": "Returns the data type of a specified column in a source table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "column_name", "type": "string", "description": "Fully qualified column name to evaluate (e.g. code.coding.display).\n"}, {"name": "source_table", "type": "string", "description": "The source table in which `column_name` exists.\n"}], "created_at": 1691506480.1372328, "supported_languages": null}, "macro.fhir_dbt_analytics.get_source_table_name": {"name": "get_source_table_name", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/get_source_table_name.sql", "original_file_path": "macros/infrastructure_macros/get_source_table_name.sql", "unique_id": "macro.fhir_dbt_analytics.get_source_table_name", "macro_sql": "{%- macro get_source_table_name(fhir_resource) -%}\n    {% if execute and is_public_synthea_dataset() %}\n        {{ return(snake_case(fhir_resource)) }}\n    {% else %}\n        {{ return(fhir_resource) }}\n    {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.is_public_synthea_dataset", "macro.fhir_dbt_analytics.snake_case"]}, "description": "Returns FHIR resource name in the correct case depending on the source dataset.\n\nIf the source dataset is the Synthea public BiqQuery dataset, then FHIR resource table names\nare converted to snake case (e.g. allergy_intolerance).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "FHIR resource name in Pascal case (e.g AllergyIntolerance).\n"}], "created_at": 1691506480.138877, "supported_languages": null}, "macro.fhir_dbt_analytics.get_metric_date_columns": {"name": "get_metric_date_columns", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/get_metric_date_columns.sql", "original_file_path": "macros/infrastructure_macros/get_metric_date_columns.sql", "unique_id": "macro.fhir_dbt_analytics.get_metric_date_columns", "macro_sql": "{%- macro get_metric_date_columns() -%}\n    {% set columns = model_metadata('metric_date_columns') -%}\n    {% if not columns %}\n        {{ return(None) }}\n    {% endif %}\n\n    {% if is_public_synthea_dataset() %}\n        {% if columns == ['recordedDate'] %}\n            {{ return(['assertedDate']) }}\n        {% endif %}\n    {% endif %}\n\n    {{ return(columns if columns|length else None) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_analytics.model_metadata", "macro.fhir_dbt_analytics.is_public_synthea_dataset"]}, "description": "Returns the metric date columns from metric metadata, with corrected values for the Synthea\npublic BigQuery dataset.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.139106, "supported_languages": null}, "macro.fhir_dbt_analytics.is_public_synthea_dataset": {"name": "is_public_synthea_dataset", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/infrastructure_macros/is_public_synthea_dataset.sql", "original_file_path": "macros/infrastructure_macros/is_public_synthea_dataset.sql", "unique_id": "macro.fhir_dbt_analytics.is_public_synthea_dataset", "macro_sql": "{%- macro is_public_synthea_dataset() -%}\n    {# When importing the public Synthea data to Spark, name the schema 'public_synthea'. #}\n    {{ return(\n        (var('schema') == 'public_synthea' and var('database') == '') or\n        (var('schema') == 'fhir_synthea' and var('database') == 'bigquery-public-data')\n       ) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Returns TRUE if project schema and database variables are pointing to the [Synthea public\nBiqQuery dataset](https://console.cloud.google.com/marketplace/details/mitre/synthea-fhir)\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [], "created_at": 1691506480.138602, "supported_languages": null}, "macro.fhir_dbt_analytics.assert_string_equals": {"name": "assert_string_equals", "resource_type": "macro", "package_name": "fhir_dbt_analytics", "path": "macros/testing_macros/assert_string_equals.sql", "original_file_path": "macros/testing_macros/assert_string_equals.sql", "unique_id": "macro.fhir_dbt_analytics.assert_string_equals", "macro_sql": "{% macro assert_string_equals(x, y) %}\n  {% set vars = {'pointer': ''} %}\n  {% for c in x %}\n    {% set pos = loop.index - 1 %}\n    {% if y[pos] != c %}\n      {{ exceptions.raise_compiler_error(\n        \"strings differ at character \"~pos~\" '\"~c~\"'<>'\"~y[pos]~\"'\\n\"\n        ~x.replace(\"\\n\", \"\\\\n\")~\" <>\\n\"~y.replace(\"\\n\", \"\\\\n\")~\"\\n\"~vars.pointer~\"^\") }}\n    {% endif %}\n    # Add two spaces for \\n, one space otherwise.\n    {{ vars.update({ 'pointer': vars.pointer ~ ('  ' if c == '\\n' else ' ') }) }}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "Compares two strings, throws exception and shows the first difference if any.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://macros/macros_config.yml", "arguments": [{"name": "x", "type": "string", "description": ""}, {"name": "y", "type": "string", "description": ""}], "created_at": 1691506480.155027, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3301399, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.330383, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.330685, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.335092, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.34094, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.341352, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.34176, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.342054, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.344096, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3443809, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.344901, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.345046, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.345269, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.345442, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.345602, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.345768, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.345964, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3463821, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.346564, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.346739, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.347181, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3476028, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.348347, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.348535, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.348848, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3492732, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.34946, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.35028, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3509161, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3516579, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3553522, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.355704, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.357022, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3593512, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.359672, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.360505, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.361225, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.36569, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.366164, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.366343, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.366494, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.36671, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.366861, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.367859, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3683531, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.371331, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3726358, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.373259, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3743758, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.375108, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.376343, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.377877, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.378338, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.378628, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.379348, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.379746, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.379873, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.380121, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.380309, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.380511, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.380598, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.380714, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.380919, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.381852, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.382613, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.382814, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.383358, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.383625, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.384065, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.384623, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3848078, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.384985, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.385181, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.385369, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.385516, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.386175, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.386372, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3867168, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.386942, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3876631, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.387945, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3882189, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.388486, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3896902, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3899121, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.390074, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.390236, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.390391, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.390805, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.391148, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.391486, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.391965, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.392576, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.396415, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.396609, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.396866, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.3976629, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.397845, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.398038, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.399625, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.401071, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.40543, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4057531, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4059389, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4060428, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.406213, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.406346, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.406618, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.407682, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.407906, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4082031, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.408681, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.41554, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.417824, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.418323, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.418669, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4190888, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.419507, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4212558, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4218838, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4226382, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.422909, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.423717, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4305532, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.432346, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4326458, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.43378, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4340851, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.434815, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.435533, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.436521, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4367821, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4369879, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4373062, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.437511, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.437835, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.438038, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4383261, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.438636, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.438805, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.439115, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.444582, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.450637, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.451995, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.453322, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.454273, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.459658, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.460095, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.460377, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.461837, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.462097, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.462825, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4633, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.463468, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.464009, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.464221, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.464566, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.464715, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4651809, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.465378, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.465749, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.465905, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.466159, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4662862, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.466614, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.466767, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4703648, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.471501, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4716349, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.472225, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4724128, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4725602, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.473968, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.474394, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.474781, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.477618, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.47857, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.478775, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.479251, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4799879, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.480503, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.480714, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4809139, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4837382, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4840739, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.484322, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.485973, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.486439, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.486619, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4868228, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.487294, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.490954, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4963698, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.497368, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.497632, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.498176, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.4983912, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.49854, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.498695, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.498821, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.498997, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.499125, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.499647, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.499854, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.501215, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5016909, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.50211, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.502683, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.502976, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.503296, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.503726, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5040052, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.50439, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.504719, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5050051, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.505633, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.507366, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5080059, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.508327, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.510327, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5116448, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5124748, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5127418, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.512995, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.513081, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.513493, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.513682, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.513955, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.514094, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5143712, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.514488, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.514861, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5150561, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5153039, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.515388, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.515677, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.515829, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.51615, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.516303, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5169861, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.517442, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.517811, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.517996, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.518313, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.518574, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.518864, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.519042, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.519315, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5194938, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.519765, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.519881, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5201962, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5203478, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.520619, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.520736, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.522969, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.523139, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.523317, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.523486, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.523663, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.52383, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.524004, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.524199, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.524374, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.524541, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.524724, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5250719, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.525311, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5254788, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.525812, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5259619, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.526389, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.526506, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.526877, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.52717, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.527328, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.52789, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.528071, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5283132, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.528616, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.528757, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5291631, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5294342, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.529744, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5298922, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.530296, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.530498, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5306728, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.530868, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.531394, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.531561, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5317152, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.53192, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.532154, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.532247, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5324469, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.532637, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.533616, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.533934, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5341198, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.534593, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.534805, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.534964, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5351439, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.535289, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.538344, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5385401, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.538785, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.539119, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.539396, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.539757, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.539964, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5401511, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5403872, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5406988, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.540979, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.541601, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.541875, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.54203, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.542263, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.542779, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.543251, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.543581, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.543833, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.545747, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.54599, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5461812, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.546305, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.54669, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.546902, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.547022, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.547285, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.547507, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.547756, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.547967, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5482152, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5489888, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5492039, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.549484, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.54974, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.551056, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.551849, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.552044, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.552276, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5524669, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.552765, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5533152, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.554987, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5552828, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.555499, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.555677, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5558841, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.556267, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.556499, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5568378, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.557048, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5572312, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.558236, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5587351, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.558935, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.559051, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.559243, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5593631, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5595598, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.55968, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.562127, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.562305, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5627918, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.563043, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.563267, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.563464, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.564287, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.564661, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.564854, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.565224, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.565471, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.566114, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.566526, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.567381, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.569128, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.569298, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.570175, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5706189, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.571253, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.571767, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.571844, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5724008, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.572726, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.573099, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.573424, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.573843, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.574472, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.574998, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.575744, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.576098, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.576467, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.577651, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5788648, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5798101, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5810392, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5817611, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.582146, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.582954, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.58428, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5847812, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.585301, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.585969, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.586509, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.587105, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.587548, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5882628, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.589164, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.589849, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.590572, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.59117, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.591564, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.592011, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.592426, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5931368, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.594049, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.59503, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5960598, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.596951, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.5980082, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.598569, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.598919, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6026502, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6044958, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.604809, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.605, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6055071, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.60582, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.606039, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.606326, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.606518, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.607197, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.608126, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6088982, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.609567, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.609826, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.610234, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.610664, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.611289, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6116428, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.612021, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6127748, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.613722, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6146429, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.615123, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6153338, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.615927, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.616678, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.617733, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.618183, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.61851, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6198778, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.621475, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6229272, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.624722, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6250591, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6252108, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.628648, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.632585, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6329238, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.633203, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.63402, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.63427, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.634491, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.634707, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.634895, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.635088, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.635535, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.635804, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.636226, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6368399, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.637217, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6375942, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.639435, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.639841, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.64065, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.641223, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.642441, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.644235, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.645397, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.646345, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.646862, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.64767, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.648515, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.649038, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.649257, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.649685, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6503491, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.650859, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.651572, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6521559, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.652317, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.652469, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.652626, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6531892, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6540182, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.655212, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.655526, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.657174, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6580842, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.667438, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.670018, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.672568, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.673683, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.67455, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.675331, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.676102, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6767528, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.677016, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6774242, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.678346, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6788118, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6790211, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.679616, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.681473, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.682139, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6831539, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.683397, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.683605, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.683873, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6840808, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.684768, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.685004, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.685247, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6854742, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.685707, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.686056, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.686215, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6863759, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.686603, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.686879, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.687407, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.687677, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.688011, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6883059, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.688853, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.68903, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6891851, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.689344, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.689499, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.689961, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.690169, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.690397, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.690679, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.690877, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6910741, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6914308, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.691587, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.691744, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.691948, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.692223, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.693554, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.693852, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.694158, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6947908, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.695232, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6956449, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6959748, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.696127, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.696277, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.696666, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.696909, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.6971169, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.697359, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.699287, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.699612, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7000692, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.700387, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.700856, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7012649, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.701779, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.702017, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.702177, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7023292, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7027462, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.703277, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7035022, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7037299, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.703947, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.704177, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.704458, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7049222, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.705235, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.705409, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.706455, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.706688, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.706861, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7070432, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.707309, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.707526, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.707915, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.70852, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.70874, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7089002, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.709053, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.709219, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.709731, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.709881, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.710102, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7103229, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.710571, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.710818, "supported_languages": null}, "macro.dbt_unittest.assert_is_none": {"name": "assert_is_none", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_is_none.sql", "original_file_path": "macros/assert_is_none.sql", "unique_id": "macro.dbt_unittest.assert_is_none", "macro_sql": "{% macro assert_is_none(value) %}\n  {% if value is none %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not none.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.711238, "supported_languages": null}, "macro.dbt_unittest.assert_is_not_none": {"name": "assert_is_not_none", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_is_not_none.sql", "original_file_path": "macros/assert_is_not_none.sql", "unique_id": "macro.dbt_unittest.assert_is_not_none", "macro_sql": "{% macro assert_is_not_none(value) %}\n  {% if value is not none %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is none.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.711654, "supported_languages": null}, "macro.dbt_unittest.assert_in": {"name": "assert_in", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_in.sql", "original_file_path": "macros/assert_in.sql", "unique_id": "macro.dbt_unittest.assert_in", "macro_sql": "{% macro assert_in(value, expected) %}\n  {% if value in expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not in \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.712113, "supported_languages": null}, "macro.dbt_unittest.assert_true": {"name": "assert_true", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_true.sql", "original_file_path": "macros/assert_true.sql", "unique_id": "macro.dbt_unittest.assert_true", "macro_sql": "{% macro assert_true(value) %}\n  {% if value is not boolean %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not boolean.\") %}\n  {% endif %}\n\n  {% if value is true %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not true.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.712734, "supported_languages": null}, "macro.dbt_unittest.assert_not_equals": {"name": "assert_not_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_not_equals.sql", "original_file_path": "macros/assert_not_equals.sql", "unique_id": "macro.dbt_unittest.assert_not_equals", "macro_sql": "{% macro assert_not_equals(value, expected) %}\n  {% if value != expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is equal to \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.713194, "supported_languages": null}, "macro.dbt_unittest.assert_false": {"name": "assert_false", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_false.sql", "original_file_path": "macros/assert_false.sql", "unique_id": "macro.dbt_unittest.assert_false", "macro_sql": "{% macro assert_false(value) %}\n  {% if value is not boolean %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not boolean.\") %}\n  {% endif %}\n\n  {% if value is false %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not false.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.713809, "supported_languages": null}, "macro.dbt_unittest.assert_not_in": {"name": "assert_not_in", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_not_in.sql", "original_file_path": "macros/assert_not_in.sql", "unique_id": "macro.dbt_unittest.assert_not_in", "macro_sql": "{% macro assert_not_in(value, expected) %}\n  {% if value not in expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is in \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.714274, "supported_languages": null}, "macro.dbt_unittest.assert_list_equals": {"name": "assert_list_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_list_equals.sql", "original_file_path": "macros/assert_list_equals.sql", "unique_id": "macro.dbt_unittest.assert_list_equals", "macro_sql": "{% macro assert_list_equals(value, expected) %}\n  {% if value is not iterable %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 1st argument \" ~ value ~ \" is not iterable.\") %}\n  {% endif %}\n  {% if expected is not iterable %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 2nd argument \" ~ expected ~ \" is not iterable.\") %}\n  {% endif %}\n\n  {% set length_of_1st_arg = value | length %}\n  {% set length_of_2nd_arg = expected | length %}\n\n  {% if length_of_1st_arg != length_of_2nd_arg %}\n      {% do exceptions.raise_compiler_error(\"FAILED: lengths of the two are not equal.\") %}\n  {% endif %}\n\n  {% for i in range(length_of_1st_arg) %}\n    {% if value[i] != expected[i] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values at the index {{ i }} is not equal.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% do log(\"SUCCESS\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.71571, "supported_languages": null}, "macro.dbt_unittest.assert_dict_equals": {"name": "assert_dict_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_dict_equals.sql", "original_file_path": "macros/assert_dict_equals.sql", "unique_id": "macro.dbt_unittest.assert_dict_equals", "macro_sql": "{% macro assert_dict_equals(value, expected) %}\n  {% if value is not mapping %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 1st argument \" ~ value ~ \" is not a mapping.\") %}\n  {% endif %}\n  {% if expected is not mapping %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 2nd argument \" ~ expected ~ \" is not a mapping.\") %}\n  {% endif %}\n\n  {% for k, v in value.items() %}\n    {% if k not in expected %}\n      {% do exceptions.raise_compiler_error(\"FAILED: key \" ~ k ~ \" of 1st argument is not in \" ~ expected ~ \".\") %}\n    {% endif %}\n\n    {% if v is none and expected[k] is not none %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n\n    {% if v != expected[k] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% for k, v in expected.items() %}\n    {% if k not in value %}\n      {% do exceptions.raise_compiler_error(\"FAILED: key \" ~ k ~ \" of 2nd argument is not in \" ~ value ~ \".\") %}\n    {% endif %}\n\n    {% if v is none and value[k] is not none %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n\n    {% if v != value[k] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% do log(\"SUCCESS\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7183008, "supported_languages": null}, "macro.dbt_unittest.assert_equals": {"name": "assert_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_equals.sql", "original_file_path": "macros/assert_equals.sql", "unique_id": "macro.dbt_unittest.assert_equals", "macro_sql": "{% macro assert_equals(value, expected) %}\n  {% if value == expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not equal to \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.718766, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.719193, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7192829, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7193642, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.719445, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7196229, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.719705, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.719788, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.719866, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.720181, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.720459, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7217321, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.722118, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.722612, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.723159, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7234979, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7238631, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.724255, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7247539, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.725076, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.725193, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.725307, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.725426, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.725764, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.725852, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7260318, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.72613, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.726212, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.72629, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.726499, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.726975, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7272089, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7274408, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.727954, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.728618, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.729975, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.730808, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7318568, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7321799, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.732884, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.738954, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7395709, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.740103, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7415612, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7418408, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.741962, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.74257, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7437298, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.744534, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7451332, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7460759, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.746992, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.74825, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.749503, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.750666, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.750952, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.751549, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7528791, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.753576, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.754878, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.756054, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.756462, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.757737, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.760532, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.761688, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.763009, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7638268, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.764153, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7652102, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.765614, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.766963, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7673101, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.768667, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.769098, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.770654, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.771369, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7718349, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.772368, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.773022, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.774109, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.77509, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.776093, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.777612, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.778131, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.77841, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.779319, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7806358, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.781848, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7821069, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.782578, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7830899, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.783993, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7849212, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.785912, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7868521, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.787848, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7888482, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.790872, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.791755, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.792771, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.793464, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.7941601, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.795058, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.796653, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.797215, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.798122, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.799019, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.79972, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.800725, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.8015711, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.8059452, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.810957, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.8115819, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.8132741, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.814259, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.814888, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.816551, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.8177989, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.820013, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.821047, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.821748, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.8225229, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1691506477.824131, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {"all_metrics": {"name": "all_metrics", "description": "All metrics from metric library", "default": true, "definition": {"union": [{"method": "path", "value": "models/metrics/", "parents": true}, {"method": "path", "value": "models/fhir_resources/"}, {"method": "path", "value": "models/metadata/"}, {"method": "path", "value": "seeds/"}]}}, "fhir_resources": {"name": "fhir_resources", "description": "Views and CTEs for each FHIR resource", "definition": {"union": [{"method": "path", "value": "models/fhir_resources/"}]}}, "metadata": {"name": "metadata", "description": "Project and metric metadata", "definition": {"union": [{"method": "path", "value": "models/metadata/"}]}}, "post_processing": {"name": "post_processing", "description": "Metric post-processing transformations including metric views", "definition": {"union": [{"method": "path", "value": "models/post_processing/"}, {"method": "path", "value": "models/metric_views/"}]}}, "metric_views": {"name": "metric_views", "description": "Views that join the latest metric outputs with metric metadata and group by different levels of aggregation", "definition": {"union": [{"method": "path", "value": "models/metric_views/"}]}}, "anomaly_detection": {"name": "anomaly_detection", "description": "Metric anomaly detection calculations", "definition": {"union": [{"method": "path", "value": "models/anomaly_detection/"}]}}, "testing": {"name": "testing", "description": "Subset of metrics to include in tests", "definition": {"union": [{"method": "path", "value": "models/fhir_resources/"}, {"method": "path", "value": "models/metadata/"}, {"method": "path", "value": "seeds/"}, {"method": "path", "value": "models/metrics/"}, {"exclude": [{"method": "config.meta.category", "value": "Active patients with resource"}, {"method": "fqn", "value": "servicerequest_reference_servicerequest_undefined"}]}]}}, "onboarding": {"name": "onboarding", "description": "Metrics helpful for evaluating a new FHIR dataset", "definition": {"union": [{"method": "config.meta.category", "value": "Resource count"}, {"method": "config.meta.category", "value": "Referential integrity"}, {"method": "config.meta.category", "value": "Data completeness"}, {"method": "config.meta.category", "value": "Data distribution"}, {"method": "config.meta.category", "value": "Code system", "parents": true}, {"method": "path", "value": "models/metadata/"}, {"method": "path", "value": "seeds/"}]}}, "category_resource_count": {"name": "category_resource_count", "description": "Metrics that count the number of valid FHIR resources", "definition": {"union": [{"method": "config.meta.category", "value": "Resource count", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_referential_integrity": {"name": "category_referential_integrity", "description": "Metrics that evaluate references between FHIR resources", "definition": {"union": [{"method": "config.meta.category", "value": "Referential integrity", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_encounter_daily": {"name": "category_encounter_daily", "description": "Metrics quantifying patient encounters each day", "definition": {"union": [{"method": "config.meta.category", "value": "Encounter daily", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_active_patients_with_resource": {"name": "category_active_patients_with_resource", "description": "Metrics calculating the proportion of active patients with at least one resource that day", "definition": {"union": [{"method": "config.meta.category", "value": "Active patients with resource", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_data_completeness": {"name": "category_data_completeness", "description": "Metrics quantifying how often a particular data item is completed correctly", "definition": {"union": [{"method": "config.meta.category", "value": "Data completeness", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_data_consistency": {"name": "category_data_consistency", "description": "Metrics quantifying how often data items contain conflicting or incompatible information over time", "definition": {"union": [{"method": "config.meta.category", "value": "Data consistency", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_data_distribution": {"name": "category_data_distribution", "description": "Count metrics for which primary interest is the distribition of counts between dimension values", "definition": {"union": [{"method": "config.meta.category", "value": "Data distribution", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "category_code_system": {"name": "category_code_system", "description": "Metrics that measure the proportion of coded fields that have data recorded in a particular coding system", "definition": {"union": [{"method": "config.meta.category", "value": "Code system", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_allergyintolerance": {"name": "resource_allergyintolerance", "description": "Metrics for which the primary resource evaluated is AllergyIntolerance", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "AllergyIntolerance", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_binary": {"name": "resource_binary", "description": "Metrics for which the primary resource evaluated is Binary", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Binary", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_careteam": {"name": "resource_careteam", "description": "Metrics for which the primary resource evaluated is CareTeam", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "CareTeam", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_composition": {"name": "resource_composition", "description": "Metrics for which the primary resource evaluated is Composition", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Composition", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_condition": {"name": "resource_condition", "description": "Metrics for which the primary resource evaluated is Condition", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Condition", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_diagnosticreport": {"name": "resource_diagnosticreport", "description": "Metrics for which the primary resource evaluated is DiagnosticReport", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "DiagnosticReport", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_documentreference": {"name": "resource_documentreference", "description": "Metrics for which the primary resource evaluated is DocumentReference", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "DocumentReference", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_encounter": {"name": "resource_encounter", "description": "Metrics for which the primary resource evaluated is Encounter", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Encounter", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_imagingstudy": {"name": "resource_imagingstudy", "description": "Metrics for which the primary resource evaluated is ImagingStudy", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "ImagingStudy", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_location": {"name": "resource_location", "description": "Metrics for which the primary resource evaluated is Location", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Location", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medication": {"name": "resource_medication", "description": "Metrics for which the primary resource evaluated is Medication", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Medication", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medicationadministration": {"name": "resource_medicationadministration", "description": "Metrics for which the primary resource evaluated is MedicationAdministration", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "MedicationAdministration", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medicationdispense": {"name": "resource_medicationdispense", "description": "Metrics for which the primary resource evaluated is MedicationDispense", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "MedicationDispense", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medicationrequest": {"name": "resource_medicationrequest", "description": "Metrics for which the primary resource evaluated is MedicationRequest", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "MedicationRequest", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_medicationstatement": {"name": "resource_medicationstatement", "description": "Metrics for which the primary resource evaluated is MedicationStatement", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "MedicationStatement", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_observation": {"name": "resource_observation", "description": "Metrics for which the primary resource evaluated is Observation", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Observation", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_organization": {"name": "resource_organization", "description": "Metrics for which the primary resource evaluated is Organization", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Organization", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_patient": {"name": "resource_patient", "description": "Metrics for which the primary resource evaluated is Patient", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Patient", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_person": {"name": "resource_person", "description": "Metrics for which the primary resource evaluated is Person", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Person", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_practitioner": {"name": "resource_practitioner", "description": "Metrics for which the primary resource evaluated is Practitioner", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Practitioner", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_practitionerrole": {"name": "resource_practitionerrole", "description": "Metrics for which the primary resource evaluated is PractitionerRole", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "PractitionerRole", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_procedure": {"name": "resource_procedure", "description": "Metrics for which the primary resource evaluated is Procedure", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "Procedure", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_servicerequest": {"name": "resource_servicerequest", "description": "Metrics for which the primary resource evaluated is ServiceRequest", "definition": {"union": [{"method": "config.meta.primary_resource", "value": "ServiceRequest", "parents": true}, {"method": "path", "value": "models/metadata/"}]}}, "resource_patient_encounter_observation": {"name": "resource_patient_encounter_observation", "description": "Metrics for which the primary resource evaluated is one of Patient, Encounter or Observation", "definition": {"union": [{"union": [{"method": "config.meta.primary_resource", "value": "Patient", "parents": true}, {"method": "path", "value": "models/metadata/"}]}, {"union": [{"method": "config.meta.primary_resource", "value": "Encounter", "parents": true}, {"method": "path", "value": "models/metadata/"}]}, {"union": [{"method": "config.meta.primary_resource", "value": "Observation", "parents": true}, {"method": "path", "value": "models/metadata/"}]}, {"method": "path", "value": "models/metadata/"}]}}, "succeed_on_spark": {"name": "succeed_on_spark", "description": "Metrics which were tested to work fine on Spark.", "definition": {"intersection": [{"method": "path", "value": "models/"}, {"union": [{"union": [{"method": "path", "value": "models/metrics/", "parents": true}, {"method": "path", "value": "models/fhir_resources/"}, {"method": "path", "value": "models/metadata/"}, {"method": "path", "value": "seeds/"}]}, {"exclude": [{"method": "tag", "value": "spark_todo"}]}, {"method": "path", "value": "models/metadata/"}]}]}}, "resource_ppi": {"name": "resource_ppi", "description": "Metrics for which the primary resource evaluated is one of Patient, Questionnaire or QuestionnaireResponse", "definition": {"union": [{"method": "config.meta.fhir_resource", "value": "Questionnaire", "parents": true}, {"method": "config.meta.fhir_resource", "value": "Patient", "parents": true}, {"method": "config.meta.fhir_resource", "value": "QuestionnaireResponse", "parents": true}]}}}, "disabled": {"model.fhir_dbt_analytics.metric_all_executions": [{"database": "aou-datawarehouse-sandbox", "schema": "mv2451_ppi_001", "name": "metric_all_executions", "resource_type": "model", "package_name": "fhir_dbt_analytics", "path": "post_processing/metric_all_executions.sql", "original_file_path": "models/post_processing/metric_all_executions.sql", "unique_id": "model.fhir_dbt_analytics.metric_all_executions", "fqn": ["fhir_dbt_analytics", "post_processing", "metric_all_executions"], "alias": "metric_all_executions", "checksum": {"name": "sha256", "checksum": "6c215514bd930c86728ac40fa75030553c8542cf82f6fc0f9568d6ac4954b0ba"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Incrementally inserts all rows from `metric_latest_execution` with each execution, to maintain\na history of all metric execution results.\n\nThis model is disabled by default, but can be enables by setting the\n`persist_all_metric_executions` project variable to TRUE.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_analytics://models/post_processing/post_processing_config.yml", "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "materialized": "incremental"}, "created_at": 1691506480.014604, "config_call_dict": {"enabled": false, "materialized": "incremental"}, "relation_name": "`aou-datawarehouse-sandbox`.`mv2451_ppi_001`.`metric_all_executions`", "raw_code": "{#\n/* Copyright 2022 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. */\n#}\n\n{{ config(\n    enabled = var('persist_all_metric_executions'),\n    materialized = 'incremental'\n) -}}\n\nSELECT *\nFROM {{ ref('metric_latest_execution') }}", "language": "sql", "refs": [{"name": "metric_latest_execution", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}]}, "parent_map": {"model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_patient_undefined": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_reference_patient_undefined": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_unknown_gender": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.person_reference_patient_undefined": ["model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_dob_distribution": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_count_by_end_date": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_patients_with_servicerequest_daily": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_missing_dob": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_dosage_dose_rate": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationdispense_dosage_dose_rate": ["model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_with_type_text": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_count": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_count": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.practitioner_count": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_with_attachment": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_dosage_instruction": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_patients_with_observation_daily": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_count": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.documentreference_reference_patient_undefined": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_with_code_text": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.location_count": ["model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_with_code_text": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_encounter_undefined": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_count": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_patient_unresolved": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_patients_with_medicationrequest_daily": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.documentreference_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_patients_with_allergyintolerance": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_binary_unresolved": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_reference_location_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_patient_unresolved": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_patient_undefined": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_inactive": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_patients_with_diagnosticreport_daily": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_dosage_instruction": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.organization_count": ["model.fhir_dbt_analytics.Organization", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_encounters_daily": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_missing_encounter": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_with_binary_unresolved": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_patient_unresolved": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.resource_hour_distribution": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_reference_location_undefined": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_reference_patient_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_with_section_text_div": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.binary_count": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_performer_specialty": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.documentreference_reference_patient_unresolved": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medication_count": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_encounters_midnight_census": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_with_code_text": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_dosage_dose_rate": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_count": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_testpatient": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_name_missing": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.person_reference_patient_unresolved": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_patients_with_medicationstatement": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.questionnaire_count": ["model.fhir_dbt_analytics.Questionnaire", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_quantity_unit": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.practitionerrole_count": ["model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.documentreference_distribution_type": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_binary_mimetype": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_patient_undefined": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.careteam_reference_encounter_undefined": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_binary_undefined": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_reference_encounter_unresolved": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_count": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_patients_with_medicationadministration_daily": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved": ["model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.questionnaireresponse_linkid_unresolved": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_count": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_patient_undefined": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_dosage_route": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.documentreference_count": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_dosage_route": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved": ["model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.composition_reference_practitioner_undefined": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_dosage_dose_rate": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_dosage_route": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationdispense_dosage_route": ["model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_with_conclusion": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_dosage_instruction": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_encounter_undefined": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_reference_encounter_undefined": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_patient_unresolved": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_reference_encounter_undefined": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_patients_with_careteam_daily": ["model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationstatement_count": ["model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.documentreference_mimetype": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.person_count": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_count": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationdispense_dosage_instruction": ["model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_reference_patient_undefined": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.active_patients_with_composition_daily": ["model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved": ["model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_count": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_count": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_count_by_start_date": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.documentreference_reference_practitioner_undefined": ["model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.allergyintolerance_count": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.encounter_count": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined": ["model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.observation_quantity_value": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.questionnaireresponse_count": ["model.fhir_dbt_analytics.Questionnaire", "model.fhir_dbt_analytics.QuestionnaireResponse", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.patient_missing_mrn": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined": ["model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.condition_reference_patient_unresolved": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.documentreference_binary_mimetype": ["model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.fhir_table_list"], "model.fhir_dbt_analytics.metric_thresholds": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.unioned_thresholds"], "model.fhir_dbt_analytics.metric_definition": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_all_definitions"], "model.fhir_dbt_analytics.metric_copy": [], "model.fhir_dbt_analytics.metric_execution_log": ["model.fhir_dbt_analytics.metric_latest_execution"], "model.fhir_dbt_analytics.metric": ["model.fhir_dbt_analytics.metric_all_definitions", "model.fhir_dbt_analytics.metric_copy", "model.fhir_dbt_analytics.metric_latest_execution"], "model.fhir_dbt_analytics.metric_latest_execution": ["model.fhir_dbt_analytics.metric_all_definitions"], "model.fhir_dbt_analytics.hypertension_without_medication": ["model.fhir_dbt_analytics.Condition_view", "model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.Procedure_view", "seed.fhir_dbt_analytics.clinical_code_groups"], "model.fhir_dbt_analytics.adults": ["model.fhir_dbt_analytics.Patient_view"], "model.fhir_dbt_analytics.QuestionnaireResponse_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Medication_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Binary_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Procedure": ["model.fhir_dbt_analytics.Procedure_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Composition_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationStatement": ["model.fhir_dbt_analytics.MedicationStatement_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationRequest_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.ImagingStudy_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Practitioner": ["model.fhir_dbt_analytics.Practitioner_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.AllergyIntolerance_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Encounter": ["model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Binary": ["model.fhir_dbt_analytics.Binary_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Location": ["model.fhir_dbt_analytics.Location_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Composition": ["model.fhir_dbt_analytics.Composition_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.PractitionerRole": ["model.fhir_dbt_analytics.PractitionerRole_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Patient": ["model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Encounter_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.ImagingStudy": ["model.fhir_dbt_analytics.ImagingStudy_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Condition": ["model.fhir_dbt_analytics.Condition_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Medication": ["model.fhir_dbt_analytics.Medication_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationAdministration_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.DiagnosticReport": ["model.fhir_dbt_analytics.DiagnosticReport_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationStatement_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationDispense_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Organization": ["model.fhir_dbt_analytics.Organization_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.PractitionerRole_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.ServiceRequest_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Questionnaire_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.DocumentReference_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.DocumentReference": ["model.fhir_dbt_analytics.DocumentReference_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Observation": ["model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Patient_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Location_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Condition_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Organization_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.ServiceRequest": ["model.fhir_dbt_analytics.ServiceRequest_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.CareTeam_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.AllergyIntolerance": ["model.fhir_dbt_analytics.AllergyIntolerance_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Questionnaire": ["model.fhir_dbt_analytics.Questionnaire_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.CareTeam": ["model.fhir_dbt_analytics.CareTeam_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationAdministration": ["model.fhir_dbt_analytics.MedicationAdministration_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Observation_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.DiagnosticReport_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Practitioner_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Person_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.QuestionnaireResponse": ["model.fhir_dbt_analytics.QuestionnaireResponse_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Person": ["model.fhir_dbt_analytics.Person_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationDispense": ["model.fhir_dbt_analytics.MedicationDispense_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.Procedure_view": ["model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.MedicationRequest": ["model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.fhir_table_list", "seed.fhir_dbt_analytics.site_timezones"], "model.fhir_dbt_analytics.fhir_table_list": [], "model.fhir_dbt_analytics.project_variables": [], "model.fhir_dbt_analytics.metric_all_definitions": [], "model.fhir_dbt_analytics.unioned_thresholds": [], "model.fhir_dbt_analytics.metric_by_year_dimensions": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "model.fhir_dbt_analytics.metric_by_year": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "model.fhir_dbt_analytics.metric_by_day_dimensions": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "model.fhir_dbt_analytics.metric_overall": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "model.fhir_dbt_analytics.metric_by_day": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition"], "seed.fhir_dbt_analytics.thresholds": [], "seed.fhir_dbt_analytics.clinical_code_groups": [], "seed.fhir_dbt_analytics.site_timezones": [], "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef": ["model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_latest_execution"], "test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions__safe_divide_numerator_denominator_measure.154d11b42e": ["model.fhir_dbt_analytics.metric_by_day_dimensions"], "source.fhir_dbt_analytics.fhir.Patient": [], "source.fhir_dbt_analytics.fhir.Questionnaire": [], "source.fhir_dbt_analytics.fhir.QuestionnaireResponse": []}, "child_map": {"model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved": [], "model.fhir_dbt_analytics.observation_reference_patient_undefined": [], "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined": [], "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined": [], "model.fhir_dbt_analytics.encounter_reference_patient_undefined": [], "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.patient_unknown_gender": [], "model.fhir_dbt_analytics.person_reference_patient_undefined": [], "model.fhir_dbt_analytics.patient_dob_distribution": [], "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.encounter_count_by_end_date": [], "model.fhir_dbt_analytics.active_patients_with_servicerequest_daily": [], "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined": [], "model.fhir_dbt_analytics.composition_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.patient_missing_dob": [], "model.fhir_dbt_analytics.medicationadministration_dosage_dose_rate": [], "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined": [], "model.fhir_dbt_analytics.medicationdispense_dosage_dose_rate": [], "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved": [], "model.fhir_dbt_analytics.composition_with_type_text": [], "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined": [], "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved": [], "model.fhir_dbt_analytics.patient_count": [], "model.fhir_dbt_analytics.medicationadministration_count": [], "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved": [], "model.fhir_dbt_analytics.practitioner_count": [], "model.fhir_dbt_analytics.diagnosticreport_with_attachment": [], "model.fhir_dbt_analytics.medicationrequest_dosage_instruction": [], "model.fhir_dbt_analytics.active_patients_with_observation_daily": [], "model.fhir_dbt_analytics.composition_count": [], "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved": [], "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined": [], "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined": [], "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined": [], "model.fhir_dbt_analytics.documentreference_reference_patient_undefined": [], "model.fhir_dbt_analytics.procedure_with_code_text": [], "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.location_count": [], "model.fhir_dbt_analytics.condition_with_code_text": [], "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined": [], "model.fhir_dbt_analytics.composition_reference_encounter_undefined": [], "model.fhir_dbt_analytics.procedure_count": [], "model.fhir_dbt_analytics.careteam_reference_patient_unresolved": [], "model.fhir_dbt_analytics.active_patients_with_medicationrequest_daily": [], "model.fhir_dbt_analytics.documentreference_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.active_patients_with_allergyintolerance": [], "model.fhir_dbt_analytics.composition_reference_binary_unresolved": [], "model.fhir_dbt_analytics.encounter_reference_location_unresolved": [], "model.fhir_dbt_analytics.composition_reference_patient_unresolved": [], "model.fhir_dbt_analytics.procedure_reference_patient_undefined": [], "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved": [], "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.patient_inactive": [], "model.fhir_dbt_analytics.active_patients_with_diagnosticreport_daily": [], "model.fhir_dbt_analytics.medicationadministration_dosage_instruction": [], "model.fhir_dbt_analytics.organization_count": [], "model.fhir_dbt_analytics.active_encounters_daily": [], "model.fhir_dbt_analytics.patient_missing_encounter": [], "model.fhir_dbt_analytics.diagnosticreport_with_binary_unresolved": [], "model.fhir_dbt_analytics.procedure_reference_patient_unresolved": [], "model.fhir_dbt_analytics.resource_hour_distribution": [], "model.fhir_dbt_analytics.encounter_reference_location_undefined": [], "model.fhir_dbt_analytics.encounter_reference_patient_unresolved": [], "model.fhir_dbt_analytics.composition_with_section_text_div": [], "model.fhir_dbt_analytics.binary_count": [], "model.fhir_dbt_analytics.diagnosticreport_performer_specialty": [], "model.fhir_dbt_analytics.documentreference_reference_patient_unresolved": [], "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined": [], "model.fhir_dbt_analytics.medication_count": [], "model.fhir_dbt_analytics.active_encounters_midnight_census": [], "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined": [], "model.fhir_dbt_analytics.diagnosticreport_with_code_text": [], "model.fhir_dbt_analytics.medicationrequest_dosage_dose_rate": [], "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved": [], "model.fhir_dbt_analytics.careteam_count": [], "model.fhir_dbt_analytics.patient_testpatient": [], "model.fhir_dbt_analytics.patient_name_missing": [], "model.fhir_dbt_analytics.person_reference_patient_unresolved": [], "model.fhir_dbt_analytics.active_patients_with_medicationstatement": [], "model.fhir_dbt_analytics.questionnaire_count": [], "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved": [], "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined": [], "model.fhir_dbt_analytics.observation_quantity_unit": [], "model.fhir_dbt_analytics.practitionerrole_count": [], "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.documentreference_distribution_type": [], "model.fhir_dbt_analytics.composition_binary_mimetype": [], "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.careteam_reference_patient_undefined": [], "model.fhir_dbt_analytics.careteam_reference_encounter_undefined": [], "model.fhir_dbt_analytics.observation_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.composition_reference_binary_undefined": [], "model.fhir_dbt_analytics.condition_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_count": [], "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined": [], "model.fhir_dbt_analytics.active_patients_with_medicationadministration_daily": [], "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined": [], "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved": [], "model.fhir_dbt_analytics.questionnaireresponse_linkid_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved": [], "model.fhir_dbt_analytics.servicerequest_count": [], "model.fhir_dbt_analytics.composition_reference_patient_undefined": [], "model.fhir_dbt_analytics.medicationadministration_dosage_route": [], "model.fhir_dbt_analytics.documentreference_count": [], "model.fhir_dbt_analytics.medicationstatement_dosage_route": [], "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved": [], "model.fhir_dbt_analytics.composition_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.medicationstatement_dosage_dose_rate": [], "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined": [], "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined": [], "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved": [], "model.fhir_dbt_analytics.medicationrequest_dosage_route": [], "model.fhir_dbt_analytics.medicationdispense_dosage_route": [], "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved": [], "model.fhir_dbt_analytics.diagnosticreport_with_conclusion": [], "model.fhir_dbt_analytics.medicationstatement_dosage_instruction": [], "model.fhir_dbt_analytics.procedure_reference_encounter_undefined": [], "model.fhir_dbt_analytics.condition_reference_encounter_undefined": [], "model.fhir_dbt_analytics.observation_reference_patient_unresolved": [], "model.fhir_dbt_analytics.observation_reference_encounter_undefined": [], "model.fhir_dbt_analytics.active_patients_with_careteam_daily": [], "model.fhir_dbt_analytics.medicationstatement_count": [], "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved": [], "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined": [], "model.fhir_dbt_analytics.documentreference_mimetype": [], "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved": [], "model.fhir_dbt_analytics.person_count": [], "model.fhir_dbt_analytics.condition_count": [], "model.fhir_dbt_analytics.medicationdispense_dosage_instruction": [], "model.fhir_dbt_analytics.condition_reference_patient_undefined": [], "model.fhir_dbt_analytics.active_patients_with_composition_daily": [], "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved": [], "model.fhir_dbt_analytics.observation_count": [], "model.fhir_dbt_analytics.medicationrequest_count": [], "model.fhir_dbt_analytics.encounter_count_by_start_date": [], "model.fhir_dbt_analytics.documentreference_reference_practitioner_undefined": [], "model.fhir_dbt_analytics.allergyintolerance_count": [], "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined": [], "model.fhir_dbt_analytics.encounter_count": [], "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined": [], "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined": [], "model.fhir_dbt_analytics.observation_quantity_value": [], "model.fhir_dbt_analytics.questionnaireresponse_count": [], "model.fhir_dbt_analytics.patient_missing_mrn": [], "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined": [], "model.fhir_dbt_analytics.condition_reference_patient_unresolved": [], "model.fhir_dbt_analytics.documentreference_binary_mimetype": [], "model.fhir_dbt_analytics.metric_thresholds": [], "model.fhir_dbt_analytics.metric_definition": ["model.fhir_dbt_analytics.metric_by_day", "model.fhir_dbt_analytics.metric_by_day_dimensions", "model.fhir_dbt_analytics.metric_by_year", "model.fhir_dbt_analytics.metric_by_year_dimensions", "model.fhir_dbt_analytics.metric_overall", "model.fhir_dbt_analytics.metric_thresholds", "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef"], "model.fhir_dbt_analytics.metric_copy": ["model.fhir_dbt_analytics.metric"], "model.fhir_dbt_analytics.metric_execution_log": [], "model.fhir_dbt_analytics.metric": ["model.fhir_dbt_analytics.metric_by_day", "model.fhir_dbt_analytics.metric_by_day_dimensions", "model.fhir_dbt_analytics.metric_by_year", "model.fhir_dbt_analytics.metric_by_year_dimensions", "model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_overall", "model.fhir_dbt_analytics.metric_thresholds"], "model.fhir_dbt_analytics.metric_latest_execution": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_execution_log", "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef"], "model.fhir_dbt_analytics.hypertension_without_medication": [], "model.fhir_dbt_analytics.adults": [], "model.fhir_dbt_analytics.QuestionnaireResponse_view": ["model.fhir_dbt_analytics.QuestionnaireResponse"], "model.fhir_dbt_analytics.Medication_view": ["model.fhir_dbt_analytics.Medication"], "model.fhir_dbt_analytics.Binary_view": ["model.fhir_dbt_analytics.Binary"], "model.fhir_dbt_analytics.Procedure": ["model.fhir_dbt_analytics.procedure_count", "model.fhir_dbt_analytics.procedure_reference_encounter_undefined", "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved", "model.fhir_dbt_analytics.procedure_reference_patient_undefined", "model.fhir_dbt_analytics.procedure_reference_patient_unresolved", "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined", "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved", "model.fhir_dbt_analytics.procedure_with_code_text", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.Composition_view": ["model.fhir_dbt_analytics.Composition"], "model.fhir_dbt_analytics.MedicationStatement": ["model.fhir_dbt_analytics.active_patients_with_medicationstatement", "model.fhir_dbt_analytics.medicationstatement_count", "model.fhir_dbt_analytics.medicationstatement_dosage_dose_rate", "model.fhir_dbt_analytics.medicationstatement_dosage_instruction", "model.fhir_dbt_analytics.medicationstatement_dosage_route", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.MedicationRequest_view": ["model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.hypertension_without_medication"], "model.fhir_dbt_analytics.ImagingStudy_view": ["model.fhir_dbt_analytics.ImagingStudy"], "model.fhir_dbt_analytics.Practitioner": ["model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved", "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved", "model.fhir_dbt_analytics.diagnosticreport_performer_specialty", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved", "model.fhir_dbt_analytics.documentreference_reference_practitioner_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved", "model.fhir_dbt_analytics.practitioner_count", "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved"], "model.fhir_dbt_analytics.AllergyIntolerance_view": ["model.fhir_dbt_analytics.AllergyIntolerance"], "model.fhir_dbt_analytics.Encounter": ["model.fhir_dbt_analytics.active_encounters_daily", "model.fhir_dbt_analytics.active_encounters_midnight_census", "model.fhir_dbt_analytics.active_patients_with_allergyintolerance", "model.fhir_dbt_analytics.active_patients_with_careteam_daily", "model.fhir_dbt_analytics.active_patients_with_composition_daily", "model.fhir_dbt_analytics.active_patients_with_diagnosticreport_daily", "model.fhir_dbt_analytics.active_patients_with_medicationadministration_daily", "model.fhir_dbt_analytics.active_patients_with_medicationrequest_daily", "model.fhir_dbt_analytics.active_patients_with_medicationstatement", "model.fhir_dbt_analytics.active_patients_with_observation_daily", "model.fhir_dbt_analytics.active_patients_with_servicerequest_daily", "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved", "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved", "model.fhir_dbt_analytics.composition_reference_encounter_unresolved", "model.fhir_dbt_analytics.condition_reference_encounter_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved", "model.fhir_dbt_analytics.encounter_count", "model.fhir_dbt_analytics.encounter_count_by_end_date", "model.fhir_dbt_analytics.encounter_count_by_start_date", "model.fhir_dbt_analytics.encounter_reference_location_undefined", "model.fhir_dbt_analytics.encounter_reference_location_unresolved", "model.fhir_dbt_analytics.encounter_reference_patient_undefined", "model.fhir_dbt_analytics.encounter_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved", "model.fhir_dbt_analytics.observation_reference_encounter_unresolved", "model.fhir_dbt_analytics.patient_count", "model.fhir_dbt_analytics.patient_missing_encounter", "model.fhir_dbt_analytics.person_count", "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved", "model.fhir_dbt_analytics.questionnaireresponse_linkid_unresolved", "model.fhir_dbt_analytics.resource_hour_distribution", "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved"], "model.fhir_dbt_analytics.Binary": ["model.fhir_dbt_analytics.binary_count", "model.fhir_dbt_analytics.composition_binary_mimetype", "model.fhir_dbt_analytics.composition_reference_binary_unresolved", "model.fhir_dbt_analytics.diagnosticreport_with_binary_unresolved", "model.fhir_dbt_analytics.documentreference_binary_mimetype"], "model.fhir_dbt_analytics.Location": ["model.fhir_dbt_analytics.encounter_reference_location_unresolved", "model.fhir_dbt_analytics.location_count"], "model.fhir_dbt_analytics.Composition": ["model.fhir_dbt_analytics.active_patients_with_composition_daily", "model.fhir_dbt_analytics.binary_count", "model.fhir_dbt_analytics.composition_binary_mimetype", "model.fhir_dbt_analytics.composition_count", "model.fhir_dbt_analytics.composition_reference_binary_undefined", "model.fhir_dbt_analytics.composition_reference_binary_unresolved", "model.fhir_dbt_analytics.composition_reference_encounter_undefined", "model.fhir_dbt_analytics.composition_reference_encounter_unresolved", "model.fhir_dbt_analytics.composition_reference_patient_undefined", "model.fhir_dbt_analytics.composition_reference_patient_unresolved", "model.fhir_dbt_analytics.composition_reference_practitioner_undefined", "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved", "model.fhir_dbt_analytics.composition_with_section_text_div", "model.fhir_dbt_analytics.composition_with_type_text", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.PractitionerRole": ["model.fhir_dbt_analytics.diagnosticreport_performer_specialty", "model.fhir_dbt_analytics.practitionerrole_count"], "model.fhir_dbt_analytics.Patient": ["model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved", "model.fhir_dbt_analytics.careteam_reference_patient_unresolved", "model.fhir_dbt_analytics.composition_reference_patient_unresolved", "model.fhir_dbt_analytics.condition_reference_patient_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved", "model.fhir_dbt_analytics.documentreference_reference_patient_unresolved", "model.fhir_dbt_analytics.encounter_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved", "model.fhir_dbt_analytics.observation_reference_patient_unresolved", "model.fhir_dbt_analytics.patient_count", "model.fhir_dbt_analytics.patient_dob_distribution", "model.fhir_dbt_analytics.patient_inactive", "model.fhir_dbt_analytics.patient_missing_dob", "model.fhir_dbt_analytics.patient_missing_encounter", "model.fhir_dbt_analytics.patient_missing_mrn", "model.fhir_dbt_analytics.patient_name_missing", "model.fhir_dbt_analytics.patient_testpatient", "model.fhir_dbt_analytics.patient_unknown_gender", "model.fhir_dbt_analytics.person_reference_patient_unresolved", "model.fhir_dbt_analytics.procedure_reference_patient_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved"], "model.fhir_dbt_analytics.Encounter_view": ["model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.hypertension_without_medication"], "model.fhir_dbt_analytics.ImagingStudy": [], "model.fhir_dbt_analytics.Condition": ["model.fhir_dbt_analytics.condition_count", "model.fhir_dbt_analytics.condition_reference_encounter_undefined", "model.fhir_dbt_analytics.condition_reference_encounter_unresolved", "model.fhir_dbt_analytics.condition_reference_patient_undefined", "model.fhir_dbt_analytics.condition_reference_patient_unresolved", "model.fhir_dbt_analytics.condition_with_code_text", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.Medication": ["model.fhir_dbt_analytics.medication_count", "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved"], "model.fhir_dbt_analytics.MedicationAdministration_view": ["model.fhir_dbt_analytics.MedicationAdministration"], "model.fhir_dbt_analytics.DiagnosticReport": ["model.fhir_dbt_analytics.active_patients_with_diagnosticreport_daily", "model.fhir_dbt_analytics.diagnosticreport_count", "model.fhir_dbt_analytics.diagnosticreport_performer_specialty", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.diagnosticreport_with_attachment", "model.fhir_dbt_analytics.diagnosticreport_with_binary_unresolved", "model.fhir_dbt_analytics.diagnosticreport_with_code_text", "model.fhir_dbt_analytics.diagnosticreport_with_conclusion", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.MedicationStatement_view": ["model.fhir_dbt_analytics.MedicationStatement"], "model.fhir_dbt_analytics.MedicationDispense_view": ["model.fhir_dbt_analytics.MedicationDispense"], "model.fhir_dbt_analytics.Organization": ["model.fhir_dbt_analytics.organization_count"], "model.fhir_dbt_analytics.PractitionerRole_view": ["model.fhir_dbt_analytics.PractitionerRole"], "model.fhir_dbt_analytics.ServiceRequest_view": ["model.fhir_dbt_analytics.ServiceRequest"], "model.fhir_dbt_analytics.Questionnaire_view": ["model.fhir_dbt_analytics.Questionnaire"], "model.fhir_dbt_analytics.DocumentReference_view": ["model.fhir_dbt_analytics.DocumentReference"], "model.fhir_dbt_analytics.DocumentReference": ["model.fhir_dbt_analytics.documentreference_binary_mimetype", "model.fhir_dbt_analytics.documentreference_count", "model.fhir_dbt_analytics.documentreference_distribution_type", "model.fhir_dbt_analytics.documentreference_mimetype", "model.fhir_dbt_analytics.documentreference_reference_patient_undefined", "model.fhir_dbt_analytics.documentreference_reference_patient_unresolved", "model.fhir_dbt_analytics.documentreference_reference_practitioner_undefined", "model.fhir_dbt_analytics.documentreference_reference_practitioner_unresolved", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.Observation": ["model.fhir_dbt_analytics.active_patients_with_observation_daily", "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved", "model.fhir_dbt_analytics.observation_count", "model.fhir_dbt_analytics.observation_quantity_unit", "model.fhir_dbt_analytics.observation_quantity_value", "model.fhir_dbt_analytics.observation_reference_encounter_undefined", "model.fhir_dbt_analytics.observation_reference_encounter_unresolved", "model.fhir_dbt_analytics.observation_reference_patient_undefined", "model.fhir_dbt_analytics.observation_reference_patient_unresolved", "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined", "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.Patient_view": ["model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.adults", "model.fhir_dbt_analytics.hypertension_without_medication"], "model.fhir_dbt_analytics.Location_view": ["model.fhir_dbt_analytics.Location"], "model.fhir_dbt_analytics.Condition_view": ["model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.hypertension_without_medication"], "model.fhir_dbt_analytics.Organization_view": ["model.fhir_dbt_analytics.Organization"], "model.fhir_dbt_analytics.ServiceRequest": ["model.fhir_dbt_analytics.active_patients_with_servicerequest_daily", "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.questionnaireresponse_linkid_unresolved", "model.fhir_dbt_analytics.resource_hour_distribution", "model.fhir_dbt_analytics.servicerequest_count", "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined", "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined", "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined", "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved"], "model.fhir_dbt_analytics.CareTeam_view": ["model.fhir_dbt_analytics.CareTeam"], "model.fhir_dbt_analytics.AllergyIntolerance": ["model.fhir_dbt_analytics.active_patients_with_allergyintolerance", "model.fhir_dbt_analytics.allergyintolerance_count", "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined", "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved", "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined", "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.Questionnaire": ["model.fhir_dbt_analytics.questionnaire_count", "model.fhir_dbt_analytics.questionnaireresponse_count"], "model.fhir_dbt_analytics.CareTeam": ["model.fhir_dbt_analytics.active_patients_with_careteam_daily", "model.fhir_dbt_analytics.careteam_count", "model.fhir_dbt_analytics.careteam_reference_encounter_undefined", "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved", "model.fhir_dbt_analytics.careteam_reference_patient_undefined", "model.fhir_dbt_analytics.careteam_reference_patient_unresolved", "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined", "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved"], "model.fhir_dbt_analytics.MedicationAdministration": ["model.fhir_dbt_analytics.active_patients_with_medicationadministration_daily", "model.fhir_dbt_analytics.medicationadministration_count", "model.fhir_dbt_analytics.medicationadministration_dosage_dose_rate", "model.fhir_dbt_analytics.medicationadministration_dosage_instruction", "model.fhir_dbt_analytics.medicationadministration_dosage_route", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.Observation_view": ["model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.hypertension_without_medication"], "model.fhir_dbt_analytics.DiagnosticReport_view": ["model.fhir_dbt_analytics.DiagnosticReport"], "model.fhir_dbt_analytics.Practitioner_view": ["model.fhir_dbt_analytics.Practitioner"], "model.fhir_dbt_analytics.Person_view": ["model.fhir_dbt_analytics.Person"], "model.fhir_dbt_analytics.QuestionnaireResponse": ["model.fhir_dbt_analytics.questionnaireresponse_count"], "model.fhir_dbt_analytics.Person": ["model.fhir_dbt_analytics.person_count", "model.fhir_dbt_analytics.person_reference_patient_undefined", "model.fhir_dbt_analytics.person_reference_patient_unresolved"], "model.fhir_dbt_analytics.MedicationDispense": ["model.fhir_dbt_analytics.medicationdispense_dosage_dose_rate", "model.fhir_dbt_analytics.medicationdispense_dosage_instruction", "model.fhir_dbt_analytics.medicationdispense_dosage_route"], "model.fhir_dbt_analytics.Procedure_view": ["model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.hypertension_without_medication"], "model.fhir_dbt_analytics.MedicationRequest": ["model.fhir_dbt_analytics.active_patients_with_medicationrequest_daily", "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationrequest_count", "model.fhir_dbt_analytics.medicationrequest_dosage_dose_rate", "model.fhir_dbt_analytics.medicationrequest_dosage_instruction", "model.fhir_dbt_analytics.medicationrequest_dosage_route", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved", "model.fhir_dbt_analytics.resource_hour_distribution"], "model.fhir_dbt_analytics.fhir_table_list": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.AllergyIntolerance_view", "model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Binary_view", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.CareTeam_view", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Composition_view", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.Condition_view", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.DiagnosticReport_view", "model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.DocumentReference_view", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.ImagingStudy", "model.fhir_dbt_analytics.ImagingStudy_view", "model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.Location_view", "model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.MedicationAdministration_view", "model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.MedicationDispense_view", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.MedicationStatement_view", "model.fhir_dbt_analytics.Medication_view", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.Organization", "model.fhir_dbt_analytics.Organization_view", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.Person_view", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.PractitionerRole_view", "model.fhir_dbt_analytics.Practitioner_view", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.Procedure_view", "model.fhir_dbt_analytics.Questionnaire", "model.fhir_dbt_analytics.QuestionnaireResponse", "model.fhir_dbt_analytics.QuestionnaireResponse_view", "model.fhir_dbt_analytics.Questionnaire_view", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.ServiceRequest_view", "model.fhir_dbt_analytics.active_encounters_daily", "model.fhir_dbt_analytics.active_encounters_midnight_census", "model.fhir_dbt_analytics.active_patients_with_allergyintolerance", "model.fhir_dbt_analytics.active_patients_with_careteam_daily", "model.fhir_dbt_analytics.active_patients_with_composition_daily", "model.fhir_dbt_analytics.active_patients_with_diagnosticreport_daily", "model.fhir_dbt_analytics.active_patients_with_medicationadministration_daily", "model.fhir_dbt_analytics.active_patients_with_medicationrequest_daily", "model.fhir_dbt_analytics.active_patients_with_medicationstatement", "model.fhir_dbt_analytics.active_patients_with_observation_daily", "model.fhir_dbt_analytics.active_patients_with_servicerequest_daily", "model.fhir_dbt_analytics.allergyintolerance_count", "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_undefined", "model.fhir_dbt_analytics.allergyintolerance_reference_encounter_unresolved", "model.fhir_dbt_analytics.allergyintolerance_reference_patient_undefined", "model.fhir_dbt_analytics.allergyintolerance_reference_patient_unresolved", "model.fhir_dbt_analytics.binary_count", "model.fhir_dbt_analytics.careteam_count", "model.fhir_dbt_analytics.careteam_reference_encounter_undefined", "model.fhir_dbt_analytics.careteam_reference_encounter_unresolved", "model.fhir_dbt_analytics.careteam_reference_patient_undefined", "model.fhir_dbt_analytics.careteam_reference_patient_unresolved", "model.fhir_dbt_analytics.careteam_reference_practitioner_undefined", "model.fhir_dbt_analytics.careteam_reference_practitioner_unresolved", "model.fhir_dbt_analytics.composition_binary_mimetype", "model.fhir_dbt_analytics.composition_count", "model.fhir_dbt_analytics.composition_reference_binary_undefined", "model.fhir_dbt_analytics.composition_reference_binary_unresolved", "model.fhir_dbt_analytics.composition_reference_encounter_undefined", "model.fhir_dbt_analytics.composition_reference_encounter_unresolved", "model.fhir_dbt_analytics.composition_reference_patient_undefined", "model.fhir_dbt_analytics.composition_reference_patient_unresolved", "model.fhir_dbt_analytics.composition_reference_practitioner_undefined", "model.fhir_dbt_analytics.composition_reference_practitioner_unresolved", "model.fhir_dbt_analytics.composition_with_section_text_div", "model.fhir_dbt_analytics.composition_with_type_text", "model.fhir_dbt_analytics.condition_count", "model.fhir_dbt_analytics.condition_reference_encounter_undefined", "model.fhir_dbt_analytics.condition_reference_encounter_unresolved", "model.fhir_dbt_analytics.condition_reference_patient_undefined", "model.fhir_dbt_analytics.condition_reference_patient_unresolved", "model.fhir_dbt_analytics.condition_with_code_text", "model.fhir_dbt_analytics.diagnosticreport_count", "model.fhir_dbt_analytics.diagnosticreport_performer_specialty", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_encounter_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_observation_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_observation_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_patient_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_practitioner_unresolved", "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_undefined", "model.fhir_dbt_analytics.diagnosticreport_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.diagnosticreport_with_attachment", "model.fhir_dbt_analytics.diagnosticreport_with_binary_unresolved", "model.fhir_dbt_analytics.diagnosticreport_with_code_text", "model.fhir_dbt_analytics.diagnosticreport_with_conclusion", "model.fhir_dbt_analytics.documentreference_binary_mimetype", "model.fhir_dbt_analytics.documentreference_count", "model.fhir_dbt_analytics.documentreference_distribution_type", "model.fhir_dbt_analytics.documentreference_mimetype", "model.fhir_dbt_analytics.documentreference_reference_patient_undefined", "model.fhir_dbt_analytics.documentreference_reference_patient_unresolved", "model.fhir_dbt_analytics.documentreference_reference_practitioner_undefined", "model.fhir_dbt_analytics.documentreference_reference_practitioner_unresolved", "model.fhir_dbt_analytics.encounter_count", "model.fhir_dbt_analytics.encounter_count_by_end_date", "model.fhir_dbt_analytics.encounter_count_by_start_date", "model.fhir_dbt_analytics.encounter_reference_location_undefined", "model.fhir_dbt_analytics.encounter_reference_location_unresolved", "model.fhir_dbt_analytics.encounter_reference_patient_undefined", "model.fhir_dbt_analytics.encounter_reference_patient_unresolved", "model.fhir_dbt_analytics.location_count", "model.fhir_dbt_analytics.medication_count", "model.fhir_dbt_analytics.medicationadministration_count", "model.fhir_dbt_analytics.medicationadministration_dosage_dose_rate", "model.fhir_dbt_analytics.medicationadministration_dosage_instruction", "model.fhir_dbt_analytics.medicationadministration_dosage_route", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_medication_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationadministration_reference_patient_undefined", "model.fhir_dbt_analytics.medicationadministration_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationdispense_dosage_dose_rate", "model.fhir_dbt_analytics.medicationdispense_dosage_instruction", "model.fhir_dbt_analytics.medicationdispense_dosage_route", "model.fhir_dbt_analytics.medicationrequest_count", "model.fhir_dbt_analytics.medicationrequest_dosage_dose_rate", "model.fhir_dbt_analytics.medicationrequest_dosage_instruction", "model.fhir_dbt_analytics.medicationrequest_dosage_route", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medication_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_medicationrequest_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_patient_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_patient_unresolved", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_undefined", "model.fhir_dbt_analytics.medicationrequest_reference_practitioner_unresolved", "model.fhir_dbt_analytics.medicationstatement_count", "model.fhir_dbt_analytics.medicationstatement_dosage_dose_rate", "model.fhir_dbt_analytics.medicationstatement_dosage_instruction", "model.fhir_dbt_analytics.medicationstatement_dosage_route", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_encounter_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_medication_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_medication_unresolved", "model.fhir_dbt_analytics.medicationstatement_reference_patient_undefined", "model.fhir_dbt_analytics.medicationstatement_reference_patient_unresolved", "model.fhir_dbt_analytics.observation_count", "model.fhir_dbt_analytics.observation_quantity_unit", "model.fhir_dbt_analytics.observation_quantity_value", "model.fhir_dbt_analytics.observation_reference_encounter_undefined", "model.fhir_dbt_analytics.observation_reference_encounter_unresolved", "model.fhir_dbt_analytics.observation_reference_patient_undefined", "model.fhir_dbt_analytics.observation_reference_patient_unresolved", "model.fhir_dbt_analytics.observation_reference_servicerequest_undefined", "model.fhir_dbt_analytics.observation_reference_servicerequest_unresolved", "model.fhir_dbt_analytics.organization_count", "model.fhir_dbt_analytics.patient_count", "model.fhir_dbt_analytics.patient_dob_distribution", "model.fhir_dbt_analytics.patient_inactive", "model.fhir_dbt_analytics.patient_missing_dob", "model.fhir_dbt_analytics.patient_missing_encounter", "model.fhir_dbt_analytics.patient_missing_mrn", "model.fhir_dbt_analytics.patient_name_missing", "model.fhir_dbt_analytics.patient_testpatient", "model.fhir_dbt_analytics.patient_unknown_gender", "model.fhir_dbt_analytics.person_count", "model.fhir_dbt_analytics.person_reference_patient_undefined", "model.fhir_dbt_analytics.person_reference_patient_unresolved", "model.fhir_dbt_analytics.practitioner_count", "model.fhir_dbt_analytics.practitionerrole_count", "model.fhir_dbt_analytics.procedure_count", "model.fhir_dbt_analytics.procedure_reference_encounter_undefined", "model.fhir_dbt_analytics.procedure_reference_encounter_unresolved", "model.fhir_dbt_analytics.procedure_reference_patient_undefined", "model.fhir_dbt_analytics.procedure_reference_patient_unresolved", "model.fhir_dbt_analytics.procedure_reference_practitioner_undefined", "model.fhir_dbt_analytics.procedure_reference_practitioner_unresolved", "model.fhir_dbt_analytics.procedure_with_code_text", "model.fhir_dbt_analytics.questionnaire_count", "model.fhir_dbt_analytics.questionnaireresponse_count", "model.fhir_dbt_analytics.questionnaireresponse_linkid_unresolved", "model.fhir_dbt_analytics.resource_hour_distribution", "model.fhir_dbt_analytics.servicerequest_count", "model.fhir_dbt_analytics.servicerequest_reference_encounter_undefined", "model.fhir_dbt_analytics.servicerequest_reference_encounter_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_patient_undefined", "model.fhir_dbt_analytics.servicerequest_reference_patient_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_undefined", "model.fhir_dbt_analytics.servicerequest_reference_practitioner_unresolved", "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_undefined", "model.fhir_dbt_analytics.servicerequest_reference_servicerequest_unresolved"], "model.fhir_dbt_analytics.project_variables": [], "model.fhir_dbt_analytics.metric_all_definitions": ["model.fhir_dbt_analytics.metric", "model.fhir_dbt_analytics.metric_definition", "model.fhir_dbt_analytics.metric_latest_execution"], "model.fhir_dbt_analytics.unioned_thresholds": ["model.fhir_dbt_analytics.metric_thresholds"], "model.fhir_dbt_analytics.metric_by_year_dimensions": [], "model.fhir_dbt_analytics.metric_by_year": [], "model.fhir_dbt_analytics.metric_by_day_dimensions": ["test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885", "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1", "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions__safe_divide_numerator_denominator_measure.154d11b42e"], "model.fhir_dbt_analytics.metric_overall": [], "model.fhir_dbt_analytics.metric_by_day": [], "seed.fhir_dbt_analytics.thresholds": [], "seed.fhir_dbt_analytics.clinical_code_groups": ["model.fhir_dbt_analytics.hypertension_without_medication"], "seed.fhir_dbt_analytics.site_timezones": ["model.fhir_dbt_analytics.AllergyIntolerance", "model.fhir_dbt_analytics.AllergyIntolerance_view", "model.fhir_dbt_analytics.Binary", "model.fhir_dbt_analytics.Binary_view", "model.fhir_dbt_analytics.CareTeam", "model.fhir_dbt_analytics.CareTeam_view", "model.fhir_dbt_analytics.Composition", "model.fhir_dbt_analytics.Composition_view", "model.fhir_dbt_analytics.Condition", "model.fhir_dbt_analytics.Condition_view", "model.fhir_dbt_analytics.DiagnosticReport", "model.fhir_dbt_analytics.DiagnosticReport_view", "model.fhir_dbt_analytics.DocumentReference", "model.fhir_dbt_analytics.DocumentReference_view", "model.fhir_dbt_analytics.Encounter", "model.fhir_dbt_analytics.Encounter_view", "model.fhir_dbt_analytics.ImagingStudy", "model.fhir_dbt_analytics.ImagingStudy_view", "model.fhir_dbt_analytics.Location", "model.fhir_dbt_analytics.Location_view", "model.fhir_dbt_analytics.Medication", "model.fhir_dbt_analytics.MedicationAdministration", "model.fhir_dbt_analytics.MedicationAdministration_view", "model.fhir_dbt_analytics.MedicationDispense", "model.fhir_dbt_analytics.MedicationDispense_view", "model.fhir_dbt_analytics.MedicationRequest", "model.fhir_dbt_analytics.MedicationRequest_view", "model.fhir_dbt_analytics.MedicationStatement", "model.fhir_dbt_analytics.MedicationStatement_view", "model.fhir_dbt_analytics.Medication_view", "model.fhir_dbt_analytics.Observation", "model.fhir_dbt_analytics.Observation_view", "model.fhir_dbt_analytics.Organization", "model.fhir_dbt_analytics.Organization_view", "model.fhir_dbt_analytics.Patient", "model.fhir_dbt_analytics.Patient_view", "model.fhir_dbt_analytics.Person", "model.fhir_dbt_analytics.Person_view", "model.fhir_dbt_analytics.Practitioner", "model.fhir_dbt_analytics.PractitionerRole", "model.fhir_dbt_analytics.PractitionerRole_view", "model.fhir_dbt_analytics.Practitioner_view", "model.fhir_dbt_analytics.Procedure", "model.fhir_dbt_analytics.Procedure_view", "model.fhir_dbt_analytics.Questionnaire", "model.fhir_dbt_analytics.QuestionnaireResponse", "model.fhir_dbt_analytics.QuestionnaireResponse_view", "model.fhir_dbt_analytics.Questionnaire_view", "model.fhir_dbt_analytics.ServiceRequest", "model.fhir_dbt_analytics.ServiceRequest_view"], "test.fhir_dbt_analytics.relationships_metric_latest_execution_metric_name__metric_name__ref_metric_definition_.37045045ef": [], "test.fhir_dbt_analytics.accepted_values_metric_by_day_dimensions_calculation__COUNT__PROPORTION__RATIO__DISTRIBUTION.6ee039d4bd": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_numerator__calculation_COUNT_.de83b45781": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_numerator__calculation_IN_PROPORTION_RATIO_.5d9af25bc1": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_null_metric_by_day_dimensions_denominator__calculation_COUNT_.0bbc62857e": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_not_be_null_metric_by_day_dimensions_denominator__calculation_IN_PROPORTION_RATIO_.43d3e5b885": [], "test.fhir_dbt_analytics.dbt_expectations_expect_column_values_to_be_between_metric_by_day_dimensions_measure__1__0__calculation_IN_PROPORTION_RATIO_.2e97a99dd3": [], "test.fhir_dbt_analytics.dbt_utils_expression_is_true_metric_by_day_dimensions__safe_divide_numerator_denominator_measure.154d11b42e": [], "source.fhir_dbt_analytics.fhir.Patient": [], "source.fhir_dbt_analytics.fhir.Questionnaire": [], "source.fhir_dbt_analytics.fhir.QuestionnaireResponse": []}, "group_map": {}, "semantic_models": {}}